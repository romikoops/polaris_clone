---
name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  lint:
    name: Lint Code Base
    runs-on: ubuntu-20.04
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v2
      - uses: github/super-linter@v3.15.2
        env:
          DEFAULT_BRANCH: master
          FILTER_REGEX_EXCLUDE: "^(.*/spec/api/api/.*|db/data_schema.rb|db/structure.sql)$"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LINTER_RULES_PATH: /
          RUBY_CONFIG_FILE: .rubocop.yml
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_DOCKERFILE: false

  triage:
    name: "Triage"
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/labeler@v3
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"

  test-gems:
    name: Test / Gems
    runs-on: ubuntu-20.04

    defaults:
      run:
        working-directory: gems/money_cache

    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
      - uses: actions/cache@v2.1.4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/money_cache.gemspec') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Bundle install
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - run: bundle exec rspec --fail-fast

  test-app:
    name: Test / App

    runs-on: ubuntu-20.04

    services:
      postgres:
        image: postgis/postgis:12-3.0-alpine
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      DATABASE_URL: postgis://postgres:@localhost/polaris_test
      ELASTICSEARCH_URL: http://localhost:9200
      RAILS_ENV: test
      REDIS_URL: redis://localhost:6379

    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
      - uses: ankane/setup-elasticsearch@v1
        with:
          elasticsearch-version: 7.4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake git libgeos-dev libpq-dev libssl-dev \
            locales postgresql-client-12 tzdata wkhtmltopdf
          npm install -g 'mjml@4.3.1'

      - uses: actions/cache@v2.1.4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-app-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-app-
      - name: Bundle install
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - run: bin/rails db:test:prepare && bin/rails db:migrate

      - uses: actions/upload-artifact@v2
        with:
          name: swagger-base
          path: doc/api/swagger.json

      - name: API Specs
        run: |
          bundle exec rspec \
            --pattern 'engines/api/spec/api/api/*_spec.rb' \
            --fail-fast \
            --format Rswag::Specs::SwaggerFormatter \
            --order defined \
            .
        timeout-minutes: 15

      - uses: actions/upload-artifact@v2
        with:
          name: swagger-revision
          path: doc/api/swagger.json

      - run: bundle exec rspec --exclude-pattern '{gems,vendor}/**/*_spec.rb' --fail-fast .
        timeout-minutes: 35

  docs:
    name: API Docs
    needs: [test-app]
    if: github.event_name == 'pull_request'

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.base_ref }}
      - uses: actions/download-artifact@v2
        with:
          name: swagger-base
          path: base/
      - uses: actions/download-artifact@v2
        with:
          name: swagger-revision
          path: revision/

      - id: api_changes
        uses: itsmycargo/openapi-diff-action@main
        with:
          base: doc/api/swagger.json
          revision: revision/swagger.json

      - id: committed
        uses: itsmycargo/openapi-diff-action@main
        with:
          base: base/swagger.json
          revision: revision/swagger.json

      - uses: peter-evans/find-comment@v1
        id: comment-changes
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '<!-- api_docs:changes -->'

      - uses: peter-evans/create-or-update-comment@v1
        if: steps.api_changes.outputs.state != 'no_changes'
        with:
          comment-id: ${{ steps.comment-changes.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            <!-- api_docs:changes -->
            ### API Changes


            ${{ steps.api_changes.outputs.verdict }}


            ${{ steps.api_changes.outputs.changes }}
          edit-mode: replace

      - uses: peter-evans/find-comment@v1
        id: comment-committed
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '<!-- api_docs:committed -->'

      - uses: peter-evans/create-or-update-comment@v1
        if: steps.committed.outputs.state != 'no_changes'
        with:
          comment-id: ${{ steps.comment-committed.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            <!-- api_docs:committed -->
            :bangbang: OpenAPI Specification file has been changed during test!

            It seems that updated OpenAPI Specification file has not been committed to
            this branch (`doc/api/swagger.json`). If you did changes to API Specs,
            please remember to run

                rails doc:api

            locally to run API specs and update documentation.
          edit-mode: replace
      - uses: peter-evans/create-or-update-comment@v1
        if: steps.committed.outputs.state == 'no_changes' && steps.comment-committed.outputs.comment-id
        with:
          comment-id: ${{ steps.comment-committed.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            <!-- api_docs:committed -->
            :white_check_mark: OpenAPI Specification file has been committed.

            Thank you for running `rails docs:api` before committing.

          edit-mode: replace
      - if: steps.committed.outputs.state != 'no_changes'
        run: |
          echo "::error file=doc/api/swagger.json::Updated OpenAPI Specification has not been committed."

          exit 1

  docker:
    name: Docker
    runs-on: ubuntu-20.04
    steps:
      - id: meta
        uses: itsmycargo/docker-meta-action@v1.0.0
        with:
          image: 003688427525.dkr.ecr.eu-central-1.amazonaws.com/polaris

      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Cache Docker layers
        uses: actions/cache@v2.1.4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: RELEASE=${{ steps.meta.outputs.sha }}

  sentry:
    if: github.ref == 'refs/heads/master'
    needs: [test-gems, test-app, docker]

    name: Sentry
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: polaris
