variables:
  BUNDLE_GITLAB__COM: "gitlab-ci-token:${CI_JOB_TOKEN}"
  AUTO_DEVOPS_DOMAIN: itsmycargo.tech

stages:
  - test
  - build
  - review
  - review_cleanup

code_quality:
  stage: test
  image: eu.gcr.io/itsmycargo-main/pronto:stable
  retry: 1
  tags:
    - itsmycargo
  cache:
    paths:
      - client/node_modules

  script:
    - scripts/pronto

  except:
    refs:
      - master
      - dev

danger-review:
  stage: test
  image: eu.gcr.io/itsmycargo-main/danger:latest
  retry: 1
  tags:
    - itsmycargo
  allow_failure: true
  cache: {}
  dependencies: []
  before_script: []

  script:
    - danger --fail-on-errors=true

  only:
    variables:
      - $DANGER_GITLAB_API_TOKEN
  except:
    refs:
      - master
      - dev

api:
  stage: test
  image: eu.gcr.io/itsmycargo-main/base:stable
  retry: 1
  tags:
    - itsmycargo
  cache:
    paths:
      - vendor/ruby
  variables:
    POSTGRES_DB: imcr_test
    DATABASE_URL: postgis://postgres:@localhost/imcr_test
  services:
    - mdillon/postgis

  script:
    - scripts/test

  coverage: '/\(\d+.\d+\%\) covered/'
  artifacts:
    paths:
      - coverage/
    expire_in: 1 week
    reports:
      junit:
        - engines/*/rspec.xml
        - lib/*/rspec.xml
        - rspec.xml

client:
  stage: test
  image: node:10-alpine
  retry: 1
  tags:
    - itsmycargo
  retry: 1

  cache:
    paths:
    - client/node_modules/

  before_script:
    - apk add --no-cache --update autoconf automake bash build-base lcms2-dev libjpeg-turbo-utils libpng-dev

  script:
    - cd client
    - npm install
    - npm run test:ci

  coverage: '/^Statements\s*:\s*([^%]+)/'
  artifacts:
    paths:
      - client/coverage/lcov-report
    expire_in: 1 week
    reports:
      junit:
        - client/junit.xml

docker:
  stage: build
  image: docker:stable
  retry: 1
  tags:
    - itsmycargo
  variables:
    DOCKER_HOST: tcp://localhost:2375/
    DOCKER_DRIVER: overlay2
    SENTRY_AUTH_TOKEN: 099b9abd2844497db3dace7307576c12fadc7d47bd68416584cdb4b90709de95
  services:
    - docker:dind

  script: |
    install_dependencies
    registry_login
    /usr/bin/habitus -env REGISTRY=eu.gcr.io/itsmycargo-main -env TAG=${CI_COMMIT_SHA}
    /usr/bin/habitus -env REGISTRY=eu.gcr.io/itsmycargo-main -env TAG=${CI_COMMIT_SHA} \
      -build RELEASE=${CI_COMMIT_SHA} \
      -build SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN} \
      -d client/
    docker push eu.gcr.io/itsmycargo-main/imc/api:${CI_COMMIT_SHA}
    docker push eu.gcr.io/itsmycargo-main/imc/client:${CI_COMMIT_SHA}
  only:
    - branches
  except:
    - master
    - dev

deploy:
  stage: review
  image: eu.gcr.io/itsmycargo-main/deploy:latest
  tags:
    - itsmycargo

  script:
    - deploy
    - echo -e -n "$CI_ENVIRONMENT_SLUG" > ci_environment_slug.txt

  artifacts:
    paths:
    - ci_environment_slug.txt

  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://demo.$CI_ENVIRONMENT_SLUG.$AUTO_DEVOPS_DOMAIN
    on_stop: stop_review
  only:
    - branches
  except:
    - master
    - dev

reset_database:
  stage: review_cleanup
  image: eu.gcr.io/itsmycargo-main/deploy:latest
  tags:
    - itsmycargo
  variables:
    GIT_STRATEGY: none
    REVIEW_NAMESPACE: default

  script:
    - export CI_ENVIRONMENT_SLUG=$(cat ci_environment_slug.txt)
    - kubectl -n $REVIEW_NAMESPACE exec $(kubectl -n $REVIEW_NAMESPACE get pods -l app=postgresql,release=${CI_ENVIRONMENT_SLUG} -o jsonpath='{.items[].metadata.name}') /usr/local/bin/reset.sh full_anon
    - kubectl -n $REVIEW_NAMESPACE delete pods -l app=imc-app,release=${CI_ENVIRONMENT_SLUG}

  when: manual
  allow_failure: true
  only:
    - branches
  except:
    - master
    - dev
  dependencies:
    - deploy

stop_review:
  stage: review_cleanup
  image: eu.gcr.io/itsmycargo-main/deploy:latest
  tags:
    - itsmycargo
  variables:
    GIT_STRATEGY: none

  script:
    - delete
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  allow_failure: true
  only:
    - branches
  except:
    - master
    - dev

.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  export GCP_REGISTRY=eu.gcr.io/itsmycargo-main
  export DEVOPS_CHART=chart/
  export REVIEW_NAMESPACE=${REVIEW_NAMESPACE:=default}
  [[ "$TRACE" ]] && set -x

  function install_dependencies() {
    apk add --no-cache --update git
    wget -q -O /usr/bin/habitus 'https://github.com/cloud66-oss/habitus/releases/download/1.0.3/habitus_linux_amd64'
    chmod +x /usr/bin/habitus
  }

  function registry_login() {
    if [[ -n "$GCP_REGISTRY" ]]; then
      echo "Logging to Google Container Registry..."
      docker login -u _json_key --password-stdin eu.gcr.io/itsmycargo-main <${GOOGLE_APPLICATION_CREDENTIALS}
      echo ""
    fi
  }

  function deploy() {
    _helm_deploy || (delete && exit 1)
  }

  function delete() {
    name="$CI_ENVIRONMENT_SLUG"

    if [[ -n "$(helm ls -q "^$name$")" ]]; then
      helm delete --purge "$name"
      kubectl --namespace=${REVIEW_NAMESPACE} delete persistentvolumeclaims "${CI_ENVIRONMENT_SLUG}-postgresql" || true
    fi
  }

  function _helm_deploy() {
    helm upgrade --install \
      --wait \
      --timeout 600 \
      --set backend.image.tag="$CI_COMMIT_SHA" \
      --set frontend.image.tag="$CI_COMMIT_SHA" \
      --set service.url="https://$CI_ENVIRONMENT_SLUG.$AUTO_DEVOPS_DOMAIN" \
      --namespace=${REVIEW_NAMESPACE} \
      --version="$CI_PIPELINE_ID-$CI_JOB_ID" \
      "$CI_ENVIRONMENT_SLUG" \
      $DEVOPS_CHART
  }

before_script:
  - *auto_devops
