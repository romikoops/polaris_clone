// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`customs.import.unknown && customs.export.unknown 1`] = `
<div
  className="flex-100 layout-row layout-wrap padd_top"
  name="cargoDetailsBox"
>
  <div
    className="flex-100 layout-row layout-align-center"
  >
    <div
      className="flex-none content_width layout-row layout-wrap"
    >
      <div
        className="flex-100 layout-row layout-sm-wrap"
      >
        <div
          className="flex-50"
        >
          <div
            className="flex-100"
          >
            <div
              className="flex-100 layout-align-start-center layout-row"
            >
              <div
                className="flex-none"
              >
                <TextHeading
                  color="black"
                  fontWeight="normal"
                  size={2}
                  text="Cargo Details"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                />
              </div>
            </div>
             
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={3}
                text="Total value of goods"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap layout-align-start-start"
          >
            <div
              className="flex-100 layout-row layout-wrap"
            >
              <div
                className="flex-100 layout-row"
              >
                <div
                  className="flex-66 layout-row"
                >
                  <Formsy(FormsyInput)
                    className="flex-100 ccb_total_goods_value cargo_input "
                    errorMessageStyles={
                      Object {
                        "bottom": "-17px",
                        "fontSize": "13px",
                      }
                    }
                    innerRef={[Function]}
                    name="totalGoodsValue"
                    onBlur={[Function]}
                    required={3370}
                    submitAttempted={false}
                    type="number"
                    validationError=""
                    validationErrors={
                      Object {
                        "isDefaultRequiredValue": "Must be greater than 0",
                        "nonNegative": "Must be greater than 0",
                      }
                    }
                    validations={
                      Object {
                        "nonNegative": [Function],
                      }
                    }
                    value={11}
                    wrapperClassName="flex-100 wrapper_cargo_input"
                  />
                </div>
                <div
                  className="flex-33 layout-row"
                >
                  <NamedSelect
                    className="flex-100 ccb_currency"
                    clearable={false}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "EUR",
                          "value": "EUR",
                        },
                        Object {
                          "label": "AUD",
                          "value": "AUD",
                        },
                        Object {
                          "label": "BGN",
                          "value": "BGN",
                        },
                        Object {
                          "label": "BRL",
                          "value": "BRL",
                        },
                        Object {
                          "label": "CAD",
                          "value": "CAD",
                        },
                        Object {
                          "label": "CHF",
                          "value": "CHF",
                        },
                        Object {
                          "label": "CNY",
                          "value": "CNY",
                        },
                        Object {
                          "label": "CZK",
                          "value": "CZK",
                        },
                        Object {
                          "label": "DKK",
                          "value": "DKK",
                        },
                        Object {
                          "label": "GBP",
                          "value": "GBP",
                        },
                        Object {
                          "label": "HKD",
                          "value": "HKD",
                        },
                        Object {
                          "label": "HRK",
                          "value": "HRK",
                        },
                        Object {
                          "label": "HUF",
                          "value": "HUF",
                        },
                        Object {
                          "label": "IDR",
                          "value": "IDR",
                        },
                        Object {
                          "label": "ILS",
                          "value": "ILS",
                        },
                        Object {
                          "label": "INR",
                          "value": "INR",
                        },
                        Object {
                          "label": "JPY",
                          "value": "JPY",
                        },
                        Object {
                          "label": "KRW",
                          "value": "KRW",
                        },
                        Object {
                          "label": "MXN",
                          "value": "MXN",
                        },
                        Object {
                          "label": "MYR",
                          "value": "MYR",
                        },
                        Object {
                          "label": "NOK",
                          "value": "NOK",
                        },
                        Object {
                          "label": "NZD",
                          "value": "NZD",
                        },
                        Object {
                          "label": "PHP",
                          "value": "PHP",
                        },
                        Object {
                          "label": "PLN",
                          "value": "PLN",
                        },
                        Object {
                          "label": "RON",
                          "value": "RON",
                        },
                        Object {
                          "label": "RUB",
                          "value": "RUB",
                        },
                        Object {
                          "label": "SEK",
                          "value": "SEK",
                        },
                        Object {
                          "label": "SGD",
                          "value": "SGD",
                        },
                        Object {
                          "label": "THB",
                          "value": "THB",
                        },
                        Object {
                          "label": "TRY",
                          "value": "TRY",
                        },
                        Object {
                          "label": "USD",
                          "value": "USD",
                        },
                        Object {
                          "label": "ZAR",
                          "value": "ZAR",
                        },
                      ]
                    }
                    value={
                      Object {
                        "label": "EUR",
                        "value": "EUR",
                      }
                    }
                  />
                </div>
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-wrap"
              id="cargo_notes"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Description of Goods (HS Codes if available)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 ccb_description_goods cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="cargoNotes"
                  onBlur={[Function]}
                  required="MANDATORY_FIELDS_DESCRIPTION"
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={
                    Object {
                      "isDefaultRequiredValue": "Must not be empty",
                    }
                  }
                  validations={null}
                  value="CARGO_NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <h4
                    className="no_m flex-30"
                  >
                    Incoterms
                     
                    <span>
                      (Optional)
                    </span>
                  </h4>
                  <p
                    className="pointy flex-none incoterm_info"
                    onClick={[Function]}
                  >
                    More info
                  </p>
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="incotermText"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value=""
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
          </div>
        </div>
        <div
          className="flex-50 padding_left offset-gt-sm-5 layout-row layout-wrap layout-align-start-start"
        >
          <div
            className="flex-100 layout-align-start-center layout-row"
          >
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={2}
                text="Shipment Documents "
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
              <br />
              if available
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="packing_sheet"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Packing List"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="packing_sheet"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="commercial_invoice"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Commercial Invoice"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="commercial_invoice"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-align-start-start layout-wrap"
          >
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Notes (Optional)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="notes"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value="NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-gt-sm-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className=" flex-100 layout-row layout-align-start-start-space-around layout-wrap"
              >
                <DocumentsMultiForm
                  deleteFn={[Function]}
                  dispatchFn={[Function]}
                  documents={Array []}
                  t={[Function]}
                  text="Miscellaneous"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                  tooltip=""
                  type="miscellaneous"
                  uploadFn={null}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div
    className="insurance_customs_sec flex-100 layout-row layout-wrap layout-align-center"
  >
    <CustomsClearance
      customs={
        Object {
          "export": Object {
            "total": Object {
              "currency": "EUR",
              "value": 100,
            },
            "unknown": true,
          },
          "import": Object {
            "total": Object {
              "currency": "EUR",
            },
            "unknown": true,
          },
          "total": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
        }
      }
      customsData={
        Object {
          "export": Object {
            "bool": true,
          },
          "import": Object {
            "bool": true,
            "total": Object {
              "currency": "USD",
            },
          },
          "val": "FOO_CUSTOM_DATA",
        }
      }
      deleteDoc={[Function]}
      dispatchFn={[Function]}
      documents={
        Array [
          Object {
            "approved": "approved",
            "created_at": "2018-12-01T18:14:33z",
            "doc_type": "FOO_DOC_TYPE",
            "signed_url": "FOO_SIGNED_URL",
            "text": "FOO_DOCUMENT_TEXT",
          },
          Object {
            "approved": "rejected",
            "created_at": "2018-12-02T11:14:33z",
            "doc_type": "BAR_DOC_TYPE",
            "signed_url": "BAR_SIGNED_URL",
            "text": "BAR_DOCUMENT_TEXT",
          },
        ]
      }
      eori="EORI"
      handleChange={[Function]}
      setCustomsFee={[Function]}
      shipment={
        Object {
          "booking_placed_at": "2018-11-01T11:14:33z",
          "cargo_count": 2,
          "cargo_items_attributes": Array [],
          "cargo_notes": "SHIPMENT_CARGO_NOTES",
          "cargo_units": Array [
            Object {
              "height": 67,
              "length": 63,
              "quantity": 2,
              "width": 107,
            },
          ],
          "clientName": "SHIPMENT_CLIENT_NAME",
          "containers_attributes": Array [],
          "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
          "destination": Object {
            "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
          },
          "destination_hub": Object {
            "name": "SHIPMENT_DESTINATION_HUB",
            "startHub": Object {
              "address": Object {},
            },
          },
          "direction": "import",
          "eori": 1234,
          "has_on_carriage": false,
          "has_pre_carriage": false,
          "id": 654,
          "imc_reference": "SHIPMENT_IMC_REFERENCE",
          "incoterm": "SHIPMENT_INCOTERM",
          "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
          "load_type": "cargo_item",
          "notes": "SHIPMENT_NOTES",
          "origin": Object {
            "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
          },
          "origin_hub": Object {
            "name": "SHIPMENT_ORIGIN_HUB",
            "startHub": Object {
              "address": Object {
                "city": "FOO_ADDRESS_CITY",
                "country": "FOO_ADDRESS_COUNTRY",
                "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                "id": 246,
                "primary": true,
                "street": "FOO_ADDRESS_STREET",
                "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                "user": Object {
                  "primary": true,
                },
                "zipCode": "FOO_ADDRESS_ZIP_CODE",
              },
            },
          },
          "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
          "planned_eta": "2018-12-01T18:14:33z",
          "planned_etd": "2018-11-12T12:37:08z",
          "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
          "planned_pickup_date": "2018-12-08T04:30:08z",
          "schedule_set": Array [
            Object {
              "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
            },
          ],
          "schedules_charges": Object {
            "AIR_HUB_ROUTE_KEY": Object {
              "total": 200,
            },
            "OCEAN_HUB_ROUTE_KEY": Object {
              "total": 40,
            },
            "RAIL_HUB_ROUTE_KEY": Object {
              "total": 125,
            },
            "TRUCK_HUB_ROUTE_KEY": Object {
              "total": 75,
            },
          },
          "selected_offer": Object {
            "cargo": Object {},
            "customs": Object {
              "hasUnknown": false,
              "val": 12,
            },
            "insurance": Object {
              "val": 5,
            },
            "total": Object {
              "value": 87,
            },
          },
          "service_level": "standard",
          "status": "finished",
          "total_goods_value": Object {
            "currency": "USD",
            "value": 150000,
          },
          "total_price": Object {
            "currency": "USD",
            "value": 137550,
          },
          "trucking": Object {
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "on_carriage": Object {
              "trucking_time_in_seconds": 28,
            },
            "pre_carriage": Object {
              "trucking_time_in_seconds": 55,
            },
          },
          "updated_at": "2018-11-01T18:14:33z",
        }
      }
      shipmentData={
        Object {
          "addons": Object {
            "customs_export_paper": true,
          },
          "addresses": Object {
            "destination": Object {
              "city": "BAR_CITY",
              "country": "China",
              "street": "BAR_STREET",
              "street_number": 9,
              "zip_code": 845321,
            },
            "endHub": "FOO_END_HUB",
            "origin": Object {
              "city": "FOO_CITY",
              "country": "Germany",
              "street": "FOO_STREET",
              "street_number": 7,
              "zip_code": 21177,
            },
            "startHub": "FOO_START_HUB",
          },
          "aggregatedCargo": Object {
            "cargo_item_type_id": "foo",
            "chargeable_weight": 250,
            "dangerous_goods": false,
            "description": "FOO_CARGO_ITEM_DESCRIPTION",
            "gross_weight": 76,
            "height": 40,
            "hs_codes": Array [
              4,
            ],
            "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
            "id": 1,
            "key": "FOO_CARGO_ITEM_KEY",
            "length": 60,
            "payload_in_kg": 200,
            "quantity": 5,
            "stackable": true,
            "tare_weight": 20,
            "volume": 12,
            "weight": 220,
            "width": 10,
          },
          "cargoItemTypes": Object {
            "bar": Object {
              "description": "BAR_TYPE",
            },
            "foo": Object {
              "description": "FOO_TYPE",
            },
          },
          "cargoItems": Array [
            Object {
              "cargo_item_type_id": "foo",
              "chargeable_weight": 250,
              "dangerous_goods": false,
              "description": "FOO_CARGO_ITEM_DESCRIPTION",
              "gross_weight": 76,
              "height": 40,
              "hs_codes": Array [
                4,
              ],
              "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
              "id": 1,
              "key": "FOO_CARGO_ITEM_KEY",
              "length": 60,
              "payload_in_kg": 200,
              "quantity": 5,
              "stackable": true,
              "tare_weight": 20,
              "weight": 220,
              "width": 10,
            },
            Object {
              "cargo_item_type_id": "bar",
              "chargeable_weight": 150,
              "description": "BAR_CARGO_ITEM_DESCRIPTION",
              "height": 70,
              "hs_codes": Array [],
              "hs_text": "BAR_CARGO_ITEM_HS_TEXT",
              "id": 2,
              "key": "BAR_CARGO_ITEM_KEY",
              "length": 50,
              "payload_in_kg": 100,
              "quantity": 7,
              "stackable": false,
              "width": 100,
            },
          ],
          "contacts": Array [],
          "containers": Array [
            Object {
              "cargo_group_id": 4,
              "customs_text": "FOO_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 130,
              "hs_codes": Array [],
              "id": 1,
              "payload_in_kg": 200,
              "quantity": 5,
              "size_class": "FOO_CONTAINER_SIZE_CLASS",
              "tare_weight": 50,
            },
            Object {
              "cargo_group_id": 5,
              "customs_text": "BAR_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 457,
              "hs_codes": Array [],
              "id": 2,
              "payload_in_kg": 450,
              "quantity": 7,
              "size_class": "BAR_CONTAINER_SIZE_CLASS",
              "tare_weight": 7,
            },
          ],
          "customs": Object {
            "export": Object {
              "total": Object {
                "currency": "EUR",
                "value": 100,
              },
              "unknown": true,
            },
            "import": Object {
              "total": Object {
                "currency": "EUR",
              },
              "unknown": true,
            },
            "total": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
          },
          "dangerousGoods": false,
          "documents": Array [
            Object {
              "approved": "approved",
              "created_at": "2018-12-01T18:14:33z",
              "doc_type": "FOO_DOC_TYPE",
              "signed_url": "FOO_SIGNED_URL",
              "text": "FOO_DOCUMENT_TEXT",
            },
            Object {
              "approved": "rejected",
              "created_at": "2018-12-02T11:14:33z",
              "doc_type": "BAR_DOC_TYPE",
              "signed_url": "BAR_SIGNED_URL",
              "text": "BAR_DOCUMENT_TEXT",
            },
          ],
          "hubs": Object {
            "endHub": "END_HUB",
            "startHub": "START_HUB",
          },
          "notifyees": Array [
            Object {
              "first_name": "John",
              "last_name": "Doe",
            },
            Object {
              "first_name": "Robert",
              "last_name": "Plant",
            },
            Object {
              "first_name": "James",
              "last_name": "Brows",
            },
          ],
          "results": Array [
            Object {
              "meta": Object {
                "carrier_name": "FOO_CARRIER_NAME",
                "destination_hub": Object {
                  "name": "Shanghai",
                },
                "mode_of_transport": "air",
                "origin_hub": Object {
                  "name": "Gothenburg",
                },
                "pricing_range_data": Object {
                  "fcl_20": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "750.0",
                      "range": Array [],
                      "rate": "750.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "750.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40_hq": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                },
                "service_level": "FOO_SERVICE_LEVEL",
                "service_level_count": 1,
                "transit_time": 1,
              },
              "quote": Object {
                "total": Object {
                  "value": 467,
                },
              },
              "schedules": Array [
                Object {
                  "closing_date": "16-09-2018",
                  "eta": "10-09-2018",
                  "etd": "15-09-2018",
                },
              ],
            },
            Object {
              "meta": Object {
                "mode_of_transport": "ocean",
                "transit_time": 2,
              },
              "quote": Object {
                "total": Object {
                  "value": 309,
                },
              },
            },
          ],
          "routes": Array [],
          "schedule": Object {
            "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
          },
          "schedules": Array [
            Object {
              "closing_date": "2018-11-01T11:14:33z",
              "eta": "2018-11-18T11:14:33z",
              "etd": "2018-11-13T11:14:33z",
              "hub_route_key": "AIR_HUB_ROUTE_KEY",
              "mode_of_transport": "air",
            },
            Object {
              "closing_date": "2018-11-05T11:14:33z",
              "destination_hub": Object {},
              "eta": "2018-11-22T11:14:33z",
              "etd": "2018-11-17T11:14:33z",
              "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
              "mode_of_transport": "ocean",
              "origin_hub": Object {},
              "total_price": Object {
                "currency": "EUR",
                "value": 112,
              },
            },
            Object {
              "closing_date": "2018-11-03T11:14:33z",
              "eta": "2018-11-20T11:14:33z",
              "etd": "2018-11-15T11:14:33z",
              "hub_route_key": "RAIL_HUB_ROUTE_KEY",
              "mode_of_transport": "rail",
            },
            Object {
              "closing_date": "2018-11-02T11:14:33z",
              "eta": "2018-11-19T11:14:33z",
              "etd": "2018-11-14T11:14:33z",
              "hub_route_key": "TRUCK_HUB_ROUTE_KEY",
              "mode_of_transport": "truck",
            },
          ],
          "shipment": Object {
            "booking_placed_at": "2018-11-01T11:14:33z",
            "cargo_count": 2,
            "cargo_items_attributes": Array [],
            "cargo_notes": "SHIPMENT_CARGO_NOTES",
            "cargo_units": Array [
              Object {
                "height": 67,
                "length": 63,
                "quantity": 2,
                "width": 107,
              },
            ],
            "clientName": "SHIPMENT_CLIENT_NAME",
            "containers_attributes": Array [],
            "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
            "destination": Object {
              "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
            },
            "destination_hub": Object {
              "name": "SHIPMENT_DESTINATION_HUB",
              "startHub": Object {
                "address": Object {},
              },
            },
            "direction": "import",
            "eori": 1234,
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "id": 654,
            "imc_reference": "SHIPMENT_IMC_REFERENCE",
            "incoterm": "SHIPMENT_INCOTERM",
            "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
            "load_type": "cargo_item",
            "notes": "SHIPMENT_NOTES",
            "origin": Object {
              "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
            },
            "origin_hub": Object {
              "name": "SHIPMENT_ORIGIN_HUB",
              "startHub": Object {
                "address": Object {
                  "city": "FOO_ADDRESS_CITY",
                  "country": "FOO_ADDRESS_COUNTRY",
                  "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                  "id": 246,
                  "primary": true,
                  "street": "FOO_ADDRESS_STREET",
                  "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                  "user": Object {
                    "primary": true,
                  },
                  "zipCode": "FOO_ADDRESS_ZIP_CODE",
                },
              },
            },
            "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
            "planned_eta": "2018-12-01T18:14:33z",
            "planned_etd": "2018-11-12T12:37:08z",
            "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
            "planned_pickup_date": "2018-12-08T04:30:08z",
            "schedule_set": Array [
              Object {
                "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
              },
            ],
            "schedules_charges": Object {
              "AIR_HUB_ROUTE_KEY": Object {
                "total": 200,
              },
              "OCEAN_HUB_ROUTE_KEY": Object {
                "total": 40,
              },
              "RAIL_HUB_ROUTE_KEY": Object {
                "total": 125,
              },
              "TRUCK_HUB_ROUTE_KEY": Object {
                "total": 75,
              },
            },
            "selected_offer": Object {
              "cargo": Object {},
              "customs": Object {
                "hasUnknown": false,
                "val": 12,
              },
              "insurance": Object {
                "val": 5,
              },
              "total": Object {
                "value": 87,
              },
            },
            "service_level": "standard",
            "status": "finished",
            "total_goods_value": Object {
              "currency": "USD",
              "value": 150000,
            },
            "total_price": Object {
              "currency": "USD",
              "value": 137550,
            },
            "trucking": Object {
              "has_on_carriage": false,
              "has_pre_carriage": false,
              "on_carriage": Object {
                "trucking_time_in_seconds": 28,
              },
              "pre_carriage": Object {
                "trucking_time_in_seconds": 55,
              },
            },
            "updated_at": "2018-11-01T18:14:33z",
          },
        }
      }
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
      totalGoodsValue={
        Object {
          "value": 11,
        }
      }
    />
    <InsuranceSelection
      handleInsurance={[Function]}
      insuranceView={null}
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
    />
  </div>
</div>
`;

exports[`customsData[target].unknown 1`] = `
<div
  className="flex-100 layout-row layout-wrap padd_top"
  name="cargoDetailsBox"
>
  <div
    className="flex-100 layout-row layout-align-center"
  >
    <div
      className="flex-none content_width layout-row layout-wrap"
    >
      <div
        className="flex-100 layout-row layout-sm-wrap"
      >
        <div
          className="flex-50"
        >
          <div
            className="flex-100"
          >
            <div
              className="flex-100 layout-align-start-center layout-row"
            >
              <div
                className="flex-none"
              >
                <TextHeading
                  color="black"
                  fontWeight="normal"
                  size={2}
                  text="Cargo Details"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                />
              </div>
            </div>
             
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={3}
                text="Total value of goods"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap layout-align-start-start"
          >
            <div
              className="flex-100 layout-row layout-wrap"
            >
              <div
                className="flex-100 layout-row"
              >
                <div
                  className="flex-66 layout-row"
                >
                  <Formsy(FormsyInput)
                    className="flex-100 ccb_total_goods_value cargo_input "
                    errorMessageStyles={
                      Object {
                        "bottom": "-17px",
                        "fontSize": "13px",
                      }
                    }
                    innerRef={[Function]}
                    name="totalGoodsValue"
                    onBlur={[Function]}
                    required={3370}
                    submitAttempted={false}
                    type="number"
                    validationError=""
                    validationErrors={
                      Object {
                        "isDefaultRequiredValue": "Must be greater than 0",
                        "nonNegative": "Must be greater than 0",
                      }
                    }
                    validations={
                      Object {
                        "nonNegative": [Function],
                      }
                    }
                    value={11}
                    wrapperClassName="flex-100 wrapper_cargo_input"
                  />
                </div>
                <div
                  className="flex-33 layout-row"
                >
                  <NamedSelect
                    className="flex-100 ccb_currency"
                    clearable={false}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "EUR",
                          "value": "EUR",
                        },
                        Object {
                          "label": "AUD",
                          "value": "AUD",
                        },
                        Object {
                          "label": "BGN",
                          "value": "BGN",
                        },
                        Object {
                          "label": "BRL",
                          "value": "BRL",
                        },
                        Object {
                          "label": "CAD",
                          "value": "CAD",
                        },
                        Object {
                          "label": "CHF",
                          "value": "CHF",
                        },
                        Object {
                          "label": "CNY",
                          "value": "CNY",
                        },
                        Object {
                          "label": "CZK",
                          "value": "CZK",
                        },
                        Object {
                          "label": "DKK",
                          "value": "DKK",
                        },
                        Object {
                          "label": "GBP",
                          "value": "GBP",
                        },
                        Object {
                          "label": "HKD",
                          "value": "HKD",
                        },
                        Object {
                          "label": "HRK",
                          "value": "HRK",
                        },
                        Object {
                          "label": "HUF",
                          "value": "HUF",
                        },
                        Object {
                          "label": "IDR",
                          "value": "IDR",
                        },
                        Object {
                          "label": "ILS",
                          "value": "ILS",
                        },
                        Object {
                          "label": "INR",
                          "value": "INR",
                        },
                        Object {
                          "label": "JPY",
                          "value": "JPY",
                        },
                        Object {
                          "label": "KRW",
                          "value": "KRW",
                        },
                        Object {
                          "label": "MXN",
                          "value": "MXN",
                        },
                        Object {
                          "label": "MYR",
                          "value": "MYR",
                        },
                        Object {
                          "label": "NOK",
                          "value": "NOK",
                        },
                        Object {
                          "label": "NZD",
                          "value": "NZD",
                        },
                        Object {
                          "label": "PHP",
                          "value": "PHP",
                        },
                        Object {
                          "label": "PLN",
                          "value": "PLN",
                        },
                        Object {
                          "label": "RON",
                          "value": "RON",
                        },
                        Object {
                          "label": "RUB",
                          "value": "RUB",
                        },
                        Object {
                          "label": "SEK",
                          "value": "SEK",
                        },
                        Object {
                          "label": "SGD",
                          "value": "SGD",
                        },
                        Object {
                          "label": "THB",
                          "value": "THB",
                        },
                        Object {
                          "label": "TRY",
                          "value": "TRY",
                        },
                        Object {
                          "label": "USD",
                          "value": "USD",
                        },
                        Object {
                          "label": "ZAR",
                          "value": "ZAR",
                        },
                      ]
                    }
                    value={
                      Object {
                        "label": "EUR",
                        "value": "EUR",
                      }
                    }
                  />
                </div>
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-wrap"
              id="cargo_notes"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Description of Goods (HS Codes if available)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 ccb_description_goods cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="cargoNotes"
                  onBlur={[Function]}
                  required="MANDATORY_FIELDS_DESCRIPTION"
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={
                    Object {
                      "isDefaultRequiredValue": "Must not be empty",
                    }
                  }
                  validations={null}
                  value="CARGO_NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <h4
                    className="no_m flex-30"
                  >
                    Incoterms
                     
                    <span>
                      (Optional)
                    </span>
                  </h4>
                  <p
                    className="pointy flex-none incoterm_info"
                    onClick={[Function]}
                  >
                    More info
                  </p>
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="incotermText"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value=""
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
          </div>
        </div>
        <div
          className="flex-50 padding_left offset-gt-sm-5 layout-row layout-wrap layout-align-start-start"
        >
          <div
            className="flex-100 layout-align-start-center layout-row"
          >
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={2}
                text="Shipment Documents "
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
              <br />
              if available
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="packing_sheet"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Packing List"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="packing_sheet"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="commercial_invoice"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Commercial Invoice"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="commercial_invoice"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-align-start-start layout-wrap"
          >
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Notes (Optional)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="notes"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value="NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-gt-sm-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className=" flex-100 layout-row layout-align-start-start-space-around layout-wrap"
              >
                <DocumentsMultiForm
                  deleteFn={[Function]}
                  dispatchFn={[Function]}
                  documents={Array []}
                  t={[Function]}
                  text="Miscellaneous"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                  tooltip=""
                  type="miscellaneous"
                  uploadFn={null}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div
    className="insurance_customs_sec flex-100 layout-row layout-wrap layout-align-center"
  >
    <CustomsClearance
      customs={
        Object {
          "export": Object {
            "total": Object {
              "currency": "EUR",
              "value": 100,
            },
          },
          "import": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
          "total": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
        }
      }
      customsData={
        Object {
          "export": Object {},
          "import": Object {
            "unknown": true,
          },
        }
      }
      deleteDoc={[Function]}
      dispatchFn={[Function]}
      documents={
        Array [
          Object {
            "approved": "approved",
            "created_at": "2018-12-01T18:14:33z",
            "doc_type": "FOO_DOC_TYPE",
            "signed_url": "FOO_SIGNED_URL",
            "text": "FOO_DOCUMENT_TEXT",
          },
          Object {
            "approved": "rejected",
            "created_at": "2018-12-02T11:14:33z",
            "doc_type": "BAR_DOC_TYPE",
            "signed_url": "BAR_SIGNED_URL",
            "text": "BAR_DOCUMENT_TEXT",
          },
        ]
      }
      eori="EORI"
      handleChange={[Function]}
      setCustomsFee={[Function]}
      shipment={
        Object {
          "booking_placed_at": "2018-11-01T11:14:33z",
          "cargo_count": 2,
          "cargo_items_attributes": Array [],
          "cargo_notes": "SHIPMENT_CARGO_NOTES",
          "cargo_units": Array [
            Object {
              "height": 67,
              "length": 63,
              "quantity": 2,
              "width": 107,
            },
          ],
          "clientName": "SHIPMENT_CLIENT_NAME",
          "containers_attributes": Array [],
          "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
          "destination": Object {
            "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
          },
          "destination_hub": Object {
            "name": "SHIPMENT_DESTINATION_HUB",
            "startHub": Object {
              "address": Object {},
            },
          },
          "direction": "import",
          "eori": 1234,
          "has_on_carriage": false,
          "has_pre_carriage": false,
          "id": 654,
          "imc_reference": "SHIPMENT_IMC_REFERENCE",
          "incoterm": "SHIPMENT_INCOTERM",
          "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
          "load_type": "cargo_item",
          "notes": "SHIPMENT_NOTES",
          "origin": Object {
            "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
          },
          "origin_hub": Object {
            "name": "SHIPMENT_ORIGIN_HUB",
            "startHub": Object {
              "address": Object {
                "city": "FOO_ADDRESS_CITY",
                "country": "FOO_ADDRESS_COUNTRY",
                "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                "id": 246,
                "primary": true,
                "street": "FOO_ADDRESS_STREET",
                "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                "user": Object {
                  "primary": true,
                },
                "zipCode": "FOO_ADDRESS_ZIP_CODE",
              },
            },
          },
          "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
          "planned_eta": "2018-12-01T18:14:33z",
          "planned_etd": "2018-11-12T12:37:08z",
          "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
          "planned_pickup_date": "2018-12-08T04:30:08z",
          "schedule_set": Array [
            Object {
              "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
            },
          ],
          "schedules_charges": Object {
            "AIR_HUB_ROUTE_KEY": Object {
              "total": 200,
            },
            "OCEAN_HUB_ROUTE_KEY": Object {
              "total": 40,
            },
            "RAIL_HUB_ROUTE_KEY": Object {
              "total": 125,
            },
            "TRUCK_HUB_ROUTE_KEY": Object {
              "total": 75,
            },
          },
          "selected_offer": Object {
            "cargo": Object {},
            "customs": Object {
              "hasUnknown": false,
              "val": 12,
            },
            "insurance": Object {
              "val": 5,
            },
            "total": Object {
              "value": 87,
            },
          },
          "service_level": "standard",
          "status": "finished",
          "total_goods_value": Object {
            "currency": "USD",
            "value": 150000,
          },
          "total_price": Object {
            "currency": "USD",
            "value": 137550,
          },
          "trucking": Object {
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "on_carriage": Object {
              "trucking_time_in_seconds": 28,
            },
            "pre_carriage": Object {
              "trucking_time_in_seconds": 55,
            },
          },
          "updated_at": "2018-11-01T18:14:33z",
        }
      }
      shipmentData={
        Object {
          "addons": Object {
            "customs_export_paper": true,
          },
          "addresses": Object {
            "destination": Object {
              "city": "BAR_CITY",
              "country": "China",
              "street": "BAR_STREET",
              "street_number": 9,
              "zip_code": 845321,
            },
            "endHub": "FOO_END_HUB",
            "origin": Object {
              "city": "FOO_CITY",
              "country": "Germany",
              "street": "FOO_STREET",
              "street_number": 7,
              "zip_code": 21177,
            },
            "startHub": "FOO_START_HUB",
          },
          "aggregatedCargo": Object {
            "cargo_item_type_id": "foo",
            "chargeable_weight": 250,
            "dangerous_goods": false,
            "description": "FOO_CARGO_ITEM_DESCRIPTION",
            "gross_weight": 76,
            "height": 40,
            "hs_codes": Array [
              4,
            ],
            "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
            "id": 1,
            "key": "FOO_CARGO_ITEM_KEY",
            "length": 60,
            "payload_in_kg": 200,
            "quantity": 5,
            "stackable": true,
            "tare_weight": 20,
            "volume": 12,
            "weight": 220,
            "width": 10,
          },
          "cargoItemTypes": Object {
            "bar": Object {
              "description": "BAR_TYPE",
            },
            "foo": Object {
              "description": "FOO_TYPE",
            },
          },
          "cargoItems": Array [
            Object {
              "cargo_item_type_id": "foo",
              "chargeable_weight": 250,
              "dangerous_goods": false,
              "description": "FOO_CARGO_ITEM_DESCRIPTION",
              "gross_weight": 76,
              "height": 40,
              "hs_codes": Array [
                4,
              ],
              "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
              "id": 1,
              "key": "FOO_CARGO_ITEM_KEY",
              "length": 60,
              "payload_in_kg": 200,
              "quantity": 5,
              "stackable": true,
              "tare_weight": 20,
              "weight": 220,
              "width": 10,
            },
            Object {
              "cargo_item_type_id": "bar",
              "chargeable_weight": 150,
              "description": "BAR_CARGO_ITEM_DESCRIPTION",
              "height": 70,
              "hs_codes": Array [],
              "hs_text": "BAR_CARGO_ITEM_HS_TEXT",
              "id": 2,
              "key": "BAR_CARGO_ITEM_KEY",
              "length": 50,
              "payload_in_kg": 100,
              "quantity": 7,
              "stackable": false,
              "width": 100,
            },
          ],
          "contacts": Array [],
          "containers": Array [
            Object {
              "cargo_group_id": 4,
              "customs_text": "FOO_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 130,
              "hs_codes": Array [],
              "id": 1,
              "payload_in_kg": 200,
              "quantity": 5,
              "size_class": "FOO_CONTAINER_SIZE_CLASS",
              "tare_weight": 50,
            },
            Object {
              "cargo_group_id": 5,
              "customs_text": "BAR_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 457,
              "hs_codes": Array [],
              "id": 2,
              "payload_in_kg": 450,
              "quantity": 7,
              "size_class": "BAR_CONTAINER_SIZE_CLASS",
              "tare_weight": 7,
            },
          ],
          "customs": Object {
            "export": Object {
              "total": Object {
                "currency": "EUR",
                "value": 100,
              },
            },
            "import": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
            "total": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
          },
          "dangerousGoods": false,
          "documents": Array [
            Object {
              "approved": "approved",
              "created_at": "2018-12-01T18:14:33z",
              "doc_type": "FOO_DOC_TYPE",
              "signed_url": "FOO_SIGNED_URL",
              "text": "FOO_DOCUMENT_TEXT",
            },
            Object {
              "approved": "rejected",
              "created_at": "2018-12-02T11:14:33z",
              "doc_type": "BAR_DOC_TYPE",
              "signed_url": "BAR_SIGNED_URL",
              "text": "BAR_DOCUMENT_TEXT",
            },
          ],
          "hubs": Object {
            "endHub": "END_HUB",
            "startHub": "START_HUB",
          },
          "notifyees": Array [
            Object {
              "first_name": "John",
              "last_name": "Doe",
            },
            Object {
              "first_name": "Robert",
              "last_name": "Plant",
            },
            Object {
              "first_name": "James",
              "last_name": "Brows",
            },
          ],
          "results": Array [
            Object {
              "meta": Object {
                "carrier_name": "FOO_CARRIER_NAME",
                "destination_hub": Object {
                  "name": "Shanghai",
                },
                "mode_of_transport": "air",
                "origin_hub": Object {
                  "name": "Gothenburg",
                },
                "pricing_range_data": Object {
                  "fcl_20": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "750.0",
                      "range": Array [],
                      "rate": "750.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "750.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40_hq": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                },
                "service_level": "FOO_SERVICE_LEVEL",
                "service_level_count": 1,
                "transit_time": 1,
              },
              "quote": Object {
                "total": Object {
                  "value": 467,
                },
              },
              "schedules": Array [
                Object {
                  "closing_date": "16-09-2018",
                  "eta": "10-09-2018",
                  "etd": "15-09-2018",
                },
              ],
            },
            Object {
              "meta": Object {
                "mode_of_transport": "ocean",
                "transit_time": 2,
              },
              "quote": Object {
                "total": Object {
                  "value": 309,
                },
              },
            },
          ],
          "routes": Array [],
          "schedule": Object {
            "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
          },
          "schedules": Array [
            Object {
              "closing_date": "2018-11-01T11:14:33z",
              "eta": "2018-11-18T11:14:33z",
              "etd": "2018-11-13T11:14:33z",
              "hub_route_key": "AIR_HUB_ROUTE_KEY",
              "mode_of_transport": "air",
            },
            Object {
              "closing_date": "2018-11-05T11:14:33z",
              "destination_hub": Object {},
              "eta": "2018-11-22T11:14:33z",
              "etd": "2018-11-17T11:14:33z",
              "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
              "mode_of_transport": "ocean",
              "origin_hub": Object {},
              "total_price": Object {
                "currency": "EUR",
                "value": 112,
              },
            },
            Object {
              "closing_date": "2018-11-03T11:14:33z",
              "eta": "2018-11-20T11:14:33z",
              "etd": "2018-11-15T11:14:33z",
              "hub_route_key": "RAIL_HUB_ROUTE_KEY",
              "mode_of_transport": "rail",
            },
            Object {
              "closing_date": "2018-11-02T11:14:33z",
              "eta": "2018-11-19T11:14:33z",
              "etd": "2018-11-14T11:14:33z",
              "hub_route_key": "TRUCK_HUB_ROUTE_KEY",
              "mode_of_transport": "truck",
            },
          ],
          "shipment": Object {
            "booking_placed_at": "2018-11-01T11:14:33z",
            "cargo_count": 2,
            "cargo_items_attributes": Array [],
            "cargo_notes": "SHIPMENT_CARGO_NOTES",
            "cargo_units": Array [
              Object {
                "height": 67,
                "length": 63,
                "quantity": 2,
                "width": 107,
              },
            ],
            "clientName": "SHIPMENT_CLIENT_NAME",
            "containers_attributes": Array [],
            "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
            "destination": Object {
              "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
            },
            "destination_hub": Object {
              "name": "SHIPMENT_DESTINATION_HUB",
              "startHub": Object {
                "address": Object {},
              },
            },
            "direction": "import",
            "eori": 1234,
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "id": 654,
            "imc_reference": "SHIPMENT_IMC_REFERENCE",
            "incoterm": "SHIPMENT_INCOTERM",
            "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
            "load_type": "cargo_item",
            "notes": "SHIPMENT_NOTES",
            "origin": Object {
              "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
            },
            "origin_hub": Object {
              "name": "SHIPMENT_ORIGIN_HUB",
              "startHub": Object {
                "address": Object {
                  "city": "FOO_ADDRESS_CITY",
                  "country": "FOO_ADDRESS_COUNTRY",
                  "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                  "id": 246,
                  "primary": true,
                  "street": "FOO_ADDRESS_STREET",
                  "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                  "user": Object {
                    "primary": true,
                  },
                  "zipCode": "FOO_ADDRESS_ZIP_CODE",
                },
              },
            },
            "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
            "planned_eta": "2018-12-01T18:14:33z",
            "planned_etd": "2018-11-12T12:37:08z",
            "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
            "planned_pickup_date": "2018-12-08T04:30:08z",
            "schedule_set": Array [
              Object {
                "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
              },
            ],
            "schedules_charges": Object {
              "AIR_HUB_ROUTE_KEY": Object {
                "total": 200,
              },
              "OCEAN_HUB_ROUTE_KEY": Object {
                "total": 40,
              },
              "RAIL_HUB_ROUTE_KEY": Object {
                "total": 125,
              },
              "TRUCK_HUB_ROUTE_KEY": Object {
                "total": 75,
              },
            },
            "selected_offer": Object {
              "cargo": Object {},
              "customs": Object {
                "hasUnknown": false,
                "val": 12,
              },
              "insurance": Object {
                "val": 5,
              },
              "total": Object {
                "value": 87,
              },
            },
            "service_level": "standard",
            "status": "finished",
            "total_goods_value": Object {
              "currency": "USD",
              "value": 150000,
            },
            "total_price": Object {
              "currency": "USD",
              "value": 137550,
            },
            "trucking": Object {
              "has_on_carriage": false,
              "has_pre_carriage": false,
              "on_carriage": Object {
                "trucking_time_in_seconds": 28,
              },
              "pre_carriage": Object {
                "trucking_time_in_seconds": 55,
              },
            },
            "updated_at": "2018-11-01T18:14:33z",
          },
        }
      }
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
      totalGoodsValue={
        Object {
          "value": 11,
        }
      }
    />
    <InsuranceSelection
      handleInsurance={[Function]}
      insuranceView={null}
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
    />
  </div>
</div>
`;

exports[`scope.has_customs || scope.has_insurance || scope.customs_export_paper is false 1`] = `
<div
  className="flex-100 layout-row layout-wrap padd_top"
  name="cargoDetailsBox"
>
  <div
    className="flex-100 layout-row layout-align-center"
  >
    <div
      className="flex-none content_width layout-row layout-wrap"
    >
      <div
        className="flex-100 layout-row layout-sm-wrap"
      >
        <div
          className="flex-50"
        >
          <div
            className="flex-100"
          >
            <div
              className="flex-100 layout-align-start-center layout-row"
            >
              <div
                className="flex-none"
              >
                <TextHeading
                  color="black"
                  fontWeight="normal"
                  size={2}
                  text="Cargo Details"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                />
              </div>
            </div>
             
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={3}
                text="Total value of goods"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap layout-align-start-start"
          >
            <div
              className="flex-100 layout-row layout-wrap"
            >
              <div
                className="flex-100 layout-row"
              >
                <div
                  className="flex-66 layout-row"
                >
                  <Formsy(FormsyInput)
                    className="flex-100 ccb_total_goods_value cargo_input "
                    errorMessageStyles={
                      Object {
                        "bottom": "-17px",
                        "fontSize": "13px",
                      }
                    }
                    innerRef={[Function]}
                    name="totalGoodsValue"
                    onBlur={[Function]}
                    required={3370}
                    submitAttempted={false}
                    type="number"
                    validationError=""
                    validationErrors={
                      Object {
                        "isDefaultRequiredValue": "Must be greater than 0",
                        "nonNegative": "Must be greater than 0",
                      }
                    }
                    validations={
                      Object {
                        "nonNegative": [Function],
                      }
                    }
                    value={11}
                    wrapperClassName="flex-100 wrapper_cargo_input"
                  />
                </div>
                <div
                  className="flex-33 layout-row"
                >
                  <NamedSelect
                    className="flex-100 ccb_currency"
                    clearable={false}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "EUR",
                          "value": "EUR",
                        },
                        Object {
                          "label": "AUD",
                          "value": "AUD",
                        },
                        Object {
                          "label": "BGN",
                          "value": "BGN",
                        },
                        Object {
                          "label": "BRL",
                          "value": "BRL",
                        },
                        Object {
                          "label": "CAD",
                          "value": "CAD",
                        },
                        Object {
                          "label": "CHF",
                          "value": "CHF",
                        },
                        Object {
                          "label": "CNY",
                          "value": "CNY",
                        },
                        Object {
                          "label": "CZK",
                          "value": "CZK",
                        },
                        Object {
                          "label": "DKK",
                          "value": "DKK",
                        },
                        Object {
                          "label": "GBP",
                          "value": "GBP",
                        },
                        Object {
                          "label": "HKD",
                          "value": "HKD",
                        },
                        Object {
                          "label": "HRK",
                          "value": "HRK",
                        },
                        Object {
                          "label": "HUF",
                          "value": "HUF",
                        },
                        Object {
                          "label": "IDR",
                          "value": "IDR",
                        },
                        Object {
                          "label": "ILS",
                          "value": "ILS",
                        },
                        Object {
                          "label": "INR",
                          "value": "INR",
                        },
                        Object {
                          "label": "JPY",
                          "value": "JPY",
                        },
                        Object {
                          "label": "KRW",
                          "value": "KRW",
                        },
                        Object {
                          "label": "MXN",
                          "value": "MXN",
                        },
                        Object {
                          "label": "MYR",
                          "value": "MYR",
                        },
                        Object {
                          "label": "NOK",
                          "value": "NOK",
                        },
                        Object {
                          "label": "NZD",
                          "value": "NZD",
                        },
                        Object {
                          "label": "PHP",
                          "value": "PHP",
                        },
                        Object {
                          "label": "PLN",
                          "value": "PLN",
                        },
                        Object {
                          "label": "RON",
                          "value": "RON",
                        },
                        Object {
                          "label": "RUB",
                          "value": "RUB",
                        },
                        Object {
                          "label": "SEK",
                          "value": "SEK",
                        },
                        Object {
                          "label": "SGD",
                          "value": "SGD",
                        },
                        Object {
                          "label": "THB",
                          "value": "THB",
                        },
                        Object {
                          "label": "TRY",
                          "value": "TRY",
                        },
                        Object {
                          "label": "USD",
                          "value": "USD",
                        },
                        Object {
                          "label": "ZAR",
                          "value": "ZAR",
                        },
                      ]
                    }
                    value={
                      Object {
                        "label": "EUR",
                        "value": "EUR",
                      }
                    }
                  />
                </div>
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-wrap"
              id="cargo_notes"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Description of Goods (HS Codes if available)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 ccb_description_goods cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="cargoNotes"
                  onBlur={[Function]}
                  required="MANDATORY_FIELDS_DESCRIPTION"
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={
                    Object {
                      "isDefaultRequiredValue": "Must not be empty",
                    }
                  }
                  validations={null}
                  value="CARGO_NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <h4
                    className="no_m flex-30"
                  >
                    Incoterms
                     
                    <span>
                      (Optional)
                    </span>
                  </h4>
                  <p
                    className="pointy flex-none incoterm_info"
                    onClick={[Function]}
                  >
                    More info
                  </p>
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="incotermText"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value=""
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
          </div>
        </div>
        <div
          className="flex-50 padding_left offset-gt-sm-5 layout-row layout-wrap layout-align-start-start"
        >
          <div
            className="flex-100 layout-align-start-center layout-row"
          >
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={2}
                text="Shipment Documents "
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
              <br />
              if available
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="packing_sheet"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Packing List"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="packing_sheet"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="commercial_invoice"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Commercial Invoice"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="commercial_invoice"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-align-start-start layout-wrap"
          >
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Notes (Optional)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="notes"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value="NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-gt-sm-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className=" flex-100 layout-row layout-align-start-start-space-around layout-wrap"
              >
                <DocumentsMultiForm
                  deleteFn={[Function]}
                  dispatchFn={[Function]}
                  documents={Array []}
                  t={[Function]}
                  text="Miscellaneous"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                  tooltip=""
                  type="miscellaneous"
                  uploadFn={null}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`scope.has_customs || scope.has_insurance 1`] = `
<div
  className="flex-100 layout-row layout-wrap padd_top"
  name="cargoDetailsBox"
>
  <div
    className="flex-100 layout-row layout-align-center"
  >
    <div
      className="flex-none content_width layout-row layout-wrap"
    >
      <div
        className="flex-100 layout-row layout-sm-wrap"
      >
        <div
          className="flex-50"
        >
          <div
            className="flex-100"
          >
            <div
              className="flex-100 layout-align-start-center layout-row"
            >
              <div
                className="flex-none"
              >
                <TextHeading
                  color="black"
                  fontWeight="normal"
                  size={2}
                  text="Cargo Details"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                />
              </div>
            </div>
             
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={3}
                text="Total value of goods"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap layout-align-start-start"
          >
            <div
              className="flex-100 layout-row layout-wrap"
            >
              <div
                className="flex-100 layout-row"
              >
                <div
                  className="flex-66 layout-row"
                >
                  <Formsy(FormsyInput)
                    className="flex-100 ccb_total_goods_value cargo_input "
                    errorMessageStyles={
                      Object {
                        "bottom": "-17px",
                        "fontSize": "13px",
                      }
                    }
                    innerRef={[Function]}
                    name="totalGoodsValue"
                    onBlur={[Function]}
                    required={3370}
                    submitAttempted={false}
                    type="number"
                    validationError=""
                    validationErrors={
                      Object {
                        "isDefaultRequiredValue": "Must be greater than 0",
                        "nonNegative": "Must be greater than 0",
                      }
                    }
                    validations={
                      Object {
                        "nonNegative": [Function],
                      }
                    }
                    value={11}
                    wrapperClassName="flex-100 wrapper_cargo_input"
                  />
                </div>
                <div
                  className="flex-33 layout-row"
                >
                  <NamedSelect
                    className="flex-100 ccb_currency"
                    clearable={false}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "EUR",
                          "value": "EUR",
                        },
                        Object {
                          "label": "AUD",
                          "value": "AUD",
                        },
                        Object {
                          "label": "BGN",
                          "value": "BGN",
                        },
                        Object {
                          "label": "BRL",
                          "value": "BRL",
                        },
                        Object {
                          "label": "CAD",
                          "value": "CAD",
                        },
                        Object {
                          "label": "CHF",
                          "value": "CHF",
                        },
                        Object {
                          "label": "CNY",
                          "value": "CNY",
                        },
                        Object {
                          "label": "CZK",
                          "value": "CZK",
                        },
                        Object {
                          "label": "DKK",
                          "value": "DKK",
                        },
                        Object {
                          "label": "GBP",
                          "value": "GBP",
                        },
                        Object {
                          "label": "HKD",
                          "value": "HKD",
                        },
                        Object {
                          "label": "HRK",
                          "value": "HRK",
                        },
                        Object {
                          "label": "HUF",
                          "value": "HUF",
                        },
                        Object {
                          "label": "IDR",
                          "value": "IDR",
                        },
                        Object {
                          "label": "ILS",
                          "value": "ILS",
                        },
                        Object {
                          "label": "INR",
                          "value": "INR",
                        },
                        Object {
                          "label": "JPY",
                          "value": "JPY",
                        },
                        Object {
                          "label": "KRW",
                          "value": "KRW",
                        },
                        Object {
                          "label": "MXN",
                          "value": "MXN",
                        },
                        Object {
                          "label": "MYR",
                          "value": "MYR",
                        },
                        Object {
                          "label": "NOK",
                          "value": "NOK",
                        },
                        Object {
                          "label": "NZD",
                          "value": "NZD",
                        },
                        Object {
                          "label": "PHP",
                          "value": "PHP",
                        },
                        Object {
                          "label": "PLN",
                          "value": "PLN",
                        },
                        Object {
                          "label": "RON",
                          "value": "RON",
                        },
                        Object {
                          "label": "RUB",
                          "value": "RUB",
                        },
                        Object {
                          "label": "SEK",
                          "value": "SEK",
                        },
                        Object {
                          "label": "SGD",
                          "value": "SGD",
                        },
                        Object {
                          "label": "THB",
                          "value": "THB",
                        },
                        Object {
                          "label": "TRY",
                          "value": "TRY",
                        },
                        Object {
                          "label": "USD",
                          "value": "USD",
                        },
                        Object {
                          "label": "ZAR",
                          "value": "ZAR",
                        },
                      ]
                    }
                    value={
                      Object {
                        "label": "EUR",
                        "value": "EUR",
                      }
                    }
                  />
                </div>
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-wrap"
              id="cargo_notes"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Description of Goods (HS Codes if available)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 ccb_description_goods cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="cargoNotes"
                  onBlur={[Function]}
                  required="MANDATORY_FIELDS_DESCRIPTION"
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={
                    Object {
                      "isDefaultRequiredValue": "Must not be empty",
                    }
                  }
                  validations={null}
                  value="CARGO_NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <h4
                    className="no_m flex-30"
                  >
                    Incoterms
                     
                    <span>
                      (Optional)
                    </span>
                  </h4>
                  <p
                    className="pointy flex-none incoterm_info"
                    onClick={[Function]}
                  >
                    More info
                  </p>
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="incotermText"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value=""
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
          </div>
        </div>
        <div
          className="flex-50 padding_left offset-gt-sm-5 layout-row layout-wrap layout-align-start-start"
        >
          <div
            className="flex-100 layout-align-start-center layout-row"
          >
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={2}
                text="Shipment Documents "
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
              <br />
              if available
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="packing_sheet"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Packing List"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="packing_sheet"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="commercial_invoice"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Commercial Invoice"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="commercial_invoice"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-align-start-start layout-wrap"
          >
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Notes (Optional)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="notes"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value="NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-gt-sm-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className=" flex-100 layout-row layout-align-start-start-space-around layout-wrap"
              >
                <DocumentsMultiForm
                  deleteFn={[Function]}
                  dispatchFn={[Function]}
                  documents={Array []}
                  t={[Function]}
                  text="Miscellaneous"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                  tooltip=""
                  type="miscellaneous"
                  uploadFn={null}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div
    className="insurance_customs_sec flex-100 layout-row layout-wrap layout-align-center"
  >
    <CustomsClearance
      customs={
        Object {
          "export": Object {
            "total": Object {
              "currency": "EUR",
              "value": 100,
            },
          },
          "import": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
          "total": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
        }
      }
      customsData={
        Object {
          "export": Object {
            "bool": true,
          },
          "import": Object {
            "bool": true,
            "total": Object {
              "currency": "USD",
            },
          },
          "val": "FOO_CUSTOM_DATA",
        }
      }
      deleteDoc={[Function]}
      dispatchFn={[Function]}
      documents={
        Array [
          Object {
            "approved": "approved",
            "created_at": "2018-12-01T18:14:33z",
            "doc_type": "FOO_DOC_TYPE",
            "signed_url": "FOO_SIGNED_URL",
            "text": "FOO_DOCUMENT_TEXT",
          },
          Object {
            "approved": "rejected",
            "created_at": "2018-12-02T11:14:33z",
            "doc_type": "BAR_DOC_TYPE",
            "signed_url": "BAR_SIGNED_URL",
            "text": "BAR_DOCUMENT_TEXT",
          },
        ]
      }
      eori="EORI"
      handleChange={[Function]}
      setCustomsFee={[Function]}
      shipment={
        Object {
          "booking_placed_at": "2018-11-01T11:14:33z",
          "cargo_count": 2,
          "cargo_items_attributes": Array [],
          "cargo_notes": "SHIPMENT_CARGO_NOTES",
          "cargo_units": Array [
            Object {
              "height": 67,
              "length": 63,
              "quantity": 2,
              "width": 107,
            },
          ],
          "clientName": "SHIPMENT_CLIENT_NAME",
          "containers_attributes": Array [],
          "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
          "destination": Object {
            "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
          },
          "destination_hub": Object {
            "name": "SHIPMENT_DESTINATION_HUB",
            "startHub": Object {
              "address": Object {},
            },
          },
          "direction": "import",
          "eori": 1234,
          "has_on_carriage": false,
          "has_pre_carriage": false,
          "id": 654,
          "imc_reference": "SHIPMENT_IMC_REFERENCE",
          "incoterm": "SHIPMENT_INCOTERM",
          "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
          "load_type": "cargo_item",
          "notes": "SHIPMENT_NOTES",
          "origin": Object {
            "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
          },
          "origin_hub": Object {
            "name": "SHIPMENT_ORIGIN_HUB",
            "startHub": Object {
              "address": Object {
                "city": "FOO_ADDRESS_CITY",
                "country": "FOO_ADDRESS_COUNTRY",
                "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                "id": 246,
                "primary": true,
                "street": "FOO_ADDRESS_STREET",
                "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                "user": Object {
                  "primary": true,
                },
                "zipCode": "FOO_ADDRESS_ZIP_CODE",
              },
            },
          },
          "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
          "planned_eta": "2018-12-01T18:14:33z",
          "planned_etd": "2018-11-12T12:37:08z",
          "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
          "planned_pickup_date": "2018-12-08T04:30:08z",
          "schedule_set": Array [
            Object {
              "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
            },
          ],
          "schedules_charges": Object {
            "AIR_HUB_ROUTE_KEY": Object {
              "total": 200,
            },
            "OCEAN_HUB_ROUTE_KEY": Object {
              "total": 40,
            },
            "RAIL_HUB_ROUTE_KEY": Object {
              "total": 125,
            },
            "TRUCK_HUB_ROUTE_KEY": Object {
              "total": 75,
            },
          },
          "selected_offer": Object {
            "cargo": Object {},
            "customs": Object {
              "hasUnknown": false,
              "val": 12,
            },
            "insurance": Object {
              "val": 5,
            },
            "total": Object {
              "value": 87,
            },
          },
          "service_level": "standard",
          "status": "finished",
          "total_goods_value": Object {
            "currency": "USD",
            "value": 150000,
          },
          "total_price": Object {
            "currency": "USD",
            "value": 137550,
          },
          "trucking": Object {
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "on_carriage": Object {
              "trucking_time_in_seconds": 28,
            },
            "pre_carriage": Object {
              "trucking_time_in_seconds": 55,
            },
          },
          "updated_at": "2018-11-01T18:14:33z",
        }
      }
      shipmentData={
        Object {
          "addons": Object {
            "customs_export_paper": true,
          },
          "addresses": Object {
            "destination": Object {
              "city": "BAR_CITY",
              "country": "China",
              "street": "BAR_STREET",
              "street_number": 9,
              "zip_code": 845321,
            },
            "endHub": "FOO_END_HUB",
            "origin": Object {
              "city": "FOO_CITY",
              "country": "Germany",
              "street": "FOO_STREET",
              "street_number": 7,
              "zip_code": 21177,
            },
            "startHub": "FOO_START_HUB",
          },
          "aggregatedCargo": Object {
            "cargo_item_type_id": "foo",
            "chargeable_weight": 250,
            "dangerous_goods": false,
            "description": "FOO_CARGO_ITEM_DESCRIPTION",
            "gross_weight": 76,
            "height": 40,
            "hs_codes": Array [
              4,
            ],
            "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
            "id": 1,
            "key": "FOO_CARGO_ITEM_KEY",
            "length": 60,
            "payload_in_kg": 200,
            "quantity": 5,
            "stackable": true,
            "tare_weight": 20,
            "volume": 12,
            "weight": 220,
            "width": 10,
          },
          "cargoItemTypes": Object {
            "bar": Object {
              "description": "BAR_TYPE",
            },
            "foo": Object {
              "description": "FOO_TYPE",
            },
          },
          "cargoItems": Array [
            Object {
              "cargo_item_type_id": "foo",
              "chargeable_weight": 250,
              "dangerous_goods": false,
              "description": "FOO_CARGO_ITEM_DESCRIPTION",
              "gross_weight": 76,
              "height": 40,
              "hs_codes": Array [
                4,
              ],
              "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
              "id": 1,
              "key": "FOO_CARGO_ITEM_KEY",
              "length": 60,
              "payload_in_kg": 200,
              "quantity": 5,
              "stackable": true,
              "tare_weight": 20,
              "weight": 220,
              "width": 10,
            },
            Object {
              "cargo_item_type_id": "bar",
              "chargeable_weight": 150,
              "description": "BAR_CARGO_ITEM_DESCRIPTION",
              "height": 70,
              "hs_codes": Array [],
              "hs_text": "BAR_CARGO_ITEM_HS_TEXT",
              "id": 2,
              "key": "BAR_CARGO_ITEM_KEY",
              "length": 50,
              "payload_in_kg": 100,
              "quantity": 7,
              "stackable": false,
              "width": 100,
            },
          ],
          "contacts": Array [],
          "containers": Array [
            Object {
              "cargo_group_id": 4,
              "customs_text": "FOO_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 130,
              "hs_codes": Array [],
              "id": 1,
              "payload_in_kg": 200,
              "quantity": 5,
              "size_class": "FOO_CONTAINER_SIZE_CLASS",
              "tare_weight": 50,
            },
            Object {
              "cargo_group_id": 5,
              "customs_text": "BAR_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 457,
              "hs_codes": Array [],
              "id": 2,
              "payload_in_kg": 450,
              "quantity": 7,
              "size_class": "BAR_CONTAINER_SIZE_CLASS",
              "tare_weight": 7,
            },
          ],
          "customs": Object {
            "export": Object {
              "total": Object {
                "currency": "EUR",
                "value": 100,
              },
            },
            "import": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
            "total": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
          },
          "dangerousGoods": false,
          "documents": Array [
            Object {
              "approved": "approved",
              "created_at": "2018-12-01T18:14:33z",
              "doc_type": "FOO_DOC_TYPE",
              "signed_url": "FOO_SIGNED_URL",
              "text": "FOO_DOCUMENT_TEXT",
            },
            Object {
              "approved": "rejected",
              "created_at": "2018-12-02T11:14:33z",
              "doc_type": "BAR_DOC_TYPE",
              "signed_url": "BAR_SIGNED_URL",
              "text": "BAR_DOCUMENT_TEXT",
            },
          ],
          "hubs": Object {
            "endHub": "END_HUB",
            "startHub": "START_HUB",
          },
          "notifyees": Array [
            Object {
              "first_name": "John",
              "last_name": "Doe",
            },
            Object {
              "first_name": "Robert",
              "last_name": "Plant",
            },
            Object {
              "first_name": "James",
              "last_name": "Brows",
            },
          ],
          "results": Array [
            Object {
              "meta": Object {
                "carrier_name": "FOO_CARRIER_NAME",
                "destination_hub": Object {
                  "name": "Shanghai",
                },
                "mode_of_transport": "air",
                "origin_hub": Object {
                  "name": "Gothenburg",
                },
                "pricing_range_data": Object {
                  "fcl_20": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "750.0",
                      "range": Array [],
                      "rate": "750.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "750.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40_hq": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                },
                "service_level": "FOO_SERVICE_LEVEL",
                "service_level_count": 1,
                "transit_time": 1,
              },
              "quote": Object {
                "total": Object {
                  "value": 467,
                },
              },
              "schedules": Array [
                Object {
                  "closing_date": "16-09-2018",
                  "eta": "10-09-2018",
                  "etd": "15-09-2018",
                },
              ],
            },
            Object {
              "meta": Object {
                "mode_of_transport": "ocean",
                "transit_time": 2,
              },
              "quote": Object {
                "total": Object {
                  "value": 309,
                },
              },
            },
          ],
          "routes": Array [],
          "schedule": Object {
            "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
          },
          "schedules": Array [
            Object {
              "closing_date": "2018-11-01T11:14:33z",
              "eta": "2018-11-18T11:14:33z",
              "etd": "2018-11-13T11:14:33z",
              "hub_route_key": "AIR_HUB_ROUTE_KEY",
              "mode_of_transport": "air",
            },
            Object {
              "closing_date": "2018-11-05T11:14:33z",
              "destination_hub": Object {},
              "eta": "2018-11-22T11:14:33z",
              "etd": "2018-11-17T11:14:33z",
              "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
              "mode_of_transport": "ocean",
              "origin_hub": Object {},
              "total_price": Object {
                "currency": "EUR",
                "value": 112,
              },
            },
            Object {
              "closing_date": "2018-11-03T11:14:33z",
              "eta": "2018-11-20T11:14:33z",
              "etd": "2018-11-15T11:14:33z",
              "hub_route_key": "RAIL_HUB_ROUTE_KEY",
              "mode_of_transport": "rail",
            },
            Object {
              "closing_date": "2018-11-02T11:14:33z",
              "eta": "2018-11-19T11:14:33z",
              "etd": "2018-11-14T11:14:33z",
              "hub_route_key": "TRUCK_HUB_ROUTE_KEY",
              "mode_of_transport": "truck",
            },
          ],
          "shipment": Object {
            "booking_placed_at": "2018-11-01T11:14:33z",
            "cargo_count": 2,
            "cargo_items_attributes": Array [],
            "cargo_notes": "SHIPMENT_CARGO_NOTES",
            "cargo_units": Array [
              Object {
                "height": 67,
                "length": 63,
                "quantity": 2,
                "width": 107,
              },
            ],
            "clientName": "SHIPMENT_CLIENT_NAME",
            "containers_attributes": Array [],
            "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
            "destination": Object {
              "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
            },
            "destination_hub": Object {
              "name": "SHIPMENT_DESTINATION_HUB",
              "startHub": Object {
                "address": Object {},
              },
            },
            "direction": "import",
            "eori": 1234,
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "id": 654,
            "imc_reference": "SHIPMENT_IMC_REFERENCE",
            "incoterm": "SHIPMENT_INCOTERM",
            "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
            "load_type": "cargo_item",
            "notes": "SHIPMENT_NOTES",
            "origin": Object {
              "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
            },
            "origin_hub": Object {
              "name": "SHIPMENT_ORIGIN_HUB",
              "startHub": Object {
                "address": Object {
                  "city": "FOO_ADDRESS_CITY",
                  "country": "FOO_ADDRESS_COUNTRY",
                  "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                  "id": 246,
                  "primary": true,
                  "street": "FOO_ADDRESS_STREET",
                  "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                  "user": Object {
                    "primary": true,
                  },
                  "zipCode": "FOO_ADDRESS_ZIP_CODE",
                },
              },
            },
            "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
            "planned_eta": "2018-12-01T18:14:33z",
            "planned_etd": "2018-11-12T12:37:08z",
            "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
            "planned_pickup_date": "2018-12-08T04:30:08z",
            "schedule_set": Array [
              Object {
                "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
              },
            ],
            "schedules_charges": Object {
              "AIR_HUB_ROUTE_KEY": Object {
                "total": 200,
              },
              "OCEAN_HUB_ROUTE_KEY": Object {
                "total": 40,
              },
              "RAIL_HUB_ROUTE_KEY": Object {
                "total": 125,
              },
              "TRUCK_HUB_ROUTE_KEY": Object {
                "total": 75,
              },
            },
            "selected_offer": Object {
              "cargo": Object {},
              "customs": Object {
                "hasUnknown": false,
                "val": 12,
              },
              "insurance": Object {
                "val": 5,
              },
              "total": Object {
                "value": 87,
              },
            },
            "service_level": "standard",
            "status": "finished",
            "total_goods_value": Object {
              "currency": "USD",
              "value": 150000,
            },
            "total_price": Object {
              "currency": "USD",
              "value": 137550,
            },
            "trucking": Object {
              "has_on_carriage": false,
              "has_pre_carriage": false,
              "on_carriage": Object {
                "trucking_time_in_seconds": 28,
              },
              "pre_carriage": Object {
                "trucking_time_in_seconds": 55,
              },
            },
            "updated_at": "2018-11-01T18:14:33z",
          },
        }
      }
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
      totalGoodsValue={
        Object {
          "value": 11,
        }
      }
    />
    <InsuranceSelection
      handleInsurance={[Function]}
      insuranceView={null}
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
    />
  </div>
</div>
`;

exports[`shallow render 1`] = `
<div
  className="flex-100 layout-row layout-wrap padd_top"
  name="cargoDetailsBox"
>
  <div
    className="flex-100 layout-row layout-align-center"
  >
    <div
      className="flex-none content_width layout-row layout-wrap"
    >
      <div
        className="flex-100 layout-row layout-sm-wrap"
      >
        <div
          className="flex-50"
        >
          <div
            className="flex-100"
          >
            <div
              className="flex-100 layout-align-start-center layout-row"
            >
              <div
                className="flex-none"
              >
                <TextHeading
                  color="black"
                  fontWeight="normal"
                  size={2}
                  text="Cargo Details"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                />
              </div>
            </div>
             
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={3}
                text="Total value of goods"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap layout-align-start-start"
          >
            <div
              className="flex-100 layout-row layout-wrap"
            >
              <div
                className="flex-100 layout-row"
              >
                <div
                  className="flex-66 layout-row"
                >
                  <Formsy(FormsyInput)
                    className="flex-100 ccb_total_goods_value cargo_input "
                    errorMessageStyles={
                      Object {
                        "bottom": "-17px",
                        "fontSize": "13px",
                      }
                    }
                    innerRef={[Function]}
                    name="totalGoodsValue"
                    onBlur={[Function]}
                    required={3370}
                    submitAttempted={false}
                    type="number"
                    validationError=""
                    validationErrors={
                      Object {
                        "isDefaultRequiredValue": "Must be greater than 0",
                        "nonNegative": "Must be greater than 0",
                      }
                    }
                    validations={
                      Object {
                        "nonNegative": [Function],
                      }
                    }
                    value={11}
                    wrapperClassName="flex-100 wrapper_cargo_input"
                  />
                </div>
                <div
                  className="flex-33 layout-row"
                >
                  <NamedSelect
                    className="flex-100 ccb_currency"
                    clearable={false}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "EUR",
                          "value": "EUR",
                        },
                        Object {
                          "label": "AUD",
                          "value": "AUD",
                        },
                        Object {
                          "label": "BGN",
                          "value": "BGN",
                        },
                        Object {
                          "label": "BRL",
                          "value": "BRL",
                        },
                        Object {
                          "label": "CAD",
                          "value": "CAD",
                        },
                        Object {
                          "label": "CHF",
                          "value": "CHF",
                        },
                        Object {
                          "label": "CNY",
                          "value": "CNY",
                        },
                        Object {
                          "label": "CZK",
                          "value": "CZK",
                        },
                        Object {
                          "label": "DKK",
                          "value": "DKK",
                        },
                        Object {
                          "label": "GBP",
                          "value": "GBP",
                        },
                        Object {
                          "label": "HKD",
                          "value": "HKD",
                        },
                        Object {
                          "label": "HRK",
                          "value": "HRK",
                        },
                        Object {
                          "label": "HUF",
                          "value": "HUF",
                        },
                        Object {
                          "label": "IDR",
                          "value": "IDR",
                        },
                        Object {
                          "label": "ILS",
                          "value": "ILS",
                        },
                        Object {
                          "label": "INR",
                          "value": "INR",
                        },
                        Object {
                          "label": "JPY",
                          "value": "JPY",
                        },
                        Object {
                          "label": "KRW",
                          "value": "KRW",
                        },
                        Object {
                          "label": "MXN",
                          "value": "MXN",
                        },
                        Object {
                          "label": "MYR",
                          "value": "MYR",
                        },
                        Object {
                          "label": "NOK",
                          "value": "NOK",
                        },
                        Object {
                          "label": "NZD",
                          "value": "NZD",
                        },
                        Object {
                          "label": "PHP",
                          "value": "PHP",
                        },
                        Object {
                          "label": "PLN",
                          "value": "PLN",
                        },
                        Object {
                          "label": "RON",
                          "value": "RON",
                        },
                        Object {
                          "label": "RUB",
                          "value": "RUB",
                        },
                        Object {
                          "label": "SEK",
                          "value": "SEK",
                        },
                        Object {
                          "label": "SGD",
                          "value": "SGD",
                        },
                        Object {
                          "label": "THB",
                          "value": "THB",
                        },
                        Object {
                          "label": "TRY",
                          "value": "TRY",
                        },
                        Object {
                          "label": "USD",
                          "value": "USD",
                        },
                        Object {
                          "label": "ZAR",
                          "value": "ZAR",
                        },
                      ]
                    }
                    value={
                      Object {
                        "label": "EUR",
                        "value": "EUR",
                      }
                    }
                  />
                </div>
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-wrap"
              id="cargo_notes"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Description of Goods (HS Codes if available)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 ccb_description_goods cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="cargoNotes"
                  onBlur={[Function]}
                  required="MANDATORY_FIELDS_DESCRIPTION"
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={
                    Object {
                      "isDefaultRequiredValue": "Must not be empty",
                    }
                  }
                  validations={null}
                  value="CARGO_NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <h4
                    className="no_m flex-30"
                  >
                    Incoterms
                     
                    <span>
                      (Optional)
                    </span>
                  </h4>
                  <p
                    className="pointy flex-none incoterm_info"
                    onClick={[Function]}
                  >
                    More info
                  </p>
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="incotermText"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value=""
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
          </div>
        </div>
        <div
          className="flex-50 padding_left offset-gt-sm-5 layout-row layout-wrap layout-align-start-start"
        >
          <div
            className="flex-100 layout-align-start-center layout-row"
          >
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={2}
                text="Shipment Documents "
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
              <br />
              if available
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="packing_sheet"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Packing List"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="packing_sheet"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="commercial_invoice"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Commercial Invoice"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="commercial_invoice"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-align-start-start layout-wrap"
          >
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Notes (Optional)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="notes"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value="NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-gt-sm-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className=" flex-100 layout-row layout-align-start-start-space-around layout-wrap"
              >
                <DocumentsMultiForm
                  deleteFn={[Function]}
                  dispatchFn={[Function]}
                  documents={Array []}
                  t={[Function]}
                  text="Miscellaneous"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                  tooltip=""
                  type="miscellaneous"
                  uploadFn={null}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div
    className="insurance_customs_sec flex-100 layout-row layout-wrap layout-align-center"
  >
    <CustomsClearance
      customs={
        Object {
          "export": Object {
            "total": Object {
              "currency": "EUR",
              "value": 100,
            },
          },
          "import": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
          "total": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
        }
      }
      customsData={
        Object {
          "export": Object {
            "bool": true,
          },
          "import": Object {
            "bool": true,
            "total": Object {
              "currency": "USD",
            },
          },
          "val": "FOO_CUSTOM_DATA",
        }
      }
      deleteDoc={[Function]}
      dispatchFn={[Function]}
      documents={
        Array [
          Object {
            "approved": "approved",
            "created_at": "2018-12-01T18:14:33z",
            "doc_type": "FOO_DOC_TYPE",
            "signed_url": "FOO_SIGNED_URL",
            "text": "FOO_DOCUMENT_TEXT",
          },
          Object {
            "approved": "rejected",
            "created_at": "2018-12-02T11:14:33z",
            "doc_type": "BAR_DOC_TYPE",
            "signed_url": "BAR_SIGNED_URL",
            "text": "BAR_DOCUMENT_TEXT",
          },
        ]
      }
      eori="EORI"
      handleChange={[Function]}
      setCustomsFee={[Function]}
      shipment={
        Object {
          "booking_placed_at": "2018-11-01T11:14:33z",
          "cargo_count": 2,
          "cargo_items_attributes": Array [],
          "cargo_notes": "SHIPMENT_CARGO_NOTES",
          "cargo_units": Array [
            Object {
              "height": 67,
              "length": 63,
              "quantity": 2,
              "width": 107,
            },
          ],
          "clientName": "SHIPMENT_CLIENT_NAME",
          "containers_attributes": Array [],
          "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
          "destination": Object {
            "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
          },
          "destination_hub": Object {
            "name": "SHIPMENT_DESTINATION_HUB",
            "startHub": Object {
              "address": Object {},
            },
          },
          "direction": "import",
          "eori": 1234,
          "has_on_carriage": false,
          "has_pre_carriage": false,
          "id": 654,
          "imc_reference": "SHIPMENT_IMC_REFERENCE",
          "incoterm": "SHIPMENT_INCOTERM",
          "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
          "load_type": "cargo_item",
          "notes": "SHIPMENT_NOTES",
          "origin": Object {
            "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
          },
          "origin_hub": Object {
            "name": "SHIPMENT_ORIGIN_HUB",
            "startHub": Object {
              "address": Object {
                "city": "FOO_ADDRESS_CITY",
                "country": "FOO_ADDRESS_COUNTRY",
                "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                "id": 246,
                "primary": true,
                "street": "FOO_ADDRESS_STREET",
                "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                "user": Object {
                  "primary": true,
                },
                "zipCode": "FOO_ADDRESS_ZIP_CODE",
              },
            },
          },
          "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
          "planned_eta": "2018-12-01T18:14:33z",
          "planned_etd": "2018-11-12T12:37:08z",
          "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
          "planned_pickup_date": "2018-12-08T04:30:08z",
          "schedule_set": Array [
            Object {
              "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
            },
          ],
          "schedules_charges": Object {
            "AIR_HUB_ROUTE_KEY": Object {
              "total": 200,
            },
            "OCEAN_HUB_ROUTE_KEY": Object {
              "total": 40,
            },
            "RAIL_HUB_ROUTE_KEY": Object {
              "total": 125,
            },
            "TRUCK_HUB_ROUTE_KEY": Object {
              "total": 75,
            },
          },
          "selected_offer": Object {
            "cargo": Object {},
            "customs": Object {
              "hasUnknown": false,
              "val": 12,
            },
            "insurance": Object {
              "val": 5,
            },
            "total": Object {
              "value": 87,
            },
          },
          "service_level": "standard",
          "status": "finished",
          "total_goods_value": Object {
            "currency": "USD",
            "value": 150000,
          },
          "total_price": Object {
            "currency": "USD",
            "value": 137550,
          },
          "trucking": Object {
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "on_carriage": Object {
              "trucking_time_in_seconds": 28,
            },
            "pre_carriage": Object {
              "trucking_time_in_seconds": 55,
            },
          },
          "updated_at": "2018-11-01T18:14:33z",
        }
      }
      shipmentData={
        Object {
          "addons": Object {
            "customs_export_paper": true,
          },
          "addresses": Object {
            "destination": Object {
              "city": "BAR_CITY",
              "country": "China",
              "street": "BAR_STREET",
              "street_number": 9,
              "zip_code": 845321,
            },
            "endHub": "FOO_END_HUB",
            "origin": Object {
              "city": "FOO_CITY",
              "country": "Germany",
              "street": "FOO_STREET",
              "street_number": 7,
              "zip_code": 21177,
            },
            "startHub": "FOO_START_HUB",
          },
          "aggregatedCargo": Object {
            "cargo_item_type_id": "foo",
            "chargeable_weight": 250,
            "dangerous_goods": false,
            "description": "FOO_CARGO_ITEM_DESCRIPTION",
            "gross_weight": 76,
            "height": 40,
            "hs_codes": Array [
              4,
            ],
            "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
            "id": 1,
            "key": "FOO_CARGO_ITEM_KEY",
            "length": 60,
            "payload_in_kg": 200,
            "quantity": 5,
            "stackable": true,
            "tare_weight": 20,
            "volume": 12,
            "weight": 220,
            "width": 10,
          },
          "cargoItemTypes": Object {
            "bar": Object {
              "description": "BAR_TYPE",
            },
            "foo": Object {
              "description": "FOO_TYPE",
            },
          },
          "cargoItems": Array [
            Object {
              "cargo_item_type_id": "foo",
              "chargeable_weight": 250,
              "dangerous_goods": false,
              "description": "FOO_CARGO_ITEM_DESCRIPTION",
              "gross_weight": 76,
              "height": 40,
              "hs_codes": Array [
                4,
              ],
              "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
              "id": 1,
              "key": "FOO_CARGO_ITEM_KEY",
              "length": 60,
              "payload_in_kg": 200,
              "quantity": 5,
              "stackable": true,
              "tare_weight": 20,
              "weight": 220,
              "width": 10,
            },
            Object {
              "cargo_item_type_id": "bar",
              "chargeable_weight": 150,
              "description": "BAR_CARGO_ITEM_DESCRIPTION",
              "height": 70,
              "hs_codes": Array [],
              "hs_text": "BAR_CARGO_ITEM_HS_TEXT",
              "id": 2,
              "key": "BAR_CARGO_ITEM_KEY",
              "length": 50,
              "payload_in_kg": 100,
              "quantity": 7,
              "stackable": false,
              "width": 100,
            },
          ],
          "contacts": Array [],
          "containers": Array [
            Object {
              "cargo_group_id": 4,
              "customs_text": "FOO_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 130,
              "hs_codes": Array [],
              "id": 1,
              "payload_in_kg": 200,
              "quantity": 5,
              "size_class": "FOO_CONTAINER_SIZE_CLASS",
              "tare_weight": 50,
            },
            Object {
              "cargo_group_id": 5,
              "customs_text": "BAR_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 457,
              "hs_codes": Array [],
              "id": 2,
              "payload_in_kg": 450,
              "quantity": 7,
              "size_class": "BAR_CONTAINER_SIZE_CLASS",
              "tare_weight": 7,
            },
          ],
          "customs": Object {
            "export": Object {
              "total": Object {
                "currency": "EUR",
                "value": 100,
              },
            },
            "import": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
            "total": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
          },
          "dangerousGoods": false,
          "documents": Array [
            Object {
              "approved": "approved",
              "created_at": "2018-12-01T18:14:33z",
              "doc_type": "FOO_DOC_TYPE",
              "signed_url": "FOO_SIGNED_URL",
              "text": "FOO_DOCUMENT_TEXT",
            },
            Object {
              "approved": "rejected",
              "created_at": "2018-12-02T11:14:33z",
              "doc_type": "BAR_DOC_TYPE",
              "signed_url": "BAR_SIGNED_URL",
              "text": "BAR_DOCUMENT_TEXT",
            },
          ],
          "hubs": Object {
            "endHub": "END_HUB",
            "startHub": "START_HUB",
          },
          "notifyees": Array [
            Object {
              "first_name": "John",
              "last_name": "Doe",
            },
            Object {
              "first_name": "Robert",
              "last_name": "Plant",
            },
            Object {
              "first_name": "James",
              "last_name": "Brows",
            },
          ],
          "results": Array [
            Object {
              "meta": Object {
                "carrier_name": "FOO_CARRIER_NAME",
                "destination_hub": Object {
                  "name": "Shanghai",
                },
                "mode_of_transport": "air",
                "origin_hub": Object {
                  "name": "Gothenburg",
                },
                "pricing_range_data": Object {
                  "fcl_20": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "750.0",
                      "range": Array [],
                      "rate": "750.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "750.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40_hq": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                },
                "service_level": "FOO_SERVICE_LEVEL",
                "service_level_count": 1,
                "transit_time": 1,
              },
              "quote": Object {
                "total": Object {
                  "value": 467,
                },
              },
              "schedules": Array [
                Object {
                  "closing_date": "16-09-2018",
                  "eta": "10-09-2018",
                  "etd": "15-09-2018",
                },
              ],
            },
            Object {
              "meta": Object {
                "mode_of_transport": "ocean",
                "transit_time": 2,
              },
              "quote": Object {
                "total": Object {
                  "value": 309,
                },
              },
            },
          ],
          "routes": Array [],
          "schedule": Object {
            "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
          },
          "schedules": Array [
            Object {
              "closing_date": "2018-11-01T11:14:33z",
              "eta": "2018-11-18T11:14:33z",
              "etd": "2018-11-13T11:14:33z",
              "hub_route_key": "AIR_HUB_ROUTE_KEY",
              "mode_of_transport": "air",
            },
            Object {
              "closing_date": "2018-11-05T11:14:33z",
              "destination_hub": Object {},
              "eta": "2018-11-22T11:14:33z",
              "etd": "2018-11-17T11:14:33z",
              "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
              "mode_of_transport": "ocean",
              "origin_hub": Object {},
              "total_price": Object {
                "currency": "EUR",
                "value": 112,
              },
            },
            Object {
              "closing_date": "2018-11-03T11:14:33z",
              "eta": "2018-11-20T11:14:33z",
              "etd": "2018-11-15T11:14:33z",
              "hub_route_key": "RAIL_HUB_ROUTE_KEY",
              "mode_of_transport": "rail",
            },
            Object {
              "closing_date": "2018-11-02T11:14:33z",
              "eta": "2018-11-19T11:14:33z",
              "etd": "2018-11-14T11:14:33z",
              "hub_route_key": "TRUCK_HUB_ROUTE_KEY",
              "mode_of_transport": "truck",
            },
          ],
          "shipment": Object {
            "booking_placed_at": "2018-11-01T11:14:33z",
            "cargo_count": 2,
            "cargo_items_attributes": Array [],
            "cargo_notes": "SHIPMENT_CARGO_NOTES",
            "cargo_units": Array [
              Object {
                "height": 67,
                "length": 63,
                "quantity": 2,
                "width": 107,
              },
            ],
            "clientName": "SHIPMENT_CLIENT_NAME",
            "containers_attributes": Array [],
            "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
            "destination": Object {
              "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
            },
            "destination_hub": Object {
              "name": "SHIPMENT_DESTINATION_HUB",
              "startHub": Object {
                "address": Object {},
              },
            },
            "direction": "import",
            "eori": 1234,
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "id": 654,
            "imc_reference": "SHIPMENT_IMC_REFERENCE",
            "incoterm": "SHIPMENT_INCOTERM",
            "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
            "load_type": "cargo_item",
            "notes": "SHIPMENT_NOTES",
            "origin": Object {
              "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
            },
            "origin_hub": Object {
              "name": "SHIPMENT_ORIGIN_HUB",
              "startHub": Object {
                "address": Object {
                  "city": "FOO_ADDRESS_CITY",
                  "country": "FOO_ADDRESS_COUNTRY",
                  "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                  "id": 246,
                  "primary": true,
                  "street": "FOO_ADDRESS_STREET",
                  "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                  "user": Object {
                    "primary": true,
                  },
                  "zipCode": "FOO_ADDRESS_ZIP_CODE",
                },
              },
            },
            "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
            "planned_eta": "2018-12-01T18:14:33z",
            "planned_etd": "2018-11-12T12:37:08z",
            "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
            "planned_pickup_date": "2018-12-08T04:30:08z",
            "schedule_set": Array [
              Object {
                "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
              },
            ],
            "schedules_charges": Object {
              "AIR_HUB_ROUTE_KEY": Object {
                "total": 200,
              },
              "OCEAN_HUB_ROUTE_KEY": Object {
                "total": 40,
              },
              "RAIL_HUB_ROUTE_KEY": Object {
                "total": 125,
              },
              "TRUCK_HUB_ROUTE_KEY": Object {
                "total": 75,
              },
            },
            "selected_offer": Object {
              "cargo": Object {},
              "customs": Object {
                "hasUnknown": false,
                "val": 12,
              },
              "insurance": Object {
                "val": 5,
              },
              "total": Object {
                "value": 87,
              },
            },
            "service_level": "standard",
            "status": "finished",
            "total_goods_value": Object {
              "currency": "USD",
              "value": 150000,
            },
            "total_price": Object {
              "currency": "USD",
              "value": 137550,
            },
            "trucking": Object {
              "has_on_carriage": false,
              "has_pre_carriage": false,
              "on_carriage": Object {
                "trucking_time_in_seconds": 28,
              },
              "pre_carriage": Object {
                "trucking_time_in_seconds": 55,
              },
            },
            "updated_at": "2018-11-01T18:14:33z",
          },
        }
      }
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
      totalGoodsValue={
        Object {
          "value": 11,
        }
      }
    />
    <InsuranceSelection
      handleInsurance={[Function]}
      insuranceView={null}
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
    />
  </div>
</div>
`;

exports[`shipment.has_pre_carriage ? 1`] = `
<div
  className="flex-100 layout-row layout-wrap padd_top"
  name="cargoDetailsBox"
>
  <div
    className="flex-100 layout-row layout-align-center"
  >
    <div
      className="flex-none content_width layout-row layout-wrap"
    >
      <div
        className="flex-100 layout-row layout-sm-wrap"
      >
        <div
          className="flex-50"
        >
          <div
            className="flex-100"
          >
            <div
              className="flex-100 layout-align-start-center layout-row"
            >
              <div
                className="flex-none"
              >
                <TextHeading
                  color="black"
                  fontWeight="normal"
                  size={2}
                  text="Cargo Details"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                />
              </div>
            </div>
             
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={3}
                text="Total value of goods"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap layout-align-start-start"
          >
            <div
              className="flex-100 layout-row layout-wrap"
            >
              <div
                className="flex-100 layout-row"
              >
                <div
                  className="flex-66 layout-row"
                >
                  <Formsy(FormsyInput)
                    className="flex-100 ccb_total_goods_value cargo_input "
                    errorMessageStyles={
                      Object {
                        "bottom": "-17px",
                        "fontSize": "13px",
                      }
                    }
                    innerRef={[Function]}
                    name="totalGoodsValue"
                    onBlur={[Function]}
                    required={3370}
                    submitAttempted={false}
                    type="number"
                    validationError=""
                    validationErrors={
                      Object {
                        "isDefaultRequiredValue": "Must be greater than 0",
                        "nonNegative": "Must be greater than 0",
                      }
                    }
                    validations={
                      Object {
                        "nonNegative": [Function],
                      }
                    }
                    value={11}
                    wrapperClassName="flex-100 wrapper_cargo_input"
                  />
                </div>
                <div
                  className="flex-33 layout-row"
                >
                  <NamedSelect
                    className="flex-100 ccb_currency"
                    clearable={false}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "EUR",
                          "value": "EUR",
                        },
                        Object {
                          "label": "AUD",
                          "value": "AUD",
                        },
                        Object {
                          "label": "BGN",
                          "value": "BGN",
                        },
                        Object {
                          "label": "BRL",
                          "value": "BRL",
                        },
                        Object {
                          "label": "CAD",
                          "value": "CAD",
                        },
                        Object {
                          "label": "CHF",
                          "value": "CHF",
                        },
                        Object {
                          "label": "CNY",
                          "value": "CNY",
                        },
                        Object {
                          "label": "CZK",
                          "value": "CZK",
                        },
                        Object {
                          "label": "DKK",
                          "value": "DKK",
                        },
                        Object {
                          "label": "GBP",
                          "value": "GBP",
                        },
                        Object {
                          "label": "HKD",
                          "value": "HKD",
                        },
                        Object {
                          "label": "HRK",
                          "value": "HRK",
                        },
                        Object {
                          "label": "HUF",
                          "value": "HUF",
                        },
                        Object {
                          "label": "IDR",
                          "value": "IDR",
                        },
                        Object {
                          "label": "ILS",
                          "value": "ILS",
                        },
                        Object {
                          "label": "INR",
                          "value": "INR",
                        },
                        Object {
                          "label": "JPY",
                          "value": "JPY",
                        },
                        Object {
                          "label": "KRW",
                          "value": "KRW",
                        },
                        Object {
                          "label": "MXN",
                          "value": "MXN",
                        },
                        Object {
                          "label": "MYR",
                          "value": "MYR",
                        },
                        Object {
                          "label": "NOK",
                          "value": "NOK",
                        },
                        Object {
                          "label": "NZD",
                          "value": "NZD",
                        },
                        Object {
                          "label": "PHP",
                          "value": "PHP",
                        },
                        Object {
                          "label": "PLN",
                          "value": "PLN",
                        },
                        Object {
                          "label": "RON",
                          "value": "RON",
                        },
                        Object {
                          "label": "RUB",
                          "value": "RUB",
                        },
                        Object {
                          "label": "SEK",
                          "value": "SEK",
                        },
                        Object {
                          "label": "SGD",
                          "value": "SGD",
                        },
                        Object {
                          "label": "THB",
                          "value": "THB",
                        },
                        Object {
                          "label": "TRY",
                          "value": "TRY",
                        },
                        Object {
                          "label": "USD",
                          "value": "USD",
                        },
                        Object {
                          "label": "ZAR",
                          "value": "ZAR",
                        },
                      ]
                    }
                    value={
                      Object {
                        "label": "EUR",
                        "value": "EUR",
                      }
                    }
                  />
                </div>
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-wrap"
              id="cargo_notes"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Description of Goods (HS Codes if available)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 ccb_description_goods cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="cargoNotes"
                  onBlur={[Function]}
                  required="MANDATORY_FIELDS_DESCRIPTION"
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={
                    Object {
                      "isDefaultRequiredValue": "Must not be empty",
                    }
                  }
                  validations={null}
                  value="CARGO_NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <h4
                    className="no_m flex-30"
                  >
                    Incoterms
                     
                    <span>
                      (Optional)
                    </span>
                  </h4>
                  <p
                    className="pointy flex-none incoterm_info"
                    onClick={[Function]}
                  >
                    More info
                  </p>
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="incotermText"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value=""
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
          </div>
        </div>
        <div
          className="flex-50 padding_left offset-gt-sm-5 layout-row layout-wrap layout-align-start-start"
        >
          <div
            className="flex-100 layout-align-start-center layout-row"
          >
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={2}
                text="Shipment Documents "
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
              <br />
              if available
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="packing_sheet"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Packing List"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="packing_sheet"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="commercial_invoice"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Commercial Invoice"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="commercial_invoice"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-align-start-start layout-wrap"
          >
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Notes (Optional)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="notes"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value="NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-gt-sm-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className=" flex-100 layout-row layout-align-start-start-space-around layout-wrap"
              >
                <DocumentsMultiForm
                  deleteFn={[Function]}
                  dispatchFn={[Function]}
                  documents={Array []}
                  t={[Function]}
                  text="Miscellaneous"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                  tooltip=""
                  type="miscellaneous"
                  uploadFn={null}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div
    className="insurance_customs_sec flex-100 layout-row layout-wrap layout-align-center"
  >
    <CustomsClearance
      customs={
        Object {
          "export": Object {
            "total": Object {
              "currency": "EUR",
              "value": 100,
            },
          },
          "import": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
          "total": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
        }
      }
      customsData={
        Object {
          "export": Object {
            "bool": true,
          },
          "import": Object {
            "bool": true,
            "total": Object {
              "currency": "USD",
            },
          },
          "val": "FOO_CUSTOM_DATA",
        }
      }
      deleteDoc={[Function]}
      dispatchFn={[Function]}
      documents={
        Array [
          Object {
            "approved": "approved",
            "created_at": "2018-12-01T18:14:33z",
            "doc_type": "FOO_DOC_TYPE",
            "signed_url": "FOO_SIGNED_URL",
            "text": "FOO_DOCUMENT_TEXT",
          },
          Object {
            "approved": "rejected",
            "created_at": "2018-12-02T11:14:33z",
            "doc_type": "BAR_DOC_TYPE",
            "signed_url": "BAR_SIGNED_URL",
            "text": "BAR_DOCUMENT_TEXT",
          },
        ]
      }
      eori="EORI"
      handleChange={[Function]}
      setCustomsFee={[Function]}
      shipment={
        Object {
          "booking_placed_at": "2018-11-01T11:14:33z",
          "cargo_count": 2,
          "cargo_items_attributes": Array [],
          "cargo_notes": "SHIPMENT_CARGO_NOTES",
          "cargo_units": Array [
            Object {
              "height": 67,
              "length": 63,
              "quantity": 2,
              "width": 107,
            },
          ],
          "clientName": "SHIPMENT_CLIENT_NAME",
          "containers_attributes": Array [],
          "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
          "destination": Object {
            "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
          },
          "destination_hub": Object {
            "name": "SHIPMENT_DESTINATION_HUB",
            "startHub": Object {
              "address": Object {},
            },
          },
          "direction": "import",
          "eori": 1234,
          "has_on_carriage": true,
          "has_pre_carriage": true,
          "id": 654,
          "imc_reference": "SHIPMENT_IMC_REFERENCE",
          "incoterm": "SHIPMENT_INCOTERM",
          "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
          "load_type": "cargo_item",
          "notes": "SHIPMENT_NOTES",
          "origin": Object {
            "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
          },
          "origin_hub": Object {
            "name": "SHIPMENT_ORIGIN_HUB",
            "startHub": Object {
              "address": Object {
                "city": "FOO_ADDRESS_CITY",
                "country": "FOO_ADDRESS_COUNTRY",
                "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                "id": 246,
                "primary": true,
                "street": "FOO_ADDRESS_STREET",
                "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                "user": Object {
                  "primary": true,
                },
                "zipCode": "FOO_ADDRESS_ZIP_CODE",
              },
            },
          },
          "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
          "planned_eta": "2018-12-01T18:14:33z",
          "planned_etd": "2018-11-12T12:37:08z",
          "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
          "planned_pickup_date": "2018-12-08T04:30:08z",
          "schedule_set": Array [
            Object {
              "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
            },
          ],
          "schedules_charges": Object {
            "AIR_HUB_ROUTE_KEY": Object {
              "total": 200,
            },
            "OCEAN_HUB_ROUTE_KEY": Object {
              "total": 40,
            },
            "RAIL_HUB_ROUTE_KEY": Object {
              "total": 125,
            },
            "TRUCK_HUB_ROUTE_KEY": Object {
              "total": 75,
            },
          },
          "selected_offer": Object {
            "cargo": Object {},
            "customs": Object {
              "hasUnknown": false,
              "val": 12,
            },
            "insurance": Object {
              "val": 5,
            },
            "total": Object {
              "value": 87,
            },
          },
          "service_level": "standard",
          "status": "finished",
          "total_goods_value": Object {
            "currency": "USD",
            "value": 150000,
          },
          "total_price": Object {
            "currency": "USD",
            "value": 137550,
          },
          "trucking": Object {
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "on_carriage": Object {
              "trucking_time_in_seconds": 28,
            },
            "pre_carriage": Object {
              "trucking_time_in_seconds": 55,
            },
          },
          "updated_at": "2018-11-01T18:14:33z",
        }
      }
      shipmentData={
        Object {
          "addons": Object {
            "customs_export_paper": true,
          },
          "addresses": Object {
            "destination": Object {
              "city": "BAR_CITY",
              "country": "China",
              "street": "BAR_STREET",
              "street_number": 9,
              "zip_code": 845321,
            },
            "endHub": "FOO_END_HUB",
            "origin": Object {
              "city": "FOO_CITY",
              "country": "Germany",
              "street": "FOO_STREET",
              "street_number": 7,
              "zip_code": 21177,
            },
            "startHub": "FOO_START_HUB",
          },
          "aggregatedCargo": Object {
            "cargo_item_type_id": "foo",
            "chargeable_weight": 250,
            "dangerous_goods": false,
            "description": "FOO_CARGO_ITEM_DESCRIPTION",
            "gross_weight": 76,
            "height": 40,
            "hs_codes": Array [
              4,
            ],
            "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
            "id": 1,
            "key": "FOO_CARGO_ITEM_KEY",
            "length": 60,
            "payload_in_kg": 200,
            "quantity": 5,
            "stackable": true,
            "tare_weight": 20,
            "volume": 12,
            "weight": 220,
            "width": 10,
          },
          "cargoItemTypes": Object {
            "bar": Object {
              "description": "BAR_TYPE",
            },
            "foo": Object {
              "description": "FOO_TYPE",
            },
          },
          "cargoItems": Array [
            Object {
              "cargo_item_type_id": "foo",
              "chargeable_weight": 250,
              "dangerous_goods": false,
              "description": "FOO_CARGO_ITEM_DESCRIPTION",
              "gross_weight": 76,
              "height": 40,
              "hs_codes": Array [
                4,
              ],
              "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
              "id": 1,
              "key": "FOO_CARGO_ITEM_KEY",
              "length": 60,
              "payload_in_kg": 200,
              "quantity": 5,
              "stackable": true,
              "tare_weight": 20,
              "weight": 220,
              "width": 10,
            },
            Object {
              "cargo_item_type_id": "bar",
              "chargeable_weight": 150,
              "description": "BAR_CARGO_ITEM_DESCRIPTION",
              "height": 70,
              "hs_codes": Array [],
              "hs_text": "BAR_CARGO_ITEM_HS_TEXT",
              "id": 2,
              "key": "BAR_CARGO_ITEM_KEY",
              "length": 50,
              "payload_in_kg": 100,
              "quantity": 7,
              "stackable": false,
              "width": 100,
            },
          ],
          "contacts": Array [],
          "containers": Array [
            Object {
              "cargo_group_id": 4,
              "customs_text": "FOO_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 130,
              "hs_codes": Array [],
              "id": 1,
              "payload_in_kg": 200,
              "quantity": 5,
              "size_class": "FOO_CONTAINER_SIZE_CLASS",
              "tare_weight": 50,
            },
            Object {
              "cargo_group_id": 5,
              "customs_text": "BAR_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 457,
              "hs_codes": Array [],
              "id": 2,
              "payload_in_kg": 450,
              "quantity": 7,
              "size_class": "BAR_CONTAINER_SIZE_CLASS",
              "tare_weight": 7,
            },
          ],
          "customs": Object {
            "export": Object {
              "total": Object {
                "currency": "EUR",
                "value": 100,
              },
            },
            "import": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
            "total": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
          },
          "dangerousGoods": false,
          "documents": Array [
            Object {
              "approved": "approved",
              "created_at": "2018-12-01T18:14:33z",
              "doc_type": "FOO_DOC_TYPE",
              "signed_url": "FOO_SIGNED_URL",
              "text": "FOO_DOCUMENT_TEXT",
            },
            Object {
              "approved": "rejected",
              "created_at": "2018-12-02T11:14:33z",
              "doc_type": "BAR_DOC_TYPE",
              "signed_url": "BAR_SIGNED_URL",
              "text": "BAR_DOCUMENT_TEXT",
            },
          ],
          "hubs": Object {
            "endHub": "END_HUB",
            "startHub": "START_HUB",
          },
          "notifyees": Array [
            Object {
              "first_name": "John",
              "last_name": "Doe",
            },
            Object {
              "first_name": "Robert",
              "last_name": "Plant",
            },
            Object {
              "first_name": "James",
              "last_name": "Brows",
            },
          ],
          "results": Array [
            Object {
              "meta": Object {
                "carrier_name": "FOO_CARRIER_NAME",
                "destination_hub": Object {
                  "name": "Shanghai",
                },
                "mode_of_transport": "air",
                "origin_hub": Object {
                  "name": "Gothenburg",
                },
                "pricing_range_data": Object {
                  "fcl_20": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "750.0",
                      "range": Array [],
                      "rate": "750.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "750.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40_hq": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                },
                "service_level": "FOO_SERVICE_LEVEL",
                "service_level_count": 1,
                "transit_time": 1,
              },
              "quote": Object {
                "total": Object {
                  "value": 467,
                },
              },
              "schedules": Array [
                Object {
                  "closing_date": "16-09-2018",
                  "eta": "10-09-2018",
                  "etd": "15-09-2018",
                },
              ],
            },
            Object {
              "meta": Object {
                "mode_of_transport": "ocean",
                "transit_time": 2,
              },
              "quote": Object {
                "total": Object {
                  "value": 309,
                },
              },
            },
          ],
          "routes": Array [],
          "schedule": Object {
            "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
          },
          "schedules": Array [
            Object {
              "closing_date": "2018-11-01T11:14:33z",
              "eta": "2018-11-18T11:14:33z",
              "etd": "2018-11-13T11:14:33z",
              "hub_route_key": "AIR_HUB_ROUTE_KEY",
              "mode_of_transport": "air",
            },
            Object {
              "closing_date": "2018-11-05T11:14:33z",
              "destination_hub": Object {},
              "eta": "2018-11-22T11:14:33z",
              "etd": "2018-11-17T11:14:33z",
              "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
              "mode_of_transport": "ocean",
              "origin_hub": Object {},
              "total_price": Object {
                "currency": "EUR",
                "value": 112,
              },
            },
            Object {
              "closing_date": "2018-11-03T11:14:33z",
              "eta": "2018-11-20T11:14:33z",
              "etd": "2018-11-15T11:14:33z",
              "hub_route_key": "RAIL_HUB_ROUTE_KEY",
              "mode_of_transport": "rail",
            },
            Object {
              "closing_date": "2018-11-02T11:14:33z",
              "eta": "2018-11-19T11:14:33z",
              "etd": "2018-11-14T11:14:33z",
              "hub_route_key": "TRUCK_HUB_ROUTE_KEY",
              "mode_of_transport": "truck",
            },
          ],
          "shipment": Object {
            "booking_placed_at": "2018-11-01T11:14:33z",
            "cargo_count": 2,
            "cargo_items_attributes": Array [],
            "cargo_notes": "SHIPMENT_CARGO_NOTES",
            "cargo_units": Array [
              Object {
                "height": 67,
                "length": 63,
                "quantity": 2,
                "width": 107,
              },
            ],
            "clientName": "SHIPMENT_CLIENT_NAME",
            "containers_attributes": Array [],
            "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
            "destination": Object {
              "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
            },
            "destination_hub": Object {
              "name": "SHIPMENT_DESTINATION_HUB",
              "startHub": Object {
                "address": Object {},
              },
            },
            "direction": "import",
            "eori": 1234,
            "has_on_carriage": true,
            "has_pre_carriage": true,
            "id": 654,
            "imc_reference": "SHIPMENT_IMC_REFERENCE",
            "incoterm": "SHIPMENT_INCOTERM",
            "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
            "load_type": "cargo_item",
            "notes": "SHIPMENT_NOTES",
            "origin": Object {
              "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
            },
            "origin_hub": Object {
              "name": "SHIPMENT_ORIGIN_HUB",
              "startHub": Object {
                "address": Object {
                  "city": "FOO_ADDRESS_CITY",
                  "country": "FOO_ADDRESS_COUNTRY",
                  "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                  "id": 246,
                  "primary": true,
                  "street": "FOO_ADDRESS_STREET",
                  "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                  "user": Object {
                    "primary": true,
                  },
                  "zipCode": "FOO_ADDRESS_ZIP_CODE",
                },
              },
            },
            "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
            "planned_eta": "2018-12-01T18:14:33z",
            "planned_etd": "2018-11-12T12:37:08z",
            "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
            "planned_pickup_date": "2018-12-08T04:30:08z",
            "schedule_set": Array [
              Object {
                "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
              },
            ],
            "schedules_charges": Object {
              "AIR_HUB_ROUTE_KEY": Object {
                "total": 200,
              },
              "OCEAN_HUB_ROUTE_KEY": Object {
                "total": 40,
              },
              "RAIL_HUB_ROUTE_KEY": Object {
                "total": 125,
              },
              "TRUCK_HUB_ROUTE_KEY": Object {
                "total": 75,
              },
            },
            "selected_offer": Object {
              "cargo": Object {},
              "customs": Object {
                "hasUnknown": false,
                "val": 12,
              },
              "insurance": Object {
                "val": 5,
              },
              "total": Object {
                "value": 87,
              },
            },
            "service_level": "standard",
            "status": "finished",
            "total_goods_value": Object {
              "currency": "USD",
              "value": 150000,
            },
            "total_price": Object {
              "currency": "USD",
              "value": 137550,
            },
            "trucking": Object {
              "has_on_carriage": false,
              "has_pre_carriage": false,
              "on_carriage": Object {
                "trucking_time_in_seconds": 28,
              },
              "pre_carriage": Object {
                "trucking_time_in_seconds": 55,
              },
            },
            "updated_at": "2018-11-01T18:14:33z",
          },
        }
      }
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
      totalGoodsValue={
        Object {
          "value": 11,
        }
      }
    />
    <InsuranceSelection
      handleInsurance={[Function]}
      insuranceView={null}
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
    />
  </div>
</div>
`;

exports[`shipmentData.dangerousGoods is true 1`] = `
<div
  className="flex-100 layout-row layout-wrap padd_top"
  name="cargoDetailsBox"
>
  <div
    className="flex-100 layout-row layout-align-center"
  >
    <div
      className="flex-none content_width layout-row layout-wrap"
    >
      <div
        className="flex-100 layout-row layout-sm-wrap"
      >
        <div
          className="flex-50"
        >
          <div
            className="flex-100"
          >
            <div
              className="flex-100 layout-align-start-center layout-row"
            >
              <div
                className="flex-none"
              >
                <TextHeading
                  color="black"
                  fontWeight="normal"
                  size={2}
                  text="Cargo Details"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                />
              </div>
            </div>
             
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={3}
                text="Total value of goods"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap layout-align-start-start"
          >
            <div
              className="flex-100 layout-row layout-wrap"
            >
              <div
                className="flex-100 layout-row"
              >
                <div
                  className="flex-66 layout-row"
                >
                  <Formsy(FormsyInput)
                    className="flex-100 ccb_total_goods_value cargo_input "
                    errorMessageStyles={
                      Object {
                        "bottom": "-17px",
                        "fontSize": "13px",
                      }
                    }
                    innerRef={[Function]}
                    name="totalGoodsValue"
                    onBlur={[Function]}
                    required={3370}
                    submitAttempted={false}
                    type="number"
                    validationError=""
                    validationErrors={
                      Object {
                        "isDefaultRequiredValue": "Must be greater than 0",
                        "nonNegative": "Must be greater than 0",
                      }
                    }
                    validations={
                      Object {
                        "nonNegative": [Function],
                      }
                    }
                    value={11}
                    wrapperClassName="flex-100 wrapper_cargo_input"
                  />
                </div>
                <div
                  className="flex-33 layout-row"
                >
                  <NamedSelect
                    className="flex-100 ccb_currency"
                    clearable={false}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "EUR",
                          "value": "EUR",
                        },
                        Object {
                          "label": "AUD",
                          "value": "AUD",
                        },
                        Object {
                          "label": "BGN",
                          "value": "BGN",
                        },
                        Object {
                          "label": "BRL",
                          "value": "BRL",
                        },
                        Object {
                          "label": "CAD",
                          "value": "CAD",
                        },
                        Object {
                          "label": "CHF",
                          "value": "CHF",
                        },
                        Object {
                          "label": "CNY",
                          "value": "CNY",
                        },
                        Object {
                          "label": "CZK",
                          "value": "CZK",
                        },
                        Object {
                          "label": "DKK",
                          "value": "DKK",
                        },
                        Object {
                          "label": "GBP",
                          "value": "GBP",
                        },
                        Object {
                          "label": "HKD",
                          "value": "HKD",
                        },
                        Object {
                          "label": "HRK",
                          "value": "HRK",
                        },
                        Object {
                          "label": "HUF",
                          "value": "HUF",
                        },
                        Object {
                          "label": "IDR",
                          "value": "IDR",
                        },
                        Object {
                          "label": "ILS",
                          "value": "ILS",
                        },
                        Object {
                          "label": "INR",
                          "value": "INR",
                        },
                        Object {
                          "label": "JPY",
                          "value": "JPY",
                        },
                        Object {
                          "label": "KRW",
                          "value": "KRW",
                        },
                        Object {
                          "label": "MXN",
                          "value": "MXN",
                        },
                        Object {
                          "label": "MYR",
                          "value": "MYR",
                        },
                        Object {
                          "label": "NOK",
                          "value": "NOK",
                        },
                        Object {
                          "label": "NZD",
                          "value": "NZD",
                        },
                        Object {
                          "label": "PHP",
                          "value": "PHP",
                        },
                        Object {
                          "label": "PLN",
                          "value": "PLN",
                        },
                        Object {
                          "label": "RON",
                          "value": "RON",
                        },
                        Object {
                          "label": "RUB",
                          "value": "RUB",
                        },
                        Object {
                          "label": "SEK",
                          "value": "SEK",
                        },
                        Object {
                          "label": "SGD",
                          "value": "SGD",
                        },
                        Object {
                          "label": "THB",
                          "value": "THB",
                        },
                        Object {
                          "label": "TRY",
                          "value": "TRY",
                        },
                        Object {
                          "label": "USD",
                          "value": "USD",
                        },
                        Object {
                          "label": "ZAR",
                          "value": "ZAR",
                        },
                      ]
                    }
                    value={
                      Object {
                        "label": "EUR",
                        "value": "EUR",
                      }
                    }
                  />
                </div>
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-wrap"
              id="cargo_notes"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Description of Goods (HS Codes if available)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 ccb_description_goods cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="cargoNotes"
                  onBlur={[Function]}
                  required="MANDATORY_FIELDS_DESCRIPTION"
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={
                    Object {
                      "isDefaultRequiredValue": "Must not be empty",
                    }
                  }
                  validations={null}
                  value="CARGO_NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <h4
                    className="no_m flex-30"
                  >
                    Incoterms
                     
                    <span>
                      (Optional)
                    </span>
                  </h4>
                  <p
                    className="pointy flex-none incoterm_info"
                    onClick={[Function]}
                  >
                    More info
                  </p>
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="incotermText"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value=""
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
          </div>
        </div>
        <div
          className="flex-50 padding_left offset-gt-sm-5 layout-row layout-wrap layout-align-start-start"
        >
          <div
            className="flex-100 layout-align-start-center layout-row"
          >
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={2}
                text="Shipment Documents "
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
              <br />
              if available
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="packing_sheet"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Packing List"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="packing_sheet"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="commercial_invoice"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Commercial Invoice"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="commercial_invoice"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
          >
            <div
              className="flex-100 layout-row layout-wrap"
            >
              <DocumentsForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                displayOnly={false}
                doc={Object {}}
                isRequired={false}
                multiple={false}
                t={[Function]}
                text="Dangerous Goods"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="dangerous_goods"
                uploadFn={null}
                viewer={false}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-align-start-start layout-wrap"
          >
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Notes (Optional)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="notes"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value="NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-gt-sm-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className=" flex-100 layout-row layout-align-start-start-space-around layout-wrap"
              >
                <DocumentsMultiForm
                  deleteFn={[Function]}
                  dispatchFn={[Function]}
                  documents={Array []}
                  t={[Function]}
                  text="Miscellaneous"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                  tooltip=""
                  type="miscellaneous"
                  uploadFn={null}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div
    className="insurance_customs_sec flex-100 layout-row layout-wrap layout-align-center"
  >
    <CustomsClearance
      customs={
        Object {
          "export": Object {
            "total": Object {
              "currency": "EUR",
              "value": 100,
            },
          },
          "import": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
          "total": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
        }
      }
      customsData={
        Object {
          "export": Object {
            "bool": true,
          },
          "import": Object {
            "bool": true,
            "total": Object {
              "currency": "USD",
            },
          },
          "val": "FOO_CUSTOM_DATA",
        }
      }
      deleteDoc={[Function]}
      dispatchFn={[Function]}
      documents={
        Array [
          Object {
            "approved": "approved",
            "created_at": "2018-12-01T18:14:33z",
            "doc_type": "FOO_DOC_TYPE",
            "signed_url": "FOO_SIGNED_URL",
            "text": "FOO_DOCUMENT_TEXT",
          },
          Object {
            "approved": "rejected",
            "created_at": "2018-12-02T11:14:33z",
            "doc_type": "BAR_DOC_TYPE",
            "signed_url": "BAR_SIGNED_URL",
            "text": "BAR_DOCUMENT_TEXT",
          },
        ]
      }
      eori="EORI"
      handleChange={[Function]}
      setCustomsFee={[Function]}
      shipment={
        Object {
          "booking_placed_at": "2018-11-01T11:14:33z",
          "cargo_count": 2,
          "cargo_items_attributes": Array [],
          "cargo_notes": "SHIPMENT_CARGO_NOTES",
          "cargo_units": Array [
            Object {
              "height": 67,
              "length": 63,
              "quantity": 2,
              "width": 107,
            },
          ],
          "clientName": "SHIPMENT_CLIENT_NAME",
          "containers_attributes": Array [],
          "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
          "destination": Object {
            "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
          },
          "destination_hub": Object {
            "name": "SHIPMENT_DESTINATION_HUB",
            "startHub": Object {
              "address": Object {},
            },
          },
          "direction": "import",
          "eori": 1234,
          "has_on_carriage": false,
          "has_pre_carriage": false,
          "id": 654,
          "imc_reference": "SHIPMENT_IMC_REFERENCE",
          "incoterm": "SHIPMENT_INCOTERM",
          "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
          "load_type": "cargo_item",
          "notes": "SHIPMENT_NOTES",
          "origin": Object {
            "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
          },
          "origin_hub": Object {
            "name": "SHIPMENT_ORIGIN_HUB",
            "startHub": Object {
              "address": Object {
                "city": "FOO_ADDRESS_CITY",
                "country": "FOO_ADDRESS_COUNTRY",
                "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                "id": 246,
                "primary": true,
                "street": "FOO_ADDRESS_STREET",
                "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                "user": Object {
                  "primary": true,
                },
                "zipCode": "FOO_ADDRESS_ZIP_CODE",
              },
            },
          },
          "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
          "planned_eta": "2018-12-01T18:14:33z",
          "planned_etd": "2018-11-12T12:37:08z",
          "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
          "planned_pickup_date": "2018-12-08T04:30:08z",
          "schedule_set": Array [
            Object {
              "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
            },
          ],
          "schedules_charges": Object {
            "AIR_HUB_ROUTE_KEY": Object {
              "total": 200,
            },
            "OCEAN_HUB_ROUTE_KEY": Object {
              "total": 40,
            },
            "RAIL_HUB_ROUTE_KEY": Object {
              "total": 125,
            },
            "TRUCK_HUB_ROUTE_KEY": Object {
              "total": 75,
            },
          },
          "selected_offer": Object {
            "cargo": Object {},
            "customs": Object {
              "hasUnknown": false,
              "val": 12,
            },
            "insurance": Object {
              "val": 5,
            },
            "total": Object {
              "value": 87,
            },
          },
          "service_level": "standard",
          "status": "finished",
          "total_goods_value": Object {
            "currency": "USD",
            "value": 150000,
          },
          "total_price": Object {
            "currency": "USD",
            "value": 137550,
          },
          "trucking": Object {
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "on_carriage": Object {
              "trucking_time_in_seconds": 28,
            },
            "pre_carriage": Object {
              "trucking_time_in_seconds": 55,
            },
          },
          "updated_at": "2018-11-01T18:14:33z",
        }
      }
      shipmentData={
        Object {
          "addons": Object {
            "customs_export_paper": true,
          },
          "addresses": Object {
            "destination": Object {
              "city": "BAR_CITY",
              "country": "China",
              "street": "BAR_STREET",
              "street_number": 9,
              "zip_code": 845321,
            },
            "endHub": "FOO_END_HUB",
            "origin": Object {
              "city": "FOO_CITY",
              "country": "Germany",
              "street": "FOO_STREET",
              "street_number": 7,
              "zip_code": 21177,
            },
            "startHub": "FOO_START_HUB",
          },
          "aggregatedCargo": Object {
            "cargo_item_type_id": "foo",
            "chargeable_weight": 250,
            "dangerous_goods": false,
            "description": "FOO_CARGO_ITEM_DESCRIPTION",
            "gross_weight": 76,
            "height": 40,
            "hs_codes": Array [
              4,
            ],
            "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
            "id": 1,
            "key": "FOO_CARGO_ITEM_KEY",
            "length": 60,
            "payload_in_kg": 200,
            "quantity": 5,
            "stackable": true,
            "tare_weight": 20,
            "volume": 12,
            "weight": 220,
            "width": 10,
          },
          "cargoItemTypes": Object {
            "bar": Object {
              "description": "BAR_TYPE",
            },
            "foo": Object {
              "description": "FOO_TYPE",
            },
          },
          "cargoItems": Array [
            Object {
              "cargo_item_type_id": "foo",
              "chargeable_weight": 250,
              "dangerous_goods": false,
              "description": "FOO_CARGO_ITEM_DESCRIPTION",
              "gross_weight": 76,
              "height": 40,
              "hs_codes": Array [
                4,
              ],
              "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
              "id": 1,
              "key": "FOO_CARGO_ITEM_KEY",
              "length": 60,
              "payload_in_kg": 200,
              "quantity": 5,
              "stackable": true,
              "tare_weight": 20,
              "weight": 220,
              "width": 10,
            },
            Object {
              "cargo_item_type_id": "bar",
              "chargeable_weight": 150,
              "description": "BAR_CARGO_ITEM_DESCRIPTION",
              "height": 70,
              "hs_codes": Array [],
              "hs_text": "BAR_CARGO_ITEM_HS_TEXT",
              "id": 2,
              "key": "BAR_CARGO_ITEM_KEY",
              "length": 50,
              "payload_in_kg": 100,
              "quantity": 7,
              "stackable": false,
              "width": 100,
            },
          ],
          "contacts": Array [],
          "containers": Array [
            Object {
              "cargo_group_id": 4,
              "customs_text": "FOO_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 130,
              "hs_codes": Array [],
              "id": 1,
              "payload_in_kg": 200,
              "quantity": 5,
              "size_class": "FOO_CONTAINER_SIZE_CLASS",
              "tare_weight": 50,
            },
            Object {
              "cargo_group_id": 5,
              "customs_text": "BAR_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 457,
              "hs_codes": Array [],
              "id": 2,
              "payload_in_kg": 450,
              "quantity": 7,
              "size_class": "BAR_CONTAINER_SIZE_CLASS",
              "tare_weight": 7,
            },
          ],
          "customs": Object {
            "export": Object {
              "total": Object {
                "currency": "EUR",
                "value": 100,
              },
            },
            "import": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
            "total": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
          },
          "dangerousGoods": true,
          "documents": Array [
            Object {
              "approved": "approved",
              "created_at": "2018-12-01T18:14:33z",
              "doc_type": "FOO_DOC_TYPE",
              "signed_url": "FOO_SIGNED_URL",
              "text": "FOO_DOCUMENT_TEXT",
            },
            Object {
              "approved": "rejected",
              "created_at": "2018-12-02T11:14:33z",
              "doc_type": "BAR_DOC_TYPE",
              "signed_url": "BAR_SIGNED_URL",
              "text": "BAR_DOCUMENT_TEXT",
            },
          ],
          "hubs": Object {
            "endHub": "END_HUB",
            "startHub": "START_HUB",
          },
          "notifyees": Array [
            Object {
              "first_name": "John",
              "last_name": "Doe",
            },
            Object {
              "first_name": "Robert",
              "last_name": "Plant",
            },
            Object {
              "first_name": "James",
              "last_name": "Brows",
            },
          ],
          "results": Array [
            Object {
              "meta": Object {
                "carrier_name": "FOO_CARRIER_NAME",
                "destination_hub": Object {
                  "name": "Shanghai",
                },
                "mode_of_transport": "air",
                "origin_hub": Object {
                  "name": "Gothenburg",
                },
                "pricing_range_data": Object {
                  "fcl_20": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "750.0",
                      "range": Array [],
                      "rate": "750.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "750.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40_hq": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                },
                "service_level": "FOO_SERVICE_LEVEL",
                "service_level_count": 1,
                "transit_time": 1,
              },
              "quote": Object {
                "total": Object {
                  "value": 467,
                },
              },
              "schedules": Array [
                Object {
                  "closing_date": "16-09-2018",
                  "eta": "10-09-2018",
                  "etd": "15-09-2018",
                },
              ],
            },
            Object {
              "meta": Object {
                "mode_of_transport": "ocean",
                "transit_time": 2,
              },
              "quote": Object {
                "total": Object {
                  "value": 309,
                },
              },
            },
          ],
          "routes": Array [],
          "schedule": Object {
            "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
          },
          "schedules": Array [
            Object {
              "closing_date": "2018-11-01T11:14:33z",
              "eta": "2018-11-18T11:14:33z",
              "etd": "2018-11-13T11:14:33z",
              "hub_route_key": "AIR_HUB_ROUTE_KEY",
              "mode_of_transport": "air",
            },
            Object {
              "closing_date": "2018-11-05T11:14:33z",
              "destination_hub": Object {},
              "eta": "2018-11-22T11:14:33z",
              "etd": "2018-11-17T11:14:33z",
              "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
              "mode_of_transport": "ocean",
              "origin_hub": Object {},
              "total_price": Object {
                "currency": "EUR",
                "value": 112,
              },
            },
            Object {
              "closing_date": "2018-11-03T11:14:33z",
              "eta": "2018-11-20T11:14:33z",
              "etd": "2018-11-15T11:14:33z",
              "hub_route_key": "RAIL_HUB_ROUTE_KEY",
              "mode_of_transport": "rail",
            },
            Object {
              "closing_date": "2018-11-02T11:14:33z",
              "eta": "2018-11-19T11:14:33z",
              "etd": "2018-11-14T11:14:33z",
              "hub_route_key": "TRUCK_HUB_ROUTE_KEY",
              "mode_of_transport": "truck",
            },
          ],
          "shipment": Object {
            "booking_placed_at": "2018-11-01T11:14:33z",
            "cargo_count": 2,
            "cargo_items_attributes": Array [],
            "cargo_notes": "SHIPMENT_CARGO_NOTES",
            "cargo_units": Array [
              Object {
                "height": 67,
                "length": 63,
                "quantity": 2,
                "width": 107,
              },
            ],
            "clientName": "SHIPMENT_CLIENT_NAME",
            "containers_attributes": Array [],
            "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
            "destination": Object {
              "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
            },
            "destination_hub": Object {
              "name": "SHIPMENT_DESTINATION_HUB",
              "startHub": Object {
                "address": Object {},
              },
            },
            "direction": "import",
            "eori": 1234,
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "id": 654,
            "imc_reference": "SHIPMENT_IMC_REFERENCE",
            "incoterm": "SHIPMENT_INCOTERM",
            "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
            "load_type": "cargo_item",
            "notes": "SHIPMENT_NOTES",
            "origin": Object {
              "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
            },
            "origin_hub": Object {
              "name": "SHIPMENT_ORIGIN_HUB",
              "startHub": Object {
                "address": Object {
                  "city": "FOO_ADDRESS_CITY",
                  "country": "FOO_ADDRESS_COUNTRY",
                  "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                  "id": 246,
                  "primary": true,
                  "street": "FOO_ADDRESS_STREET",
                  "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                  "user": Object {
                    "primary": true,
                  },
                  "zipCode": "FOO_ADDRESS_ZIP_CODE",
                },
              },
            },
            "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
            "planned_eta": "2018-12-01T18:14:33z",
            "planned_etd": "2018-11-12T12:37:08z",
            "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
            "planned_pickup_date": "2018-12-08T04:30:08z",
            "schedule_set": Array [
              Object {
                "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
              },
            ],
            "schedules_charges": Object {
              "AIR_HUB_ROUTE_KEY": Object {
                "total": 200,
              },
              "OCEAN_HUB_ROUTE_KEY": Object {
                "total": 40,
              },
              "RAIL_HUB_ROUTE_KEY": Object {
                "total": 125,
              },
              "TRUCK_HUB_ROUTE_KEY": Object {
                "total": 75,
              },
            },
            "selected_offer": Object {
              "cargo": Object {},
              "customs": Object {
                "hasUnknown": false,
                "val": 12,
              },
              "insurance": Object {
                "val": 5,
              },
              "total": Object {
                "value": 87,
              },
            },
            "service_level": "standard",
            "status": "finished",
            "total_goods_value": Object {
              "currency": "USD",
              "value": 150000,
            },
            "total_price": Object {
              "currency": "USD",
              "value": 137550,
            },
            "trucking": Object {
              "has_on_carriage": false,
              "has_pre_carriage": false,
              "on_carriage": Object {
                "trucking_time_in_seconds": 28,
              },
              "pre_carriage": Object {
                "trucking_time_in_seconds": 55,
              },
            },
            "updated_at": "2018-11-01T18:14:33z",
          },
        }
      }
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
      totalGoodsValue={
        Object {
          "value": 11,
        }
      }
    />
    <InsuranceSelection
      handleInsurance={[Function]}
      insuranceView={null}
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
    />
  </div>
</div>
`;

exports[`state.customsView is true 1`] = `
<div
  className="flex-100 layout-row layout-wrap padd_top"
  name="cargoDetailsBox"
>
  <div
    className="flex-100 layout-row layout-align-center"
  >
    <div
      className="flex-none content_width layout-row layout-wrap"
    >
      <div
        className="flex-100 layout-row layout-sm-wrap"
      >
        <div
          className="flex-50"
        >
          <div
            className="flex-100"
          >
            <div
              className="flex-100 layout-align-start-center layout-row"
            >
              <div
                className="flex-none"
              >
                <TextHeading
                  color="black"
                  fontWeight="normal"
                  size={2}
                  text="Cargo Details"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                />
              </div>
            </div>
             
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={3}
                text="Total value of goods"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap layout-align-start-start"
          >
            <div
              className="flex-100 layout-row layout-wrap"
            >
              <div
                className="flex-100 layout-row"
              >
                <div
                  className="flex-66 layout-row"
                >
                  <Formsy(FormsyInput)
                    className="flex-100 ccb_total_goods_value cargo_input "
                    errorMessageStyles={
                      Object {
                        "bottom": "-17px",
                        "fontSize": "13px",
                      }
                    }
                    innerRef={[Function]}
                    name="totalGoodsValue"
                    onBlur={[Function]}
                    required={3370}
                    submitAttempted={false}
                    type="number"
                    validationError=""
                    validationErrors={
                      Object {
                        "isDefaultRequiredValue": "Must be greater than 0",
                        "nonNegative": "Must be greater than 0",
                      }
                    }
                    validations={
                      Object {
                        "nonNegative": [Function],
                      }
                    }
                    value={11}
                    wrapperClassName="flex-100 wrapper_cargo_input"
                  />
                </div>
                <div
                  className="flex-33 layout-row"
                >
                  <NamedSelect
                    className="flex-100 ccb_currency"
                    clearable={false}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "EUR",
                          "value": "EUR",
                        },
                        Object {
                          "label": "AUD",
                          "value": "AUD",
                        },
                        Object {
                          "label": "BGN",
                          "value": "BGN",
                        },
                        Object {
                          "label": "BRL",
                          "value": "BRL",
                        },
                        Object {
                          "label": "CAD",
                          "value": "CAD",
                        },
                        Object {
                          "label": "CHF",
                          "value": "CHF",
                        },
                        Object {
                          "label": "CNY",
                          "value": "CNY",
                        },
                        Object {
                          "label": "CZK",
                          "value": "CZK",
                        },
                        Object {
                          "label": "DKK",
                          "value": "DKK",
                        },
                        Object {
                          "label": "GBP",
                          "value": "GBP",
                        },
                        Object {
                          "label": "HKD",
                          "value": "HKD",
                        },
                        Object {
                          "label": "HRK",
                          "value": "HRK",
                        },
                        Object {
                          "label": "HUF",
                          "value": "HUF",
                        },
                        Object {
                          "label": "IDR",
                          "value": "IDR",
                        },
                        Object {
                          "label": "ILS",
                          "value": "ILS",
                        },
                        Object {
                          "label": "INR",
                          "value": "INR",
                        },
                        Object {
                          "label": "JPY",
                          "value": "JPY",
                        },
                        Object {
                          "label": "KRW",
                          "value": "KRW",
                        },
                        Object {
                          "label": "MXN",
                          "value": "MXN",
                        },
                        Object {
                          "label": "MYR",
                          "value": "MYR",
                        },
                        Object {
                          "label": "NOK",
                          "value": "NOK",
                        },
                        Object {
                          "label": "NZD",
                          "value": "NZD",
                        },
                        Object {
                          "label": "PHP",
                          "value": "PHP",
                        },
                        Object {
                          "label": "PLN",
                          "value": "PLN",
                        },
                        Object {
                          "label": "RON",
                          "value": "RON",
                        },
                        Object {
                          "label": "RUB",
                          "value": "RUB",
                        },
                        Object {
                          "label": "SEK",
                          "value": "SEK",
                        },
                        Object {
                          "label": "SGD",
                          "value": "SGD",
                        },
                        Object {
                          "label": "THB",
                          "value": "THB",
                        },
                        Object {
                          "label": "TRY",
                          "value": "TRY",
                        },
                        Object {
                          "label": "USD",
                          "value": "USD",
                        },
                        Object {
                          "label": "ZAR",
                          "value": "ZAR",
                        },
                      ]
                    }
                    value={
                      Object {
                        "label": "EUR",
                        "value": "EUR",
                      }
                    }
                  />
                </div>
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-wrap"
              id="cargo_notes"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Description of Goods (HS Codes if available)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 ccb_description_goods cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="cargoNotes"
                  onBlur={[Function]}
                  required="MANDATORY_FIELDS_DESCRIPTION"
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={
                    Object {
                      "isDefaultRequiredValue": "Must not be empty",
                    }
                  }
                  validations={null}
                  value="CARGO_NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <h4
                    className="no_m flex-30"
                  >
                    Incoterms
                     
                    <span>
                      (Optional)
                    </span>
                  </h4>
                  <p
                    className="pointy flex-none incoterm_info"
                    onClick={[Function]}
                  >
                    More info
                  </p>
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="incotermText"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value=""
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
          </div>
        </div>
        <div
          className="flex-50 padding_left offset-gt-sm-5 layout-row layout-wrap layout-align-start-start"
        >
          <div
            className="flex-100 layout-align-start-center layout-row"
          >
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={2}
                text="Shipment Documents "
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
              <br />
              if available
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="packing_sheet"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Packing List"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="packing_sheet"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="commercial_invoice"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Commercial Invoice"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="commercial_invoice"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-align-start-start layout-wrap"
          >
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Notes (Optional)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="notes"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value="NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-gt-sm-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className=" flex-100 layout-row layout-align-start-start-space-around layout-wrap"
              >
                <DocumentsMultiForm
                  deleteFn={[Function]}
                  dispatchFn={[Function]}
                  documents={Array []}
                  t={[Function]}
                  text="Miscellaneous"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                  tooltip=""
                  type="miscellaneous"
                  uploadFn={null}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div
    className="insurance_customs_sec flex-100 layout-row layout-wrap layout-align-center"
  >
    <CustomsClearance
      customs={
        Object {
          "export": Object {
            "total": Object {
              "currency": "EUR",
              "value": 100,
            },
          },
          "import": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
          "total": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
        }
      }
      customsData={
        Object {
          "export": Object {
            "bool": true,
          },
          "import": Object {
            "bool": true,
            "total": Object {
              "currency": "USD",
            },
          },
          "val": "FOO_CUSTOM_DATA",
        }
      }
      deleteDoc={[Function]}
      dispatchFn={[Function]}
      documents={
        Array [
          Object {
            "approved": "approved",
            "created_at": "2018-12-01T18:14:33z",
            "doc_type": "FOO_DOC_TYPE",
            "signed_url": "FOO_SIGNED_URL",
            "text": "FOO_DOCUMENT_TEXT",
          },
          Object {
            "approved": "rejected",
            "created_at": "2018-12-02T11:14:33z",
            "doc_type": "BAR_DOC_TYPE",
            "signed_url": "BAR_SIGNED_URL",
            "text": "BAR_DOCUMENT_TEXT",
          },
        ]
      }
      eori="EORI"
      handleChange={[Function]}
      setCustomsFee={[Function]}
      shipment={
        Object {
          "booking_placed_at": "2018-11-01T11:14:33z",
          "cargo_count": 2,
          "cargo_items_attributes": Array [],
          "cargo_notes": "SHIPMENT_CARGO_NOTES",
          "cargo_units": Array [
            Object {
              "height": 67,
              "length": 63,
              "quantity": 2,
              "width": 107,
            },
          ],
          "clientName": "SHIPMENT_CLIENT_NAME",
          "containers_attributes": Array [],
          "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
          "destination": Object {
            "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
          },
          "destination_hub": Object {
            "name": "SHIPMENT_DESTINATION_HUB",
            "startHub": Object {
              "address": Object {},
            },
          },
          "direction": "import",
          "eori": 1234,
          "has_on_carriage": false,
          "has_pre_carriage": false,
          "id": 654,
          "imc_reference": "SHIPMENT_IMC_REFERENCE",
          "incoterm": "SHIPMENT_INCOTERM",
          "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
          "load_type": "cargo_item",
          "notes": "SHIPMENT_NOTES",
          "origin": Object {
            "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
          },
          "origin_hub": Object {
            "name": "SHIPMENT_ORIGIN_HUB",
            "startHub": Object {
              "address": Object {
                "city": "FOO_ADDRESS_CITY",
                "country": "FOO_ADDRESS_COUNTRY",
                "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                "id": 246,
                "primary": true,
                "street": "FOO_ADDRESS_STREET",
                "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                "user": Object {
                  "primary": true,
                },
                "zipCode": "FOO_ADDRESS_ZIP_CODE",
              },
            },
          },
          "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
          "planned_eta": "2018-12-01T18:14:33z",
          "planned_etd": "2018-11-12T12:37:08z",
          "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
          "planned_pickup_date": "2018-12-08T04:30:08z",
          "schedule_set": Array [
            Object {
              "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
            },
          ],
          "schedules_charges": Object {
            "AIR_HUB_ROUTE_KEY": Object {
              "total": 200,
            },
            "OCEAN_HUB_ROUTE_KEY": Object {
              "total": 40,
            },
            "RAIL_HUB_ROUTE_KEY": Object {
              "total": 125,
            },
            "TRUCK_HUB_ROUTE_KEY": Object {
              "total": 75,
            },
          },
          "selected_offer": Object {
            "cargo": Object {},
            "customs": Object {
              "hasUnknown": false,
              "val": 12,
            },
            "insurance": Object {
              "val": 5,
            },
            "total": Object {
              "value": 87,
            },
          },
          "service_level": "standard",
          "status": "finished",
          "total_goods_value": Object {
            "currency": "USD",
            "value": 150000,
          },
          "total_price": Object {
            "currency": "USD",
            "value": 137550,
          },
          "trucking": Object {
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "on_carriage": Object {
              "trucking_time_in_seconds": 28,
            },
            "pre_carriage": Object {
              "trucking_time_in_seconds": 55,
            },
          },
          "updated_at": "2018-11-01T18:14:33z",
        }
      }
      shipmentData={
        Object {
          "addons": Object {
            "customs_export_paper": true,
          },
          "addresses": Object {
            "destination": Object {
              "city": "BAR_CITY",
              "country": "China",
              "street": "BAR_STREET",
              "street_number": 9,
              "zip_code": 845321,
            },
            "endHub": "FOO_END_HUB",
            "origin": Object {
              "city": "FOO_CITY",
              "country": "Germany",
              "street": "FOO_STREET",
              "street_number": 7,
              "zip_code": 21177,
            },
            "startHub": "FOO_START_HUB",
          },
          "aggregatedCargo": Object {
            "cargo_item_type_id": "foo",
            "chargeable_weight": 250,
            "dangerous_goods": false,
            "description": "FOO_CARGO_ITEM_DESCRIPTION",
            "gross_weight": 76,
            "height": 40,
            "hs_codes": Array [
              4,
            ],
            "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
            "id": 1,
            "key": "FOO_CARGO_ITEM_KEY",
            "length": 60,
            "payload_in_kg": 200,
            "quantity": 5,
            "stackable": true,
            "tare_weight": 20,
            "volume": 12,
            "weight": 220,
            "width": 10,
          },
          "cargoItemTypes": Object {
            "bar": Object {
              "description": "BAR_TYPE",
            },
            "foo": Object {
              "description": "FOO_TYPE",
            },
          },
          "cargoItems": Array [
            Object {
              "cargo_item_type_id": "foo",
              "chargeable_weight": 250,
              "dangerous_goods": false,
              "description": "FOO_CARGO_ITEM_DESCRIPTION",
              "gross_weight": 76,
              "height": 40,
              "hs_codes": Array [
                4,
              ],
              "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
              "id": 1,
              "key": "FOO_CARGO_ITEM_KEY",
              "length": 60,
              "payload_in_kg": 200,
              "quantity": 5,
              "stackable": true,
              "tare_weight": 20,
              "weight": 220,
              "width": 10,
            },
            Object {
              "cargo_item_type_id": "bar",
              "chargeable_weight": 150,
              "description": "BAR_CARGO_ITEM_DESCRIPTION",
              "height": 70,
              "hs_codes": Array [],
              "hs_text": "BAR_CARGO_ITEM_HS_TEXT",
              "id": 2,
              "key": "BAR_CARGO_ITEM_KEY",
              "length": 50,
              "payload_in_kg": 100,
              "quantity": 7,
              "stackable": false,
              "width": 100,
            },
          ],
          "contacts": Array [],
          "containers": Array [
            Object {
              "cargo_group_id": 4,
              "customs_text": "FOO_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 130,
              "hs_codes": Array [],
              "id": 1,
              "payload_in_kg": 200,
              "quantity": 5,
              "size_class": "FOO_CONTAINER_SIZE_CLASS",
              "tare_weight": 50,
            },
            Object {
              "cargo_group_id": 5,
              "customs_text": "BAR_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 457,
              "hs_codes": Array [],
              "id": 2,
              "payload_in_kg": 450,
              "quantity": 7,
              "size_class": "BAR_CONTAINER_SIZE_CLASS",
              "tare_weight": 7,
            },
          ],
          "customs": Object {
            "export": Object {
              "total": Object {
                "currency": "EUR",
                "value": 100,
              },
            },
            "import": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
            "total": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
          },
          "dangerousGoods": false,
          "documents": Array [
            Object {
              "approved": "approved",
              "created_at": "2018-12-01T18:14:33z",
              "doc_type": "FOO_DOC_TYPE",
              "signed_url": "FOO_SIGNED_URL",
              "text": "FOO_DOCUMENT_TEXT",
            },
            Object {
              "approved": "rejected",
              "created_at": "2018-12-02T11:14:33z",
              "doc_type": "BAR_DOC_TYPE",
              "signed_url": "BAR_SIGNED_URL",
              "text": "BAR_DOCUMENT_TEXT",
            },
          ],
          "hubs": Object {
            "endHub": "END_HUB",
            "startHub": "START_HUB",
          },
          "notifyees": Array [
            Object {
              "first_name": "John",
              "last_name": "Doe",
            },
            Object {
              "first_name": "Robert",
              "last_name": "Plant",
            },
            Object {
              "first_name": "James",
              "last_name": "Brows",
            },
          ],
          "results": Array [
            Object {
              "meta": Object {
                "carrier_name": "FOO_CARRIER_NAME",
                "destination_hub": Object {
                  "name": "Shanghai",
                },
                "mode_of_transport": "air",
                "origin_hub": Object {
                  "name": "Gothenburg",
                },
                "pricing_range_data": Object {
                  "fcl_20": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "750.0",
                      "range": Array [],
                      "rate": "750.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "750.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40_hq": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                },
                "service_level": "FOO_SERVICE_LEVEL",
                "service_level_count": 1,
                "transit_time": 1,
              },
              "quote": Object {
                "total": Object {
                  "value": 467,
                },
              },
              "schedules": Array [
                Object {
                  "closing_date": "16-09-2018",
                  "eta": "10-09-2018",
                  "etd": "15-09-2018",
                },
              ],
            },
            Object {
              "meta": Object {
                "mode_of_transport": "ocean",
                "transit_time": 2,
              },
              "quote": Object {
                "total": Object {
                  "value": 309,
                },
              },
            },
          ],
          "routes": Array [],
          "schedule": Object {
            "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
          },
          "schedules": Array [
            Object {
              "closing_date": "2018-11-01T11:14:33z",
              "eta": "2018-11-18T11:14:33z",
              "etd": "2018-11-13T11:14:33z",
              "hub_route_key": "AIR_HUB_ROUTE_KEY",
              "mode_of_transport": "air",
            },
            Object {
              "closing_date": "2018-11-05T11:14:33z",
              "destination_hub": Object {},
              "eta": "2018-11-22T11:14:33z",
              "etd": "2018-11-17T11:14:33z",
              "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
              "mode_of_transport": "ocean",
              "origin_hub": Object {},
              "total_price": Object {
                "currency": "EUR",
                "value": 112,
              },
            },
            Object {
              "closing_date": "2018-11-03T11:14:33z",
              "eta": "2018-11-20T11:14:33z",
              "etd": "2018-11-15T11:14:33z",
              "hub_route_key": "RAIL_HUB_ROUTE_KEY",
              "mode_of_transport": "rail",
            },
            Object {
              "closing_date": "2018-11-02T11:14:33z",
              "eta": "2018-11-19T11:14:33z",
              "etd": "2018-11-14T11:14:33z",
              "hub_route_key": "TRUCK_HUB_ROUTE_KEY",
              "mode_of_transport": "truck",
            },
          ],
          "shipment": Object {
            "booking_placed_at": "2018-11-01T11:14:33z",
            "cargo_count": 2,
            "cargo_items_attributes": Array [],
            "cargo_notes": "SHIPMENT_CARGO_NOTES",
            "cargo_units": Array [
              Object {
                "height": 67,
                "length": 63,
                "quantity": 2,
                "width": 107,
              },
            ],
            "clientName": "SHIPMENT_CLIENT_NAME",
            "containers_attributes": Array [],
            "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
            "destination": Object {
              "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
            },
            "destination_hub": Object {
              "name": "SHIPMENT_DESTINATION_HUB",
              "startHub": Object {
                "address": Object {},
              },
            },
            "direction": "import",
            "eori": 1234,
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "id": 654,
            "imc_reference": "SHIPMENT_IMC_REFERENCE",
            "incoterm": "SHIPMENT_INCOTERM",
            "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
            "load_type": "cargo_item",
            "notes": "SHIPMENT_NOTES",
            "origin": Object {
              "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
            },
            "origin_hub": Object {
              "name": "SHIPMENT_ORIGIN_HUB",
              "startHub": Object {
                "address": Object {
                  "city": "FOO_ADDRESS_CITY",
                  "country": "FOO_ADDRESS_COUNTRY",
                  "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                  "id": 246,
                  "primary": true,
                  "street": "FOO_ADDRESS_STREET",
                  "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                  "user": Object {
                    "primary": true,
                  },
                  "zipCode": "FOO_ADDRESS_ZIP_CODE",
                },
              },
            },
            "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
            "planned_eta": "2018-12-01T18:14:33z",
            "planned_etd": "2018-11-12T12:37:08z",
            "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
            "planned_pickup_date": "2018-12-08T04:30:08z",
            "schedule_set": Array [
              Object {
                "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
              },
            ],
            "schedules_charges": Object {
              "AIR_HUB_ROUTE_KEY": Object {
                "total": 200,
              },
              "OCEAN_HUB_ROUTE_KEY": Object {
                "total": 40,
              },
              "RAIL_HUB_ROUTE_KEY": Object {
                "total": 125,
              },
              "TRUCK_HUB_ROUTE_KEY": Object {
                "total": 75,
              },
            },
            "selected_offer": Object {
              "cargo": Object {},
              "customs": Object {
                "hasUnknown": false,
                "val": 12,
              },
              "insurance": Object {
                "val": 5,
              },
              "total": Object {
                "value": 87,
              },
            },
            "service_level": "standard",
            "status": "finished",
            "total_goods_value": Object {
              "currency": "USD",
              "value": 150000,
            },
            "total_price": Object {
              "currency": "USD",
              "value": 137550,
            },
            "trucking": Object {
              "has_on_carriage": false,
              "has_pre_carriage": false,
              "on_carriage": Object {
                "trucking_time_in_seconds": 28,
              },
              "pre_carriage": Object {
                "trucking_time_in_seconds": 55,
              },
            },
            "updated_at": "2018-11-01T18:14:33z",
          },
        }
      }
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
      totalGoodsValue={
        Object {
          "value": 11,
        }
      }
    />
    <InsuranceSelection
      handleInsurance={[Function]}
      insuranceView={null}
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
    />
  </div>
</div>
`;

exports[`state.insuranceView is false 1`] = `
<div
  className="flex-100 layout-row layout-wrap padd_top"
  name="cargoDetailsBox"
>
  <div
    className="flex-100 layout-row layout-align-center"
  >
    <div
      className="flex-none content_width layout-row layout-wrap"
    >
      <div
        className="flex-100 layout-row layout-sm-wrap"
      >
        <div
          className="flex-50"
        >
          <div
            className="flex-100"
          >
            <div
              className="flex-100 layout-align-start-center layout-row"
            >
              <div
                className="flex-none"
              >
                <TextHeading
                  color="black"
                  fontWeight="normal"
                  size={2}
                  text="Cargo Details"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                />
              </div>
            </div>
             
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={3}
                text="Total value of goods"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap layout-align-start-start"
          >
            <div
              className="flex-100 layout-row layout-wrap"
            >
              <div
                className="flex-100 layout-row"
              >
                <div
                  className="flex-66 layout-row"
                >
                  <Formsy(FormsyInput)
                    className="flex-100 ccb_total_goods_value cargo_input "
                    errorMessageStyles={
                      Object {
                        "bottom": "-17px",
                        "fontSize": "13px",
                      }
                    }
                    innerRef={[Function]}
                    name="totalGoodsValue"
                    onBlur={[Function]}
                    required={3370}
                    submitAttempted={false}
                    type="number"
                    validationError=""
                    validationErrors={
                      Object {
                        "isDefaultRequiredValue": "Must be greater than 0",
                        "nonNegative": "Must be greater than 0",
                      }
                    }
                    validations={
                      Object {
                        "nonNegative": [Function],
                      }
                    }
                    value={11}
                    wrapperClassName="flex-100 wrapper_cargo_input"
                  />
                </div>
                <div
                  className="flex-33 layout-row"
                >
                  <NamedSelect
                    className="flex-100 ccb_currency"
                    clearable={false}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "EUR",
                          "value": "EUR",
                        },
                        Object {
                          "label": "AUD",
                          "value": "AUD",
                        },
                        Object {
                          "label": "BGN",
                          "value": "BGN",
                        },
                        Object {
                          "label": "BRL",
                          "value": "BRL",
                        },
                        Object {
                          "label": "CAD",
                          "value": "CAD",
                        },
                        Object {
                          "label": "CHF",
                          "value": "CHF",
                        },
                        Object {
                          "label": "CNY",
                          "value": "CNY",
                        },
                        Object {
                          "label": "CZK",
                          "value": "CZK",
                        },
                        Object {
                          "label": "DKK",
                          "value": "DKK",
                        },
                        Object {
                          "label": "GBP",
                          "value": "GBP",
                        },
                        Object {
                          "label": "HKD",
                          "value": "HKD",
                        },
                        Object {
                          "label": "HRK",
                          "value": "HRK",
                        },
                        Object {
                          "label": "HUF",
                          "value": "HUF",
                        },
                        Object {
                          "label": "IDR",
                          "value": "IDR",
                        },
                        Object {
                          "label": "ILS",
                          "value": "ILS",
                        },
                        Object {
                          "label": "INR",
                          "value": "INR",
                        },
                        Object {
                          "label": "JPY",
                          "value": "JPY",
                        },
                        Object {
                          "label": "KRW",
                          "value": "KRW",
                        },
                        Object {
                          "label": "MXN",
                          "value": "MXN",
                        },
                        Object {
                          "label": "MYR",
                          "value": "MYR",
                        },
                        Object {
                          "label": "NOK",
                          "value": "NOK",
                        },
                        Object {
                          "label": "NZD",
                          "value": "NZD",
                        },
                        Object {
                          "label": "PHP",
                          "value": "PHP",
                        },
                        Object {
                          "label": "PLN",
                          "value": "PLN",
                        },
                        Object {
                          "label": "RON",
                          "value": "RON",
                        },
                        Object {
                          "label": "RUB",
                          "value": "RUB",
                        },
                        Object {
                          "label": "SEK",
                          "value": "SEK",
                        },
                        Object {
                          "label": "SGD",
                          "value": "SGD",
                        },
                        Object {
                          "label": "THB",
                          "value": "THB",
                        },
                        Object {
                          "label": "TRY",
                          "value": "TRY",
                        },
                        Object {
                          "label": "USD",
                          "value": "USD",
                        },
                        Object {
                          "label": "ZAR",
                          "value": "ZAR",
                        },
                      ]
                    }
                    value={
                      Object {
                        "label": "EUR",
                        "value": "EUR",
                      }
                    }
                  />
                </div>
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-wrap"
              id="cargo_notes"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Description of Goods (HS Codes if available)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 ccb_description_goods cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="cargoNotes"
                  onBlur={[Function]}
                  required="MANDATORY_FIELDS_DESCRIPTION"
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={
                    Object {
                      "isDefaultRequiredValue": "Must not be empty",
                    }
                  }
                  validations={null}
                  value="CARGO_NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <h4
                    className="no_m flex-30"
                  >
                    Incoterms
                     
                    <span>
                      (Optional)
                    </span>
                  </h4>
                  <p
                    className="pointy flex-none incoterm_info"
                    onClick={[Function]}
                  >
                    More info
                  </p>
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="incotermText"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value=""
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
          </div>
        </div>
        <div
          className="flex-50 padding_left offset-gt-sm-5 layout-row layout-wrap layout-align-start-start"
        >
          <div
            className="flex-100 layout-align-start-center layout-row"
          >
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={2}
                text="Shipment Documents "
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
              <br />
              if available
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="packing_sheet"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Packing List"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="packing_sheet"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="commercial_invoice"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Commercial Invoice"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="commercial_invoice"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-align-start-start layout-wrap"
          >
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Notes (Optional)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="notes"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value="NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-gt-sm-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className=" flex-100 layout-row layout-align-start-start-space-around layout-wrap"
              >
                <DocumentsMultiForm
                  deleteFn={[Function]}
                  dispatchFn={[Function]}
                  documents={Array []}
                  t={[Function]}
                  text="Miscellaneous"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                  tooltip=""
                  type="miscellaneous"
                  uploadFn={null}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div
    className="insurance_customs_sec flex-100 layout-row layout-wrap layout-align-center"
  >
    <CustomsClearance
      customs={
        Object {
          "export": Object {
            "total": Object {
              "currency": "EUR",
              "value": 100,
            },
          },
          "import": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
          "total": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
        }
      }
      customsData={
        Object {
          "export": Object {
            "bool": true,
          },
          "import": Object {
            "bool": true,
            "total": Object {
              "currency": "USD",
            },
          },
          "val": "FOO_CUSTOM_DATA",
        }
      }
      deleteDoc={[Function]}
      dispatchFn={[Function]}
      documents={
        Array [
          Object {
            "approved": "approved",
            "created_at": "2018-12-01T18:14:33z",
            "doc_type": "FOO_DOC_TYPE",
            "signed_url": "FOO_SIGNED_URL",
            "text": "FOO_DOCUMENT_TEXT",
          },
          Object {
            "approved": "rejected",
            "created_at": "2018-12-02T11:14:33z",
            "doc_type": "BAR_DOC_TYPE",
            "signed_url": "BAR_SIGNED_URL",
            "text": "BAR_DOCUMENT_TEXT",
          },
        ]
      }
      eori="EORI"
      handleChange={[Function]}
      setCustomsFee={[Function]}
      shipment={
        Object {
          "booking_placed_at": "2018-11-01T11:14:33z",
          "cargo_count": 2,
          "cargo_items_attributes": Array [],
          "cargo_notes": "SHIPMENT_CARGO_NOTES",
          "cargo_units": Array [
            Object {
              "height": 67,
              "length": 63,
              "quantity": 2,
              "width": 107,
            },
          ],
          "clientName": "SHIPMENT_CLIENT_NAME",
          "containers_attributes": Array [],
          "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
          "destination": Object {
            "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
          },
          "destination_hub": Object {
            "name": "SHIPMENT_DESTINATION_HUB",
            "startHub": Object {
              "address": Object {},
            },
          },
          "direction": "import",
          "eori": 1234,
          "has_on_carriage": false,
          "has_pre_carriage": false,
          "id": 654,
          "imc_reference": "SHIPMENT_IMC_REFERENCE",
          "incoterm": "SHIPMENT_INCOTERM",
          "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
          "load_type": "cargo_item",
          "notes": "SHIPMENT_NOTES",
          "origin": Object {
            "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
          },
          "origin_hub": Object {
            "name": "SHIPMENT_ORIGIN_HUB",
            "startHub": Object {
              "address": Object {
                "city": "FOO_ADDRESS_CITY",
                "country": "FOO_ADDRESS_COUNTRY",
                "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                "id": 246,
                "primary": true,
                "street": "FOO_ADDRESS_STREET",
                "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                "user": Object {
                  "primary": true,
                },
                "zipCode": "FOO_ADDRESS_ZIP_CODE",
              },
            },
          },
          "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
          "planned_eta": "2018-12-01T18:14:33z",
          "planned_etd": "2018-11-12T12:37:08z",
          "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
          "planned_pickup_date": "2018-12-08T04:30:08z",
          "schedule_set": Array [
            Object {
              "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
            },
          ],
          "schedules_charges": Object {
            "AIR_HUB_ROUTE_KEY": Object {
              "total": 200,
            },
            "OCEAN_HUB_ROUTE_KEY": Object {
              "total": 40,
            },
            "RAIL_HUB_ROUTE_KEY": Object {
              "total": 125,
            },
            "TRUCK_HUB_ROUTE_KEY": Object {
              "total": 75,
            },
          },
          "selected_offer": Object {
            "cargo": Object {},
            "customs": Object {
              "hasUnknown": false,
              "val": 12,
            },
            "insurance": Object {
              "val": 5,
            },
            "total": Object {
              "value": 87,
            },
          },
          "service_level": "standard",
          "status": "finished",
          "total_goods_value": Object {
            "currency": "USD",
            "value": 150000,
          },
          "total_price": Object {
            "currency": "USD",
            "value": 137550,
          },
          "trucking": Object {
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "on_carriage": Object {
              "trucking_time_in_seconds": 28,
            },
            "pre_carriage": Object {
              "trucking_time_in_seconds": 55,
            },
          },
          "updated_at": "2018-11-01T18:14:33z",
        }
      }
      shipmentData={
        Object {
          "addons": Object {
            "customs_export_paper": true,
          },
          "addresses": Object {
            "destination": Object {
              "city": "BAR_CITY",
              "country": "China",
              "street": "BAR_STREET",
              "street_number": 9,
              "zip_code": 845321,
            },
            "endHub": "FOO_END_HUB",
            "origin": Object {
              "city": "FOO_CITY",
              "country": "Germany",
              "street": "FOO_STREET",
              "street_number": 7,
              "zip_code": 21177,
            },
            "startHub": "FOO_START_HUB",
          },
          "aggregatedCargo": Object {
            "cargo_item_type_id": "foo",
            "chargeable_weight": 250,
            "dangerous_goods": false,
            "description": "FOO_CARGO_ITEM_DESCRIPTION",
            "gross_weight": 76,
            "height": 40,
            "hs_codes": Array [
              4,
            ],
            "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
            "id": 1,
            "key": "FOO_CARGO_ITEM_KEY",
            "length": 60,
            "payload_in_kg": 200,
            "quantity": 5,
            "stackable": true,
            "tare_weight": 20,
            "volume": 12,
            "weight": 220,
            "width": 10,
          },
          "cargoItemTypes": Object {
            "bar": Object {
              "description": "BAR_TYPE",
            },
            "foo": Object {
              "description": "FOO_TYPE",
            },
          },
          "cargoItems": Array [
            Object {
              "cargo_item_type_id": "foo",
              "chargeable_weight": 250,
              "dangerous_goods": false,
              "description": "FOO_CARGO_ITEM_DESCRIPTION",
              "gross_weight": 76,
              "height": 40,
              "hs_codes": Array [
                4,
              ],
              "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
              "id": 1,
              "key": "FOO_CARGO_ITEM_KEY",
              "length": 60,
              "payload_in_kg": 200,
              "quantity": 5,
              "stackable": true,
              "tare_weight": 20,
              "weight": 220,
              "width": 10,
            },
            Object {
              "cargo_item_type_id": "bar",
              "chargeable_weight": 150,
              "description": "BAR_CARGO_ITEM_DESCRIPTION",
              "height": 70,
              "hs_codes": Array [],
              "hs_text": "BAR_CARGO_ITEM_HS_TEXT",
              "id": 2,
              "key": "BAR_CARGO_ITEM_KEY",
              "length": 50,
              "payload_in_kg": 100,
              "quantity": 7,
              "stackable": false,
              "width": 100,
            },
          ],
          "contacts": Array [],
          "containers": Array [
            Object {
              "cargo_group_id": 4,
              "customs_text": "FOO_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 130,
              "hs_codes": Array [],
              "id": 1,
              "payload_in_kg": 200,
              "quantity": 5,
              "size_class": "FOO_CONTAINER_SIZE_CLASS",
              "tare_weight": 50,
            },
            Object {
              "cargo_group_id": 5,
              "customs_text": "BAR_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 457,
              "hs_codes": Array [],
              "id": 2,
              "payload_in_kg": 450,
              "quantity": 7,
              "size_class": "BAR_CONTAINER_SIZE_CLASS",
              "tare_weight": 7,
            },
          ],
          "customs": Object {
            "export": Object {
              "total": Object {
                "currency": "EUR",
                "value": 100,
              },
            },
            "import": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
            "total": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
          },
          "dangerousGoods": false,
          "documents": Array [
            Object {
              "approved": "approved",
              "created_at": "2018-12-01T18:14:33z",
              "doc_type": "FOO_DOC_TYPE",
              "signed_url": "FOO_SIGNED_URL",
              "text": "FOO_DOCUMENT_TEXT",
            },
            Object {
              "approved": "rejected",
              "created_at": "2018-12-02T11:14:33z",
              "doc_type": "BAR_DOC_TYPE",
              "signed_url": "BAR_SIGNED_URL",
              "text": "BAR_DOCUMENT_TEXT",
            },
          ],
          "hubs": Object {
            "endHub": "END_HUB",
            "startHub": "START_HUB",
          },
          "notifyees": Array [
            Object {
              "first_name": "John",
              "last_name": "Doe",
            },
            Object {
              "first_name": "Robert",
              "last_name": "Plant",
            },
            Object {
              "first_name": "James",
              "last_name": "Brows",
            },
          ],
          "results": Array [
            Object {
              "meta": Object {
                "carrier_name": "FOO_CARRIER_NAME",
                "destination_hub": Object {
                  "name": "Shanghai",
                },
                "mode_of_transport": "air",
                "origin_hub": Object {
                  "name": "Gothenburg",
                },
                "pricing_range_data": Object {
                  "fcl_20": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "750.0",
                      "range": Array [],
                      "rate": "750.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "750.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40_hq": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                },
                "service_level": "FOO_SERVICE_LEVEL",
                "service_level_count": 1,
                "transit_time": 1,
              },
              "quote": Object {
                "total": Object {
                  "value": 467,
                },
              },
              "schedules": Array [
                Object {
                  "closing_date": "16-09-2018",
                  "eta": "10-09-2018",
                  "etd": "15-09-2018",
                },
              ],
            },
            Object {
              "meta": Object {
                "mode_of_transport": "ocean",
                "transit_time": 2,
              },
              "quote": Object {
                "total": Object {
                  "value": 309,
                },
              },
            },
          ],
          "routes": Array [],
          "schedule": Object {
            "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
          },
          "schedules": Array [
            Object {
              "closing_date": "2018-11-01T11:14:33z",
              "eta": "2018-11-18T11:14:33z",
              "etd": "2018-11-13T11:14:33z",
              "hub_route_key": "AIR_HUB_ROUTE_KEY",
              "mode_of_transport": "air",
            },
            Object {
              "closing_date": "2018-11-05T11:14:33z",
              "destination_hub": Object {},
              "eta": "2018-11-22T11:14:33z",
              "etd": "2018-11-17T11:14:33z",
              "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
              "mode_of_transport": "ocean",
              "origin_hub": Object {},
              "total_price": Object {
                "currency": "EUR",
                "value": 112,
              },
            },
            Object {
              "closing_date": "2018-11-03T11:14:33z",
              "eta": "2018-11-20T11:14:33z",
              "etd": "2018-11-15T11:14:33z",
              "hub_route_key": "RAIL_HUB_ROUTE_KEY",
              "mode_of_transport": "rail",
            },
            Object {
              "closing_date": "2018-11-02T11:14:33z",
              "eta": "2018-11-19T11:14:33z",
              "etd": "2018-11-14T11:14:33z",
              "hub_route_key": "TRUCK_HUB_ROUTE_KEY",
              "mode_of_transport": "truck",
            },
          ],
          "shipment": Object {
            "booking_placed_at": "2018-11-01T11:14:33z",
            "cargo_count": 2,
            "cargo_items_attributes": Array [],
            "cargo_notes": "SHIPMENT_CARGO_NOTES",
            "cargo_units": Array [
              Object {
                "height": 67,
                "length": 63,
                "quantity": 2,
                "width": 107,
              },
            ],
            "clientName": "SHIPMENT_CLIENT_NAME",
            "containers_attributes": Array [],
            "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
            "destination": Object {
              "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
            },
            "destination_hub": Object {
              "name": "SHIPMENT_DESTINATION_HUB",
              "startHub": Object {
                "address": Object {},
              },
            },
            "direction": "import",
            "eori": 1234,
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "id": 654,
            "imc_reference": "SHIPMENT_IMC_REFERENCE",
            "incoterm": "SHIPMENT_INCOTERM",
            "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
            "load_type": "cargo_item",
            "notes": "SHIPMENT_NOTES",
            "origin": Object {
              "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
            },
            "origin_hub": Object {
              "name": "SHIPMENT_ORIGIN_HUB",
              "startHub": Object {
                "address": Object {
                  "city": "FOO_ADDRESS_CITY",
                  "country": "FOO_ADDRESS_COUNTRY",
                  "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                  "id": 246,
                  "primary": true,
                  "street": "FOO_ADDRESS_STREET",
                  "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                  "user": Object {
                    "primary": true,
                  },
                  "zipCode": "FOO_ADDRESS_ZIP_CODE",
                },
              },
            },
            "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
            "planned_eta": "2018-12-01T18:14:33z",
            "planned_etd": "2018-11-12T12:37:08z",
            "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
            "planned_pickup_date": "2018-12-08T04:30:08z",
            "schedule_set": Array [
              Object {
                "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
              },
            ],
            "schedules_charges": Object {
              "AIR_HUB_ROUTE_KEY": Object {
                "total": 200,
              },
              "OCEAN_HUB_ROUTE_KEY": Object {
                "total": 40,
              },
              "RAIL_HUB_ROUTE_KEY": Object {
                "total": 125,
              },
              "TRUCK_HUB_ROUTE_KEY": Object {
                "total": 75,
              },
            },
            "selected_offer": Object {
              "cargo": Object {},
              "customs": Object {
                "hasUnknown": false,
                "val": 12,
              },
              "insurance": Object {
                "val": 5,
              },
              "total": Object {
                "value": 87,
              },
            },
            "service_level": "standard",
            "status": "finished",
            "total_goods_value": Object {
              "currency": "USD",
              "value": 150000,
            },
            "total_price": Object {
              "currency": "USD",
              "value": 137550,
            },
            "trucking": Object {
              "has_on_carriage": false,
              "has_pre_carriage": false,
              "on_carriage": Object {
                "trucking_time_in_seconds": 28,
              },
              "pre_carriage": Object {
                "trucking_time_in_seconds": 55,
              },
            },
            "updated_at": "2018-11-01T18:14:33z",
          },
        }
      }
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
      totalGoodsValue={
        Object {
          "value": 11,
        }
      }
    />
    <InsuranceSelection
      handleInsurance={[Function]}
      insuranceView={true}
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
    />
  </div>
</div>
`;

exports[`state.showModal is true 1`] = `
<div
  className="flex-100 layout-row layout-wrap padd_top"
  name="cargoDetailsBox"
>
  <Modal
    classNames=""
    component={
      <div
        className="flex-100 layout-wrap layout-row"
      >
        <p>
          Incoterms are internationally accepted commercial terms defining the respective roles of the buyer and seller in the arrangement of transportation and other responsibilities, and clarify when the ownership of the merchandise takes place. They are used in conjunction with a sales agreement or other method of transacting the sale. Below is an example of how INCO Terms work in action. The definitions provided here are the most common uses of each term, but are not the only way these terms are used. Pay close attention to the location listed for each term, as this indicates where payment details change from Shipper to Consignee.
        </p>
        <div>
          <div
            className="flex-70 incoterm_row"
          >
            <h4
              style={
                Object {
                  "color": "#333",
                }
              }
            >
              EXW (Ex Works)
            </h4>
            <p>
              Factory, mill, warehouse: your door
            </p>
            <p
              className="incoterm_desc"
            >
              Title and risk pass to buyer including payment of all transportation and insurance cost from the seller's door. Used for any mode of transportation.
            </p>
          </div>
          <div
            className="flex-70 incoterm_row"
          >
            <h4
              style={
                Object {
                  "color": "#333",
                }
              }
            >
              FCA (Free Carrier)
            </h4>
            <p>
              Pick a place after your origin to start
            </p>
            <p
              className="incoterm_desc"
            >
              Title and risk pass to buyer including transportation and insurance cost when the seller delivers goods cleared for export to the carrier. Seller is obligated to load the goods on the Buyer's collecting vehicle; it is the Buyer's obligation to receive the Seller's arriving vehicle unloaded.
            </p>
          </div>
          <div
            className="flex-70 incoterm_row"
          >
            <h4
              style={
                Object {
                  "color": "#333",
                }
              }
            >
              FAS (Free Alongside Ship)
            </h4>
            <p>
              Port, after all origin port charges
            </p>
            <p
              className="incoterm_desc"
            >
              Title and risk pass to buyer including payment of all transportation and insurance cost once delivered alongside ship by the seller. Used for sea or inland waterway transportation. The export clearance obligation rests with the seller.
            </p>
          </div>
          <div
            className="flex-70 incoterm_row"
          >
            <h4
              style={
                Object {
                  "color": "#333",
                }
              }
            >
              FOB (Free On Board)
            </h4>
            <p>
              Port-same as FAS
            </p>
            <p
              className="incoterm_desc"
            >
              Risk pass to buyer including payment of all transportation and insurance cost once delivered on board the ship by the seller. Used for sea or inland waterway transportation.
            </p>
          </div>
          <div
            className="flex-70 incoterm_row"
          >
            <h4
              style={
                Object {
                  "color": "#333",
                }
              }
            >
              CFR (Cost and Freight)
            </h4>
            <p>
              Destination port-paid to arrival at destination port
            </p>
            <p
              className="incoterm_desc"
            >
              Title, risk and insurance cost pass to buyer when delivered on board the ship by seller who pays the transportation cost to the destination port. Used for sea or inland waterway transportation.
            </p>
          </div>
          <div
            className="flex-70 incoterm_row"
          >
            <h4
              style={
                Object {
                  "color": "#333",
                }
              }
            >
              CIF (Cost, Insurance and Freight) 
            </h4>
            <p>
              Destination port-same as CFR, but includes insurance
            </p>
            <p
              className="incoterm_desc"
            >
              Title and risk pass to buyer when delivered on board the ship by seller who pays transportation and insurance cost to destination port. Used for sea or inland waterway transportation.
            </p>
          </div>
          <div
            className="flex-70 incoterm_row"
          >
            <h4
              style={
                Object {
                  "color": "#333",
                }
              }
            >
              CPT (Carriage Paid To)
            </h4>
            <p>
              Place at destination-includes all destination port charges
            </p>
            <p
              className="incoterm_desc"
            >
              Title, risk and insurance cost pass to buyer when delivered to carrier or seller who pays transportation and insurance cost to destination. Used for any mode of transportation.
            </p>
          </div>
          <div
            className="flex-70 incoterm_row"
          >
            <h4
              style={
                Object {
                  "color": "#333",
                }
              }
            >
              CIP (Carriage and Insurance Paid To)
            </h4>
            <p>
              Place at destination-same as CPT, but includes insurance
            </p>
            <p
              className="incoterm_desc"
            >
              Title and risk pass to buyer when delivered to carrier by seller who pays transportation and insurance cost to destination. Used for any mode of transportation.
            </p>
          </div>
          <div
            className="flex-70 incoterm_row"
          >
            <h4
              style={
                Object {
                  "color": "#333",
                }
              }
            >
              DAF (Delivered to Frontier)
            </h4>
            <p>
              Border of country-same as paid by seller to border-all other charges to buyer
            </p>
            <p
              className="incoterm_desc"
            >
              Title, risk and responsibility for import clearance pass to buyer when delivered to named border point by seller. Used for any mode of transportation. (border of country-same as paid by seller to border-all other charges to buyer) Title, risk and responsibility for import clearance pass to buyer when delivered to named border point by seller. Used for any mode of transportation.
            </p>
          </div>
          <div
            className="flex-70 incoterm_row"
          >
            <h4
              style={
                Object {
                  "color": "#333",
                }
              }
            >
              DES (Delivered Ex Ship)
            </h4>
            <p>
              On board ship to destination port
            </p>
            <p
              className="incoterm_desc"
            >
              Title, risk, responsibility for vessel discharge and import clearance pass to buyer when seller delivers goods on board the ship to destination port. Used for sea or inland waterway transportation.
            </p>
          </div>
          <div
            className="flex-70 incoterm_row"
          >
            <h4
              style={
                Object {
                  "color": "#333",
                }
              }
            >
              DEQ (Delivered Ex Quay i.e. Duty Paid)
            </h4>
            <p>
              Destination port-includes duties and taxes, but not destination charges or delivery
            </p>
            <p
              className="incoterm_desc"
            >
              Title and risk pass to buyer when delivered on board the ship at the destination point by the seller who delivers goods on dock at destination point cleared for import. Used for sea or inland waterway transportation.
            </p>
          </div>
          <div
            className="flex-70 incoterm_row"
          >
            <h4
              style={
                Object {
                  "color": "#333",
                }
              }
            >
              DDU (Delivered Duty Unpaid)
            </h4>
            <p>
              Consignee door-excluding duties and taxes
            </p>
            <p
              className="incoterm_desc"
            >
               Title, risk, and responsibility for vessel discharge and import clearance pass to buyer when seller delivers goods on board the ship to destination port. Used for sea or inland waterway transportation.
            </p>
          </div>
          <div
            className="flex-70 incoterm_row"
          >
            <h4
              style={
                Object {
                  "color": "#333",
                }
              }
            >
              DDP (Delivered Duty Paid)
            </h4>
            <p>
              Consignee door-includes all charges origin to destination
            </p>
            <p
              className="incoterm_desc"
            >
              Title and risk pass to buyer when seller delivers goods to named destination point cleared for import. Used for any mode of transportation.
            </p>
          </div>
        </div>
      </div>
    }
    flexOptions="flex-80"
    horizontalPadding="55px"
    maxWidth="70%"
    minHeight=""
    parentToggle={[Function]}
    showExit={true}
    verticalPadding="65px"
  />
  <div
    className="flex-100 layout-row layout-align-center"
  >
    <div
      className="flex-none content_width layout-row layout-wrap"
    >
      <div
        className="flex-100 layout-row layout-sm-wrap"
      >
        <div
          className="flex-50"
        >
          <div
            className="flex-100"
          >
            <div
              className="flex-100 layout-align-start-center layout-row"
            >
              <div
                className="flex-none"
              >
                <TextHeading
                  color="black"
                  fontWeight="normal"
                  size={2}
                  text="Cargo Details"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                />
              </div>
            </div>
             
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={3}
                text="Total value of goods"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap layout-align-start-start"
          >
            <div
              className="flex-100 layout-row layout-wrap"
            >
              <div
                className="flex-100 layout-row"
              >
                <div
                  className="flex-66 layout-row"
                >
                  <Formsy(FormsyInput)
                    className="flex-100 ccb_total_goods_value cargo_input "
                    errorMessageStyles={
                      Object {
                        "bottom": "-17px",
                        "fontSize": "13px",
                      }
                    }
                    innerRef={[Function]}
                    name="totalGoodsValue"
                    onBlur={[Function]}
                    required={3370}
                    submitAttempted={false}
                    type="number"
                    validationError=""
                    validationErrors={
                      Object {
                        "isDefaultRequiredValue": "Must be greater than 0",
                        "nonNegative": "Must be greater than 0",
                      }
                    }
                    validations={
                      Object {
                        "nonNegative": [Function],
                      }
                    }
                    value={11}
                    wrapperClassName="flex-100 wrapper_cargo_input"
                  />
                </div>
                <div
                  className="flex-33 layout-row"
                >
                  <NamedSelect
                    className="flex-100 ccb_currency"
                    clearable={false}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "EUR",
                          "value": "EUR",
                        },
                        Object {
                          "label": "AUD",
                          "value": "AUD",
                        },
                        Object {
                          "label": "BGN",
                          "value": "BGN",
                        },
                        Object {
                          "label": "BRL",
                          "value": "BRL",
                        },
                        Object {
                          "label": "CAD",
                          "value": "CAD",
                        },
                        Object {
                          "label": "CHF",
                          "value": "CHF",
                        },
                        Object {
                          "label": "CNY",
                          "value": "CNY",
                        },
                        Object {
                          "label": "CZK",
                          "value": "CZK",
                        },
                        Object {
                          "label": "DKK",
                          "value": "DKK",
                        },
                        Object {
                          "label": "GBP",
                          "value": "GBP",
                        },
                        Object {
                          "label": "HKD",
                          "value": "HKD",
                        },
                        Object {
                          "label": "HRK",
                          "value": "HRK",
                        },
                        Object {
                          "label": "HUF",
                          "value": "HUF",
                        },
                        Object {
                          "label": "IDR",
                          "value": "IDR",
                        },
                        Object {
                          "label": "ILS",
                          "value": "ILS",
                        },
                        Object {
                          "label": "INR",
                          "value": "INR",
                        },
                        Object {
                          "label": "JPY",
                          "value": "JPY",
                        },
                        Object {
                          "label": "KRW",
                          "value": "KRW",
                        },
                        Object {
                          "label": "MXN",
                          "value": "MXN",
                        },
                        Object {
                          "label": "MYR",
                          "value": "MYR",
                        },
                        Object {
                          "label": "NOK",
                          "value": "NOK",
                        },
                        Object {
                          "label": "NZD",
                          "value": "NZD",
                        },
                        Object {
                          "label": "PHP",
                          "value": "PHP",
                        },
                        Object {
                          "label": "PLN",
                          "value": "PLN",
                        },
                        Object {
                          "label": "RON",
                          "value": "RON",
                        },
                        Object {
                          "label": "RUB",
                          "value": "RUB",
                        },
                        Object {
                          "label": "SEK",
                          "value": "SEK",
                        },
                        Object {
                          "label": "SGD",
                          "value": "SGD",
                        },
                        Object {
                          "label": "THB",
                          "value": "THB",
                        },
                        Object {
                          "label": "TRY",
                          "value": "TRY",
                        },
                        Object {
                          "label": "USD",
                          "value": "USD",
                        },
                        Object {
                          "label": "ZAR",
                          "value": "ZAR",
                        },
                      ]
                    }
                    value={
                      Object {
                        "label": "EUR",
                        "value": "EUR",
                      }
                    }
                  />
                </div>
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-wrap"
              id="cargo_notes"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Description of Goods (HS Codes if available)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 ccb_description_goods cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="cargoNotes"
                  onBlur={[Function]}
                  required="MANDATORY_FIELDS_DESCRIPTION"
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={
                    Object {
                      "isDefaultRequiredValue": "Must not be empty",
                    }
                  }
                  validations={null}
                  value="CARGO_NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <h4
                    className="no_m flex-30"
                  >
                    Incoterms
                     
                    <span>
                      (Optional)
                    </span>
                  </h4>
                  <p
                    className="pointy flex-none incoterm_info"
                    onClick={[Function]}
                  >
                    More info
                  </p>
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="incotermText"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value=""
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
          </div>
        </div>
        <div
          className="flex-50 padding_left offset-gt-sm-5 layout-row layout-wrap layout-align-start-start"
        >
          <div
            className="flex-100 layout-align-start-center layout-row"
          >
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={2}
                text="Shipment Documents "
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
              <br />
              if available
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="packing_sheet"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Packing List"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="packing_sheet"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="commercial_invoice"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Commercial Invoice"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="commercial_invoice"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-align-start-start layout-wrap"
          >
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Notes (Optional)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="notes"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value="NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-gt-sm-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className=" flex-100 layout-row layout-align-start-start-space-around layout-wrap"
              >
                <DocumentsMultiForm
                  deleteFn={[Function]}
                  dispatchFn={[Function]}
                  documents={Array []}
                  t={[Function]}
                  text="Miscellaneous"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                  tooltip=""
                  type="miscellaneous"
                  uploadFn={null}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div
    className="insurance_customs_sec flex-100 layout-row layout-wrap layout-align-center"
  >
    <CustomsClearance
      customs={
        Object {
          "export": Object {
            "total": Object {
              "currency": "EUR",
              "value": 100,
            },
          },
          "import": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
          "total": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
        }
      }
      customsData={
        Object {
          "export": Object {
            "bool": true,
          },
          "import": Object {
            "bool": true,
            "total": Object {
              "currency": "USD",
            },
          },
          "val": "FOO_CUSTOM_DATA",
        }
      }
      deleteDoc={[Function]}
      dispatchFn={[Function]}
      documents={
        Array [
          Object {
            "approved": "approved",
            "created_at": "2018-12-01T18:14:33z",
            "doc_type": "FOO_DOC_TYPE",
            "signed_url": "FOO_SIGNED_URL",
            "text": "FOO_DOCUMENT_TEXT",
          },
          Object {
            "approved": "rejected",
            "created_at": "2018-12-02T11:14:33z",
            "doc_type": "BAR_DOC_TYPE",
            "signed_url": "BAR_SIGNED_URL",
            "text": "BAR_DOCUMENT_TEXT",
          },
        ]
      }
      eori="EORI"
      handleChange={[Function]}
      setCustomsFee={[Function]}
      shipment={
        Object {
          "booking_placed_at": "2018-11-01T11:14:33z",
          "cargo_count": 2,
          "cargo_items_attributes": Array [],
          "cargo_notes": "SHIPMENT_CARGO_NOTES",
          "cargo_units": Array [
            Object {
              "height": 67,
              "length": 63,
              "quantity": 2,
              "width": 107,
            },
          ],
          "clientName": "SHIPMENT_CLIENT_NAME",
          "containers_attributes": Array [],
          "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
          "destination": Object {
            "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
          },
          "destination_hub": Object {
            "name": "SHIPMENT_DESTINATION_HUB",
            "startHub": Object {
              "address": Object {},
            },
          },
          "direction": "import",
          "eori": 1234,
          "has_on_carriage": false,
          "has_pre_carriage": false,
          "id": 654,
          "imc_reference": "SHIPMENT_IMC_REFERENCE",
          "incoterm": "SHIPMENT_INCOTERM",
          "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
          "load_type": "cargo_item",
          "notes": "SHIPMENT_NOTES",
          "origin": Object {
            "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
          },
          "origin_hub": Object {
            "name": "SHIPMENT_ORIGIN_HUB",
            "startHub": Object {
              "address": Object {
                "city": "FOO_ADDRESS_CITY",
                "country": "FOO_ADDRESS_COUNTRY",
                "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                "id": 246,
                "primary": true,
                "street": "FOO_ADDRESS_STREET",
                "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                "user": Object {
                  "primary": true,
                },
                "zipCode": "FOO_ADDRESS_ZIP_CODE",
              },
            },
          },
          "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
          "planned_eta": "2018-12-01T18:14:33z",
          "planned_etd": "2018-11-12T12:37:08z",
          "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
          "planned_pickup_date": "2018-12-08T04:30:08z",
          "schedule_set": Array [
            Object {
              "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
            },
          ],
          "schedules_charges": Object {
            "AIR_HUB_ROUTE_KEY": Object {
              "total": 200,
            },
            "OCEAN_HUB_ROUTE_KEY": Object {
              "total": 40,
            },
            "RAIL_HUB_ROUTE_KEY": Object {
              "total": 125,
            },
            "TRUCK_HUB_ROUTE_KEY": Object {
              "total": 75,
            },
          },
          "selected_offer": Object {
            "cargo": Object {},
            "customs": Object {
              "hasUnknown": false,
              "val": 12,
            },
            "insurance": Object {
              "val": 5,
            },
            "total": Object {
              "value": 87,
            },
          },
          "service_level": "standard",
          "status": "finished",
          "total_goods_value": Object {
            "currency": "USD",
            "value": 150000,
          },
          "total_price": Object {
            "currency": "USD",
            "value": 137550,
          },
          "trucking": Object {
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "on_carriage": Object {
              "trucking_time_in_seconds": 28,
            },
            "pre_carriage": Object {
              "trucking_time_in_seconds": 55,
            },
          },
          "updated_at": "2018-11-01T18:14:33z",
        }
      }
      shipmentData={
        Object {
          "addons": Object {
            "customs_export_paper": true,
          },
          "addresses": Object {
            "destination": Object {
              "city": "BAR_CITY",
              "country": "China",
              "street": "BAR_STREET",
              "street_number": 9,
              "zip_code": 845321,
            },
            "endHub": "FOO_END_HUB",
            "origin": Object {
              "city": "FOO_CITY",
              "country": "Germany",
              "street": "FOO_STREET",
              "street_number": 7,
              "zip_code": 21177,
            },
            "startHub": "FOO_START_HUB",
          },
          "aggregatedCargo": Object {
            "cargo_item_type_id": "foo",
            "chargeable_weight": 250,
            "dangerous_goods": false,
            "description": "FOO_CARGO_ITEM_DESCRIPTION",
            "gross_weight": 76,
            "height": 40,
            "hs_codes": Array [
              4,
            ],
            "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
            "id": 1,
            "key": "FOO_CARGO_ITEM_KEY",
            "length": 60,
            "payload_in_kg": 200,
            "quantity": 5,
            "stackable": true,
            "tare_weight": 20,
            "volume": 12,
            "weight": 220,
            "width": 10,
          },
          "cargoItemTypes": Object {
            "bar": Object {
              "description": "BAR_TYPE",
            },
            "foo": Object {
              "description": "FOO_TYPE",
            },
          },
          "cargoItems": Array [
            Object {
              "cargo_item_type_id": "foo",
              "chargeable_weight": 250,
              "dangerous_goods": false,
              "description": "FOO_CARGO_ITEM_DESCRIPTION",
              "gross_weight": 76,
              "height": 40,
              "hs_codes": Array [
                4,
              ],
              "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
              "id": 1,
              "key": "FOO_CARGO_ITEM_KEY",
              "length": 60,
              "payload_in_kg": 200,
              "quantity": 5,
              "stackable": true,
              "tare_weight": 20,
              "weight": 220,
              "width": 10,
            },
            Object {
              "cargo_item_type_id": "bar",
              "chargeable_weight": 150,
              "description": "BAR_CARGO_ITEM_DESCRIPTION",
              "height": 70,
              "hs_codes": Array [],
              "hs_text": "BAR_CARGO_ITEM_HS_TEXT",
              "id": 2,
              "key": "BAR_CARGO_ITEM_KEY",
              "length": 50,
              "payload_in_kg": 100,
              "quantity": 7,
              "stackable": false,
              "width": 100,
            },
          ],
          "contacts": Array [],
          "containers": Array [
            Object {
              "cargo_group_id": 4,
              "customs_text": "FOO_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 130,
              "hs_codes": Array [],
              "id": 1,
              "payload_in_kg": 200,
              "quantity": 5,
              "size_class": "FOO_CONTAINER_SIZE_CLASS",
              "tare_weight": 50,
            },
            Object {
              "cargo_group_id": 5,
              "customs_text": "BAR_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 457,
              "hs_codes": Array [],
              "id": 2,
              "payload_in_kg": 450,
              "quantity": 7,
              "size_class": "BAR_CONTAINER_SIZE_CLASS",
              "tare_weight": 7,
            },
          ],
          "customs": Object {
            "export": Object {
              "total": Object {
                "currency": "EUR",
                "value": 100,
              },
            },
            "import": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
            "total": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
          },
          "dangerousGoods": false,
          "documents": Array [
            Object {
              "approved": "approved",
              "created_at": "2018-12-01T18:14:33z",
              "doc_type": "FOO_DOC_TYPE",
              "signed_url": "FOO_SIGNED_URL",
              "text": "FOO_DOCUMENT_TEXT",
            },
            Object {
              "approved": "rejected",
              "created_at": "2018-12-02T11:14:33z",
              "doc_type": "BAR_DOC_TYPE",
              "signed_url": "BAR_SIGNED_URL",
              "text": "BAR_DOCUMENT_TEXT",
            },
          ],
          "hubs": Object {
            "endHub": "END_HUB",
            "startHub": "START_HUB",
          },
          "notifyees": Array [
            Object {
              "first_name": "John",
              "last_name": "Doe",
            },
            Object {
              "first_name": "Robert",
              "last_name": "Plant",
            },
            Object {
              "first_name": "James",
              "last_name": "Brows",
            },
          ],
          "results": Array [
            Object {
              "meta": Object {
                "carrier_name": "FOO_CARRIER_NAME",
                "destination_hub": Object {
                  "name": "Shanghai",
                },
                "mode_of_transport": "air",
                "origin_hub": Object {
                  "name": "Gothenburg",
                },
                "pricing_range_data": Object {
                  "fcl_20": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "750.0",
                      "range": Array [],
                      "rate": "750.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "750.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40_hq": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                },
                "service_level": "FOO_SERVICE_LEVEL",
                "service_level_count": 1,
                "transit_time": 1,
              },
              "quote": Object {
                "total": Object {
                  "value": 467,
                },
              },
              "schedules": Array [
                Object {
                  "closing_date": "16-09-2018",
                  "eta": "10-09-2018",
                  "etd": "15-09-2018",
                },
              ],
            },
            Object {
              "meta": Object {
                "mode_of_transport": "ocean",
                "transit_time": 2,
              },
              "quote": Object {
                "total": Object {
                  "value": 309,
                },
              },
            },
          ],
          "routes": Array [],
          "schedule": Object {
            "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
          },
          "schedules": Array [
            Object {
              "closing_date": "2018-11-01T11:14:33z",
              "eta": "2018-11-18T11:14:33z",
              "etd": "2018-11-13T11:14:33z",
              "hub_route_key": "AIR_HUB_ROUTE_KEY",
              "mode_of_transport": "air",
            },
            Object {
              "closing_date": "2018-11-05T11:14:33z",
              "destination_hub": Object {},
              "eta": "2018-11-22T11:14:33z",
              "etd": "2018-11-17T11:14:33z",
              "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
              "mode_of_transport": "ocean",
              "origin_hub": Object {},
              "total_price": Object {
                "currency": "EUR",
                "value": 112,
              },
            },
            Object {
              "closing_date": "2018-11-03T11:14:33z",
              "eta": "2018-11-20T11:14:33z",
              "etd": "2018-11-15T11:14:33z",
              "hub_route_key": "RAIL_HUB_ROUTE_KEY",
              "mode_of_transport": "rail",
            },
            Object {
              "closing_date": "2018-11-02T11:14:33z",
              "eta": "2018-11-19T11:14:33z",
              "etd": "2018-11-14T11:14:33z",
              "hub_route_key": "TRUCK_HUB_ROUTE_KEY",
              "mode_of_transport": "truck",
            },
          ],
          "shipment": Object {
            "booking_placed_at": "2018-11-01T11:14:33z",
            "cargo_count": 2,
            "cargo_items_attributes": Array [],
            "cargo_notes": "SHIPMENT_CARGO_NOTES",
            "cargo_units": Array [
              Object {
                "height": 67,
                "length": 63,
                "quantity": 2,
                "width": 107,
              },
            ],
            "clientName": "SHIPMENT_CLIENT_NAME",
            "containers_attributes": Array [],
            "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
            "destination": Object {
              "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
            },
            "destination_hub": Object {
              "name": "SHIPMENT_DESTINATION_HUB",
              "startHub": Object {
                "address": Object {},
              },
            },
            "direction": "import",
            "eori": 1234,
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "id": 654,
            "imc_reference": "SHIPMENT_IMC_REFERENCE",
            "incoterm": "SHIPMENT_INCOTERM",
            "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
            "load_type": "cargo_item",
            "notes": "SHIPMENT_NOTES",
            "origin": Object {
              "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
            },
            "origin_hub": Object {
              "name": "SHIPMENT_ORIGIN_HUB",
              "startHub": Object {
                "address": Object {
                  "city": "FOO_ADDRESS_CITY",
                  "country": "FOO_ADDRESS_COUNTRY",
                  "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                  "id": 246,
                  "primary": true,
                  "street": "FOO_ADDRESS_STREET",
                  "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                  "user": Object {
                    "primary": true,
                  },
                  "zipCode": "FOO_ADDRESS_ZIP_CODE",
                },
              },
            },
            "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
            "planned_eta": "2018-12-01T18:14:33z",
            "planned_etd": "2018-11-12T12:37:08z",
            "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
            "planned_pickup_date": "2018-12-08T04:30:08z",
            "schedule_set": Array [
              Object {
                "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
              },
            ],
            "schedules_charges": Object {
              "AIR_HUB_ROUTE_KEY": Object {
                "total": 200,
              },
              "OCEAN_HUB_ROUTE_KEY": Object {
                "total": 40,
              },
              "RAIL_HUB_ROUTE_KEY": Object {
                "total": 125,
              },
              "TRUCK_HUB_ROUTE_KEY": Object {
                "total": 75,
              },
            },
            "selected_offer": Object {
              "cargo": Object {},
              "customs": Object {
                "hasUnknown": false,
                "val": 12,
              },
              "insurance": Object {
                "val": 5,
              },
              "total": Object {
                "value": 87,
              },
            },
            "service_level": "standard",
            "status": "finished",
            "total_goods_value": Object {
              "currency": "USD",
              "value": 150000,
            },
            "total_price": Object {
              "currency": "USD",
              "value": 137550,
            },
            "trucking": Object {
              "has_on_carriage": false,
              "has_pre_carriage": false,
              "on_carriage": Object {
                "trucking_time_in_seconds": 28,
              },
              "pre_carriage": Object {
                "trucking_time_in_seconds": 55,
              },
            },
            "updated_at": "2018-11-01T18:14:33z",
          },
        }
      }
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
      totalGoodsValue={
        Object {
          "value": 11,
        }
      }
    />
    <InsuranceSelection
      handleInsurance={[Function]}
      insuranceView={null}
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
    />
  </div>
</div>
`;

exports[`tenant.scope.customs_export_paper is false 1`] = `
<div
  className="flex-100 layout-row layout-wrap padd_top"
  name="cargoDetailsBox"
>
  <div
    className="flex-100 layout-row layout-align-center"
  >
    <div
      className="flex-none content_width layout-row layout-wrap"
    >
      <div
        className="flex-100 layout-row layout-sm-wrap"
      >
        <div
          className="flex-50"
        >
          <div
            className="flex-100"
          >
            <div
              className="flex-100 layout-align-start-center layout-row"
            >
              <div
                className="flex-none"
              >
                <TextHeading
                  color="black"
                  fontWeight="normal"
                  size={2}
                  text="Cargo Details"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                />
              </div>
            </div>
             
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={3}
                text="Total value of goods"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap layout-align-start-start"
          >
            <div
              className="flex-100 layout-row layout-wrap"
            >
              <div
                className="flex-100 layout-row"
              >
                <div
                  className="flex-66 layout-row"
                >
                  <Formsy(FormsyInput)
                    className="flex-100 ccb_total_goods_value cargo_input "
                    errorMessageStyles={
                      Object {
                        "bottom": "-17px",
                        "fontSize": "13px",
                      }
                    }
                    innerRef={[Function]}
                    name="totalGoodsValue"
                    onBlur={[Function]}
                    required={3370}
                    submitAttempted={false}
                    type="number"
                    validationError=""
                    validationErrors={
                      Object {
                        "isDefaultRequiredValue": "Must be greater than 0",
                        "nonNegative": "Must be greater than 0",
                      }
                    }
                    validations={
                      Object {
                        "nonNegative": [Function],
                      }
                    }
                    value={11}
                    wrapperClassName="flex-100 wrapper_cargo_input"
                  />
                </div>
                <div
                  className="flex-33 layout-row"
                >
                  <NamedSelect
                    className="flex-100 ccb_currency"
                    clearable={false}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "EUR",
                          "value": "EUR",
                        },
                        Object {
                          "label": "AUD",
                          "value": "AUD",
                        },
                        Object {
                          "label": "BGN",
                          "value": "BGN",
                        },
                        Object {
                          "label": "BRL",
                          "value": "BRL",
                        },
                        Object {
                          "label": "CAD",
                          "value": "CAD",
                        },
                        Object {
                          "label": "CHF",
                          "value": "CHF",
                        },
                        Object {
                          "label": "CNY",
                          "value": "CNY",
                        },
                        Object {
                          "label": "CZK",
                          "value": "CZK",
                        },
                        Object {
                          "label": "DKK",
                          "value": "DKK",
                        },
                        Object {
                          "label": "GBP",
                          "value": "GBP",
                        },
                        Object {
                          "label": "HKD",
                          "value": "HKD",
                        },
                        Object {
                          "label": "HRK",
                          "value": "HRK",
                        },
                        Object {
                          "label": "HUF",
                          "value": "HUF",
                        },
                        Object {
                          "label": "IDR",
                          "value": "IDR",
                        },
                        Object {
                          "label": "ILS",
                          "value": "ILS",
                        },
                        Object {
                          "label": "INR",
                          "value": "INR",
                        },
                        Object {
                          "label": "JPY",
                          "value": "JPY",
                        },
                        Object {
                          "label": "KRW",
                          "value": "KRW",
                        },
                        Object {
                          "label": "MXN",
                          "value": "MXN",
                        },
                        Object {
                          "label": "MYR",
                          "value": "MYR",
                        },
                        Object {
                          "label": "NOK",
                          "value": "NOK",
                        },
                        Object {
                          "label": "NZD",
                          "value": "NZD",
                        },
                        Object {
                          "label": "PHP",
                          "value": "PHP",
                        },
                        Object {
                          "label": "PLN",
                          "value": "PLN",
                        },
                        Object {
                          "label": "RON",
                          "value": "RON",
                        },
                        Object {
                          "label": "RUB",
                          "value": "RUB",
                        },
                        Object {
                          "label": "SEK",
                          "value": "SEK",
                        },
                        Object {
                          "label": "SGD",
                          "value": "SGD",
                        },
                        Object {
                          "label": "THB",
                          "value": "THB",
                        },
                        Object {
                          "label": "TRY",
                          "value": "TRY",
                        },
                        Object {
                          "label": "USD",
                          "value": "USD",
                        },
                        Object {
                          "label": "ZAR",
                          "value": "ZAR",
                        },
                      ]
                    }
                    value={
                      Object {
                        "label": "EUR",
                        "value": "EUR",
                      }
                    }
                  />
                </div>
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-wrap"
              id="cargo_notes"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Description of Goods (HS Codes if available)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 ccb_description_goods cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="cargoNotes"
                  onBlur={[Function]}
                  required="MANDATORY_FIELDS_DESCRIPTION"
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={
                    Object {
                      "isDefaultRequiredValue": "Must not be empty",
                    }
                  }
                  validations={null}
                  value="CARGO_NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <h4
                    className="no_m flex-30"
                  >
                    Incoterms
                     
                    <span>
                      (Optional)
                    </span>
                  </h4>
                  <p
                    className="pointy flex-none incoterm_info"
                    onClick={[Function]}
                  >
                    More info
                  </p>
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="incotermText"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value=""
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
          </div>
        </div>
        <div
          className="flex-50 padding_left offset-gt-sm-5 layout-row layout-wrap layout-align-start-start"
        >
          <div
            className="flex-100 layout-align-start-center layout-row"
          >
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={2}
                text="Shipment Documents "
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
              <br />
              if available
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="packing_sheet"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Packing List"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="packing_sheet"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="commercial_invoice"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Commercial Invoice"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="commercial_invoice"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-align-start-start layout-wrap"
          >
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Notes (Optional)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="notes"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value="NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-gt-sm-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className=" flex-100 layout-row layout-align-start-start-space-around layout-wrap"
              >
                <DocumentsMultiForm
                  deleteFn={[Function]}
                  dispatchFn={[Function]}
                  documents={Array []}
                  t={[Function]}
                  text="Miscellaneous"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                  tooltip=""
                  type="miscellaneous"
                  uploadFn={null}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div
    className="insurance_customs_sec flex-100 layout-row layout-wrap layout-align-center"
  >
    <CustomsClearance
      customs={
        Object {
          "export": Object {
            "total": Object {
              "currency": "EUR",
              "value": 100,
            },
          },
          "import": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
          "total": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
        }
      }
      customsData={
        Object {
          "export": Object {
            "bool": true,
          },
          "import": Object {
            "bool": true,
            "total": Object {
              "currency": "USD",
            },
          },
          "val": "FOO_CUSTOM_DATA",
        }
      }
      deleteDoc={[Function]}
      dispatchFn={[Function]}
      documents={
        Array [
          Object {
            "approved": "approved",
            "created_at": "2018-12-01T18:14:33z",
            "doc_type": "FOO_DOC_TYPE",
            "signed_url": "FOO_SIGNED_URL",
            "text": "FOO_DOCUMENT_TEXT",
          },
          Object {
            "approved": "rejected",
            "created_at": "2018-12-02T11:14:33z",
            "doc_type": "BAR_DOC_TYPE",
            "signed_url": "BAR_SIGNED_URL",
            "text": "BAR_DOCUMENT_TEXT",
          },
        ]
      }
      eori="EORI"
      handleChange={[Function]}
      setCustomsFee={[Function]}
      shipment={
        Object {
          "booking_placed_at": "2018-11-01T11:14:33z",
          "cargo_count": 2,
          "cargo_items_attributes": Array [],
          "cargo_notes": "SHIPMENT_CARGO_NOTES",
          "cargo_units": Array [
            Object {
              "height": 67,
              "length": 63,
              "quantity": 2,
              "width": 107,
            },
          ],
          "clientName": "SHIPMENT_CLIENT_NAME",
          "containers_attributes": Array [],
          "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
          "destination": Object {
            "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
          },
          "destination_hub": Object {
            "name": "SHIPMENT_DESTINATION_HUB",
            "startHub": Object {
              "address": Object {},
            },
          },
          "direction": "import",
          "eori": 1234,
          "has_on_carriage": false,
          "has_pre_carriage": false,
          "id": 654,
          "imc_reference": "SHIPMENT_IMC_REFERENCE",
          "incoterm": "SHIPMENT_INCOTERM",
          "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
          "load_type": "cargo_item",
          "notes": "SHIPMENT_NOTES",
          "origin": Object {
            "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
          },
          "origin_hub": Object {
            "name": "SHIPMENT_ORIGIN_HUB",
            "startHub": Object {
              "address": Object {
                "city": "FOO_ADDRESS_CITY",
                "country": "FOO_ADDRESS_COUNTRY",
                "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                "id": 246,
                "primary": true,
                "street": "FOO_ADDRESS_STREET",
                "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                "user": Object {
                  "primary": true,
                },
                "zipCode": "FOO_ADDRESS_ZIP_CODE",
              },
            },
          },
          "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
          "planned_eta": "2018-12-01T18:14:33z",
          "planned_etd": "2018-11-12T12:37:08z",
          "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
          "planned_pickup_date": "2018-12-08T04:30:08z",
          "schedule_set": Array [
            Object {
              "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
            },
          ],
          "schedules_charges": Object {
            "AIR_HUB_ROUTE_KEY": Object {
              "total": 200,
            },
            "OCEAN_HUB_ROUTE_KEY": Object {
              "total": 40,
            },
            "RAIL_HUB_ROUTE_KEY": Object {
              "total": 125,
            },
            "TRUCK_HUB_ROUTE_KEY": Object {
              "total": 75,
            },
          },
          "selected_offer": Object {
            "cargo": Object {},
            "customs": Object {
              "hasUnknown": false,
              "val": 12,
            },
            "insurance": Object {
              "val": 5,
            },
            "total": Object {
              "value": 87,
            },
          },
          "service_level": "standard",
          "status": "finished",
          "total_goods_value": Object {
            "currency": "USD",
            "value": 150000,
          },
          "total_price": Object {
            "currency": "USD",
            "value": 137550,
          },
          "trucking": Object {
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "on_carriage": Object {
              "trucking_time_in_seconds": 28,
            },
            "pre_carriage": Object {
              "trucking_time_in_seconds": 55,
            },
          },
          "updated_at": "2018-11-01T18:14:33z",
        }
      }
      shipmentData={
        Object {
          "addons": Object {
            "customs_export_paper": true,
          },
          "addresses": Object {
            "destination": Object {
              "city": "BAR_CITY",
              "country": "China",
              "street": "BAR_STREET",
              "street_number": 9,
              "zip_code": 845321,
            },
            "endHub": "FOO_END_HUB",
            "origin": Object {
              "city": "FOO_CITY",
              "country": "Germany",
              "street": "FOO_STREET",
              "street_number": 7,
              "zip_code": 21177,
            },
            "startHub": "FOO_START_HUB",
          },
          "aggregatedCargo": Object {
            "cargo_item_type_id": "foo",
            "chargeable_weight": 250,
            "dangerous_goods": false,
            "description": "FOO_CARGO_ITEM_DESCRIPTION",
            "gross_weight": 76,
            "height": 40,
            "hs_codes": Array [
              4,
            ],
            "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
            "id": 1,
            "key": "FOO_CARGO_ITEM_KEY",
            "length": 60,
            "payload_in_kg": 200,
            "quantity": 5,
            "stackable": true,
            "tare_weight": 20,
            "volume": 12,
            "weight": 220,
            "width": 10,
          },
          "cargoItemTypes": Object {
            "bar": Object {
              "description": "BAR_TYPE",
            },
            "foo": Object {
              "description": "FOO_TYPE",
            },
          },
          "cargoItems": Array [
            Object {
              "cargo_item_type_id": "foo",
              "chargeable_weight": 250,
              "dangerous_goods": false,
              "description": "FOO_CARGO_ITEM_DESCRIPTION",
              "gross_weight": 76,
              "height": 40,
              "hs_codes": Array [
                4,
              ],
              "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
              "id": 1,
              "key": "FOO_CARGO_ITEM_KEY",
              "length": 60,
              "payload_in_kg": 200,
              "quantity": 5,
              "stackable": true,
              "tare_weight": 20,
              "weight": 220,
              "width": 10,
            },
            Object {
              "cargo_item_type_id": "bar",
              "chargeable_weight": 150,
              "description": "BAR_CARGO_ITEM_DESCRIPTION",
              "height": 70,
              "hs_codes": Array [],
              "hs_text": "BAR_CARGO_ITEM_HS_TEXT",
              "id": 2,
              "key": "BAR_CARGO_ITEM_KEY",
              "length": 50,
              "payload_in_kg": 100,
              "quantity": 7,
              "stackable": false,
              "width": 100,
            },
          ],
          "contacts": Array [],
          "containers": Array [
            Object {
              "cargo_group_id": 4,
              "customs_text": "FOO_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 130,
              "hs_codes": Array [],
              "id": 1,
              "payload_in_kg": 200,
              "quantity": 5,
              "size_class": "FOO_CONTAINER_SIZE_CLASS",
              "tare_weight": 50,
            },
            Object {
              "cargo_group_id": 5,
              "customs_text": "BAR_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 457,
              "hs_codes": Array [],
              "id": 2,
              "payload_in_kg": 450,
              "quantity": 7,
              "size_class": "BAR_CONTAINER_SIZE_CLASS",
              "tare_weight": 7,
            },
          ],
          "customs": Object {
            "export": Object {
              "total": Object {
                "currency": "EUR",
                "value": 100,
              },
            },
            "import": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
            "total": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
          },
          "dangerousGoods": false,
          "documents": Array [
            Object {
              "approved": "approved",
              "created_at": "2018-12-01T18:14:33z",
              "doc_type": "FOO_DOC_TYPE",
              "signed_url": "FOO_SIGNED_URL",
              "text": "FOO_DOCUMENT_TEXT",
            },
            Object {
              "approved": "rejected",
              "created_at": "2018-12-02T11:14:33z",
              "doc_type": "BAR_DOC_TYPE",
              "signed_url": "BAR_SIGNED_URL",
              "text": "BAR_DOCUMENT_TEXT",
            },
          ],
          "hubs": Object {
            "endHub": "END_HUB",
            "startHub": "START_HUB",
          },
          "notifyees": Array [
            Object {
              "first_name": "John",
              "last_name": "Doe",
            },
            Object {
              "first_name": "Robert",
              "last_name": "Plant",
            },
            Object {
              "first_name": "James",
              "last_name": "Brows",
            },
          ],
          "results": Array [
            Object {
              "meta": Object {
                "carrier_name": "FOO_CARRIER_NAME",
                "destination_hub": Object {
                  "name": "Shanghai",
                },
                "mode_of_transport": "air",
                "origin_hub": Object {
                  "name": "Gothenburg",
                },
                "pricing_range_data": Object {
                  "fcl_20": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "750.0",
                      "range": Array [],
                      "rate": "750.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "750.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40_hq": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                },
                "service_level": "FOO_SERVICE_LEVEL",
                "service_level_count": 1,
                "transit_time": 1,
              },
              "quote": Object {
                "total": Object {
                  "value": 467,
                },
              },
              "schedules": Array [
                Object {
                  "closing_date": "16-09-2018",
                  "eta": "10-09-2018",
                  "etd": "15-09-2018",
                },
              ],
            },
            Object {
              "meta": Object {
                "mode_of_transport": "ocean",
                "transit_time": 2,
              },
              "quote": Object {
                "total": Object {
                  "value": 309,
                },
              },
            },
          ],
          "routes": Array [],
          "schedule": Object {
            "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
          },
          "schedules": Array [
            Object {
              "closing_date": "2018-11-01T11:14:33z",
              "eta": "2018-11-18T11:14:33z",
              "etd": "2018-11-13T11:14:33z",
              "hub_route_key": "AIR_HUB_ROUTE_KEY",
              "mode_of_transport": "air",
            },
            Object {
              "closing_date": "2018-11-05T11:14:33z",
              "destination_hub": Object {},
              "eta": "2018-11-22T11:14:33z",
              "etd": "2018-11-17T11:14:33z",
              "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
              "mode_of_transport": "ocean",
              "origin_hub": Object {},
              "total_price": Object {
                "currency": "EUR",
                "value": 112,
              },
            },
            Object {
              "closing_date": "2018-11-03T11:14:33z",
              "eta": "2018-11-20T11:14:33z",
              "etd": "2018-11-15T11:14:33z",
              "hub_route_key": "RAIL_HUB_ROUTE_KEY",
              "mode_of_transport": "rail",
            },
            Object {
              "closing_date": "2018-11-02T11:14:33z",
              "eta": "2018-11-19T11:14:33z",
              "etd": "2018-11-14T11:14:33z",
              "hub_route_key": "TRUCK_HUB_ROUTE_KEY",
              "mode_of_transport": "truck",
            },
          ],
          "shipment": Object {
            "booking_placed_at": "2018-11-01T11:14:33z",
            "cargo_count": 2,
            "cargo_items_attributes": Array [],
            "cargo_notes": "SHIPMENT_CARGO_NOTES",
            "cargo_units": Array [
              Object {
                "height": 67,
                "length": 63,
                "quantity": 2,
                "width": 107,
              },
            ],
            "clientName": "SHIPMENT_CLIENT_NAME",
            "containers_attributes": Array [],
            "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
            "destination": Object {
              "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
            },
            "destination_hub": Object {
              "name": "SHIPMENT_DESTINATION_HUB",
              "startHub": Object {
                "address": Object {},
              },
            },
            "direction": "import",
            "eori": 1234,
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "id": 654,
            "imc_reference": "SHIPMENT_IMC_REFERENCE",
            "incoterm": "SHIPMENT_INCOTERM",
            "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
            "load_type": "cargo_item",
            "notes": "SHIPMENT_NOTES",
            "origin": Object {
              "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
            },
            "origin_hub": Object {
              "name": "SHIPMENT_ORIGIN_HUB",
              "startHub": Object {
                "address": Object {
                  "city": "FOO_ADDRESS_CITY",
                  "country": "FOO_ADDRESS_COUNTRY",
                  "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                  "id": 246,
                  "primary": true,
                  "street": "FOO_ADDRESS_STREET",
                  "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                  "user": Object {
                    "primary": true,
                  },
                  "zipCode": "FOO_ADDRESS_ZIP_CODE",
                },
              },
            },
            "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
            "planned_eta": "2018-12-01T18:14:33z",
            "planned_etd": "2018-11-12T12:37:08z",
            "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
            "planned_pickup_date": "2018-12-08T04:30:08z",
            "schedule_set": Array [
              Object {
                "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
              },
            ],
            "schedules_charges": Object {
              "AIR_HUB_ROUTE_KEY": Object {
                "total": 200,
              },
              "OCEAN_HUB_ROUTE_KEY": Object {
                "total": 40,
              },
              "RAIL_HUB_ROUTE_KEY": Object {
                "total": 125,
              },
              "TRUCK_HUB_ROUTE_KEY": Object {
                "total": 75,
              },
            },
            "selected_offer": Object {
              "cargo": Object {},
              "customs": Object {
                "hasUnknown": false,
                "val": 12,
              },
              "insurance": Object {
                "val": 5,
              },
              "total": Object {
                "value": 87,
              },
            },
            "service_level": "standard",
            "status": "finished",
            "total_goods_value": Object {
              "currency": "USD",
              "value": 150000,
            },
            "total_price": Object {
              "currency": "USD",
              "value": 137550,
            },
            "trucking": Object {
              "has_on_carriage": false,
              "has_pre_carriage": false,
              "on_carriage": Object {
                "trucking_time_in_seconds": 28,
              },
              "pre_carriage": Object {
                "trucking_time_in_seconds": 55,
              },
            },
            "updated_at": "2018-11-01T18:14:33z",
          },
        }
      }
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
      totalGoodsValue={
        Object {
          "value": 11,
        }
      }
    />
    <InsuranceSelection
      handleInsurance={[Function]}
      insuranceView={null}
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
    />
  </div>
</div>
`;

exports[`tenant.scope.has_customs is false 1`] = `
<div
  className="flex-100 layout-row layout-wrap padd_top"
  name="cargoDetailsBox"
>
  <div
    className="flex-100 layout-row layout-align-center"
  >
    <div
      className="flex-none content_width layout-row layout-wrap"
    >
      <div
        className="flex-100 layout-row layout-sm-wrap"
      >
        <div
          className="flex-50"
        >
          <div
            className="flex-100"
          >
            <div
              className="flex-100 layout-align-start-center layout-row"
            >
              <div
                className="flex-none"
              >
                <TextHeading
                  color="black"
                  fontWeight="normal"
                  size={2}
                  text="Cargo Details"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                />
              </div>
            </div>
             
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={3}
                text="Total value of goods"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap layout-align-start-start"
          >
            <div
              className="flex-100 layout-row layout-wrap"
            >
              <div
                className="flex-100 layout-row"
              >
                <div
                  className="flex-66 layout-row"
                >
                  <Formsy(FormsyInput)
                    className="flex-100 ccb_total_goods_value cargo_input "
                    errorMessageStyles={
                      Object {
                        "bottom": "-17px",
                        "fontSize": "13px",
                      }
                    }
                    innerRef={[Function]}
                    name="totalGoodsValue"
                    onBlur={[Function]}
                    required={3370}
                    submitAttempted={false}
                    type="number"
                    validationError=""
                    validationErrors={
                      Object {
                        "isDefaultRequiredValue": "Must be greater than 0",
                        "nonNegative": "Must be greater than 0",
                      }
                    }
                    validations={
                      Object {
                        "nonNegative": [Function],
                      }
                    }
                    value={11}
                    wrapperClassName="flex-100 wrapper_cargo_input"
                  />
                </div>
                <div
                  className="flex-33 layout-row"
                >
                  <NamedSelect
                    className="flex-100 ccb_currency"
                    clearable={false}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "EUR",
                          "value": "EUR",
                        },
                        Object {
                          "label": "AUD",
                          "value": "AUD",
                        },
                        Object {
                          "label": "BGN",
                          "value": "BGN",
                        },
                        Object {
                          "label": "BRL",
                          "value": "BRL",
                        },
                        Object {
                          "label": "CAD",
                          "value": "CAD",
                        },
                        Object {
                          "label": "CHF",
                          "value": "CHF",
                        },
                        Object {
                          "label": "CNY",
                          "value": "CNY",
                        },
                        Object {
                          "label": "CZK",
                          "value": "CZK",
                        },
                        Object {
                          "label": "DKK",
                          "value": "DKK",
                        },
                        Object {
                          "label": "GBP",
                          "value": "GBP",
                        },
                        Object {
                          "label": "HKD",
                          "value": "HKD",
                        },
                        Object {
                          "label": "HRK",
                          "value": "HRK",
                        },
                        Object {
                          "label": "HUF",
                          "value": "HUF",
                        },
                        Object {
                          "label": "IDR",
                          "value": "IDR",
                        },
                        Object {
                          "label": "ILS",
                          "value": "ILS",
                        },
                        Object {
                          "label": "INR",
                          "value": "INR",
                        },
                        Object {
                          "label": "JPY",
                          "value": "JPY",
                        },
                        Object {
                          "label": "KRW",
                          "value": "KRW",
                        },
                        Object {
                          "label": "MXN",
                          "value": "MXN",
                        },
                        Object {
                          "label": "MYR",
                          "value": "MYR",
                        },
                        Object {
                          "label": "NOK",
                          "value": "NOK",
                        },
                        Object {
                          "label": "NZD",
                          "value": "NZD",
                        },
                        Object {
                          "label": "PHP",
                          "value": "PHP",
                        },
                        Object {
                          "label": "PLN",
                          "value": "PLN",
                        },
                        Object {
                          "label": "RON",
                          "value": "RON",
                        },
                        Object {
                          "label": "RUB",
                          "value": "RUB",
                        },
                        Object {
                          "label": "SEK",
                          "value": "SEK",
                        },
                        Object {
                          "label": "SGD",
                          "value": "SGD",
                        },
                        Object {
                          "label": "THB",
                          "value": "THB",
                        },
                        Object {
                          "label": "TRY",
                          "value": "TRY",
                        },
                        Object {
                          "label": "USD",
                          "value": "USD",
                        },
                        Object {
                          "label": "ZAR",
                          "value": "ZAR",
                        },
                      ]
                    }
                    value={
                      Object {
                        "label": "EUR",
                        "value": "EUR",
                      }
                    }
                  />
                </div>
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-wrap"
              id="cargo_notes"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Description of Goods (HS Codes if available)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 ccb_description_goods cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="cargoNotes"
                  onBlur={[Function]}
                  required="MANDATORY_FIELDS_DESCRIPTION"
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={
                    Object {
                      "isDefaultRequiredValue": "Must not be empty",
                    }
                  }
                  validations={null}
                  value="CARGO_NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <h4
                    className="no_m flex-30"
                  >
                    Incoterms
                     
                    <span>
                      (Optional)
                    </span>
                  </h4>
                  <p
                    className="pointy flex-none incoterm_info"
                    onClick={[Function]}
                  >
                    More info
                  </p>
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="incotermText"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value=""
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
          </div>
        </div>
        <div
          className="flex-50 padding_left offset-gt-sm-5 layout-row layout-wrap layout-align-start-start"
        >
          <div
            className="flex-100 layout-align-start-center layout-row"
          >
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={2}
                text="Shipment Documents "
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
              <br />
              if available
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="packing_sheet"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Packing List"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="packing_sheet"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="commercial_invoice"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Commercial Invoice"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="commercial_invoice"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-align-start-start layout-wrap"
          >
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Notes (Optional)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="notes"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value="NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-gt-sm-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className=" flex-100 layout-row layout-align-start-start-space-around layout-wrap"
              >
                <DocumentsMultiForm
                  deleteFn={[Function]}
                  dispatchFn={[Function]}
                  documents={Array []}
                  t={[Function]}
                  text="Miscellaneous"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                  tooltip=""
                  type="miscellaneous"
                  uploadFn={null}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div
    className="insurance_customs_sec flex-100 layout-row layout-wrap layout-align-center"
  >
    <InsuranceSelection
      handleInsurance={[Function]}
      insuranceView={null}
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": false,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
    />
  </div>
</div>
`;

exports[`tenant.scope.has_insurance is false 1`] = `
<div
  className="flex-100 layout-row layout-wrap padd_top"
  name="cargoDetailsBox"
>
  <div
    className="flex-100 layout-row layout-align-center"
  >
    <div
      className="flex-none content_width layout-row layout-wrap"
    >
      <div
        className="flex-100 layout-row layout-sm-wrap"
      >
        <div
          className="flex-50"
        >
          <div
            className="flex-100"
          >
            <div
              className="flex-100 layout-align-start-center layout-row"
            >
              <div
                className="flex-none"
              >
                <TextHeading
                  color="black"
                  fontWeight="normal"
                  size={2}
                  text="Cargo Details"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                />
              </div>
            </div>
             
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={3}
                text="Total value of goods"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap layout-align-start-start"
          >
            <div
              className="flex-100 layout-row layout-wrap"
            >
              <div
                className="flex-100 layout-row"
              >
                <div
                  className="flex-66 layout-row"
                >
                  <Formsy(FormsyInput)
                    className="flex-100 ccb_total_goods_value cargo_input "
                    errorMessageStyles={
                      Object {
                        "bottom": "-17px",
                        "fontSize": "13px",
                      }
                    }
                    innerRef={[Function]}
                    name="totalGoodsValue"
                    onBlur={[Function]}
                    required={3370}
                    submitAttempted={false}
                    type="number"
                    validationError=""
                    validationErrors={
                      Object {
                        "isDefaultRequiredValue": "Must be greater than 0",
                        "nonNegative": "Must be greater than 0",
                      }
                    }
                    validations={
                      Object {
                        "nonNegative": [Function],
                      }
                    }
                    value={11}
                    wrapperClassName="flex-100 wrapper_cargo_input"
                  />
                </div>
                <div
                  className="flex-33 layout-row"
                >
                  <NamedSelect
                    className="flex-100 ccb_currency"
                    clearable={false}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "EUR",
                          "value": "EUR",
                        },
                        Object {
                          "label": "AUD",
                          "value": "AUD",
                        },
                        Object {
                          "label": "BGN",
                          "value": "BGN",
                        },
                        Object {
                          "label": "BRL",
                          "value": "BRL",
                        },
                        Object {
                          "label": "CAD",
                          "value": "CAD",
                        },
                        Object {
                          "label": "CHF",
                          "value": "CHF",
                        },
                        Object {
                          "label": "CNY",
                          "value": "CNY",
                        },
                        Object {
                          "label": "CZK",
                          "value": "CZK",
                        },
                        Object {
                          "label": "DKK",
                          "value": "DKK",
                        },
                        Object {
                          "label": "GBP",
                          "value": "GBP",
                        },
                        Object {
                          "label": "HKD",
                          "value": "HKD",
                        },
                        Object {
                          "label": "HRK",
                          "value": "HRK",
                        },
                        Object {
                          "label": "HUF",
                          "value": "HUF",
                        },
                        Object {
                          "label": "IDR",
                          "value": "IDR",
                        },
                        Object {
                          "label": "ILS",
                          "value": "ILS",
                        },
                        Object {
                          "label": "INR",
                          "value": "INR",
                        },
                        Object {
                          "label": "JPY",
                          "value": "JPY",
                        },
                        Object {
                          "label": "KRW",
                          "value": "KRW",
                        },
                        Object {
                          "label": "MXN",
                          "value": "MXN",
                        },
                        Object {
                          "label": "MYR",
                          "value": "MYR",
                        },
                        Object {
                          "label": "NOK",
                          "value": "NOK",
                        },
                        Object {
                          "label": "NZD",
                          "value": "NZD",
                        },
                        Object {
                          "label": "PHP",
                          "value": "PHP",
                        },
                        Object {
                          "label": "PLN",
                          "value": "PLN",
                        },
                        Object {
                          "label": "RON",
                          "value": "RON",
                        },
                        Object {
                          "label": "RUB",
                          "value": "RUB",
                        },
                        Object {
                          "label": "SEK",
                          "value": "SEK",
                        },
                        Object {
                          "label": "SGD",
                          "value": "SGD",
                        },
                        Object {
                          "label": "THB",
                          "value": "THB",
                        },
                        Object {
                          "label": "TRY",
                          "value": "TRY",
                        },
                        Object {
                          "label": "USD",
                          "value": "USD",
                        },
                        Object {
                          "label": "ZAR",
                          "value": "ZAR",
                        },
                      ]
                    }
                    value={
                      Object {
                        "label": "EUR",
                        "value": "EUR",
                      }
                    }
                  />
                </div>
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-wrap"
              id="cargo_notes"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Description of Goods (HS Codes if available)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 ccb_description_goods cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="cargoNotes"
                  onBlur={[Function]}
                  required="MANDATORY_FIELDS_DESCRIPTION"
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={
                    Object {
                      "isDefaultRequiredValue": "Must not be empty",
                    }
                  }
                  validations={null}
                  value="CARGO_NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <h4
                    className="no_m flex-30"
                  >
                    Incoterms
                     
                    <span>
                      (Optional)
                    </span>
                  </h4>
                  <p
                    className="pointy flex-none incoterm_info"
                    onClick={[Function]}
                  >
                    More info
                  </p>
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="incotermText"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value=""
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
          </div>
        </div>
        <div
          className="flex-50 padding_left offset-gt-sm-5 layout-row layout-wrap layout-align-start-start"
        >
          <div
            className="flex-100 layout-align-start-center layout-row"
          >
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={2}
                text="Shipment Documents "
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
              <br />
              if available
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="packing_sheet"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Packing List"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="packing_sheet"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="commercial_invoice"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Commercial Invoice"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="commercial_invoice"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-align-start-start layout-wrap"
          >
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Notes (Optional)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="notes"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value="NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-gt-sm-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className=" flex-100 layout-row layout-align-start-start-space-around layout-wrap"
              >
                <DocumentsMultiForm
                  deleteFn={[Function]}
                  dispatchFn={[Function]}
                  documents={Array []}
                  t={[Function]}
                  text="Miscellaneous"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                  tooltip=""
                  type="miscellaneous"
                  uploadFn={null}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div
    className="insurance_customs_sec flex-100 layout-row layout-wrap layout-align-center"
  >
    <CustomsClearance
      customs={
        Object {
          "export": Object {
            "total": Object {
              "currency": "EUR",
              "value": 100,
            },
          },
          "import": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
          "total": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
        }
      }
      customsData={
        Object {
          "export": Object {
            "bool": true,
          },
          "import": Object {
            "bool": true,
            "total": Object {
              "currency": "USD",
            },
          },
          "val": "FOO_CUSTOM_DATA",
        }
      }
      deleteDoc={[Function]}
      dispatchFn={[Function]}
      documents={
        Array [
          Object {
            "approved": "approved",
            "created_at": "2018-12-01T18:14:33z",
            "doc_type": "FOO_DOC_TYPE",
            "signed_url": "FOO_SIGNED_URL",
            "text": "FOO_DOCUMENT_TEXT",
          },
          Object {
            "approved": "rejected",
            "created_at": "2018-12-02T11:14:33z",
            "doc_type": "BAR_DOC_TYPE",
            "signed_url": "BAR_SIGNED_URL",
            "text": "BAR_DOCUMENT_TEXT",
          },
        ]
      }
      eori="EORI"
      handleChange={[Function]}
      setCustomsFee={[Function]}
      shipment={
        Object {
          "booking_placed_at": "2018-11-01T11:14:33z",
          "cargo_count": 2,
          "cargo_items_attributes": Array [],
          "cargo_notes": "SHIPMENT_CARGO_NOTES",
          "cargo_units": Array [
            Object {
              "height": 67,
              "length": 63,
              "quantity": 2,
              "width": 107,
            },
          ],
          "clientName": "SHIPMENT_CLIENT_NAME",
          "containers_attributes": Array [],
          "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
          "destination": Object {
            "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
          },
          "destination_hub": Object {
            "name": "SHIPMENT_DESTINATION_HUB",
            "startHub": Object {
              "address": Object {},
            },
          },
          "direction": "import",
          "eori": 1234,
          "has_on_carriage": false,
          "has_pre_carriage": false,
          "id": 654,
          "imc_reference": "SHIPMENT_IMC_REFERENCE",
          "incoterm": "SHIPMENT_INCOTERM",
          "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
          "load_type": "cargo_item",
          "notes": "SHIPMENT_NOTES",
          "origin": Object {
            "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
          },
          "origin_hub": Object {
            "name": "SHIPMENT_ORIGIN_HUB",
            "startHub": Object {
              "address": Object {
                "city": "FOO_ADDRESS_CITY",
                "country": "FOO_ADDRESS_COUNTRY",
                "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                "id": 246,
                "primary": true,
                "street": "FOO_ADDRESS_STREET",
                "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                "user": Object {
                  "primary": true,
                },
                "zipCode": "FOO_ADDRESS_ZIP_CODE",
              },
            },
          },
          "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
          "planned_eta": "2018-12-01T18:14:33z",
          "planned_etd": "2018-11-12T12:37:08z",
          "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
          "planned_pickup_date": "2018-12-08T04:30:08z",
          "schedule_set": Array [
            Object {
              "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
            },
          ],
          "schedules_charges": Object {
            "AIR_HUB_ROUTE_KEY": Object {
              "total": 200,
            },
            "OCEAN_HUB_ROUTE_KEY": Object {
              "total": 40,
            },
            "RAIL_HUB_ROUTE_KEY": Object {
              "total": 125,
            },
            "TRUCK_HUB_ROUTE_KEY": Object {
              "total": 75,
            },
          },
          "selected_offer": Object {
            "cargo": Object {},
            "customs": Object {
              "hasUnknown": false,
              "val": 12,
            },
            "insurance": Object {
              "val": 5,
            },
            "total": Object {
              "value": 87,
            },
          },
          "service_level": "standard",
          "status": "finished",
          "total_goods_value": Object {
            "currency": "USD",
            "value": 150000,
          },
          "total_price": Object {
            "currency": "USD",
            "value": 137550,
          },
          "trucking": Object {
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "on_carriage": Object {
              "trucking_time_in_seconds": 28,
            },
            "pre_carriage": Object {
              "trucking_time_in_seconds": 55,
            },
          },
          "updated_at": "2018-11-01T18:14:33z",
        }
      }
      shipmentData={
        Object {
          "addons": Object {
            "customs_export_paper": true,
          },
          "addresses": Object {
            "destination": Object {
              "city": "BAR_CITY",
              "country": "China",
              "street": "BAR_STREET",
              "street_number": 9,
              "zip_code": 845321,
            },
            "endHub": "FOO_END_HUB",
            "origin": Object {
              "city": "FOO_CITY",
              "country": "Germany",
              "street": "FOO_STREET",
              "street_number": 7,
              "zip_code": 21177,
            },
            "startHub": "FOO_START_HUB",
          },
          "aggregatedCargo": Object {
            "cargo_item_type_id": "foo",
            "chargeable_weight": 250,
            "dangerous_goods": false,
            "description": "FOO_CARGO_ITEM_DESCRIPTION",
            "gross_weight": 76,
            "height": 40,
            "hs_codes": Array [
              4,
            ],
            "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
            "id": 1,
            "key": "FOO_CARGO_ITEM_KEY",
            "length": 60,
            "payload_in_kg": 200,
            "quantity": 5,
            "stackable": true,
            "tare_weight": 20,
            "volume": 12,
            "weight": 220,
            "width": 10,
          },
          "cargoItemTypes": Object {
            "bar": Object {
              "description": "BAR_TYPE",
            },
            "foo": Object {
              "description": "FOO_TYPE",
            },
          },
          "cargoItems": Array [
            Object {
              "cargo_item_type_id": "foo",
              "chargeable_weight": 250,
              "dangerous_goods": false,
              "description": "FOO_CARGO_ITEM_DESCRIPTION",
              "gross_weight": 76,
              "height": 40,
              "hs_codes": Array [
                4,
              ],
              "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
              "id": 1,
              "key": "FOO_CARGO_ITEM_KEY",
              "length": 60,
              "payload_in_kg": 200,
              "quantity": 5,
              "stackable": true,
              "tare_weight": 20,
              "weight": 220,
              "width": 10,
            },
            Object {
              "cargo_item_type_id": "bar",
              "chargeable_weight": 150,
              "description": "BAR_CARGO_ITEM_DESCRIPTION",
              "height": 70,
              "hs_codes": Array [],
              "hs_text": "BAR_CARGO_ITEM_HS_TEXT",
              "id": 2,
              "key": "BAR_CARGO_ITEM_KEY",
              "length": 50,
              "payload_in_kg": 100,
              "quantity": 7,
              "stackable": false,
              "width": 100,
            },
          ],
          "contacts": Array [],
          "containers": Array [
            Object {
              "cargo_group_id": 4,
              "customs_text": "FOO_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 130,
              "hs_codes": Array [],
              "id": 1,
              "payload_in_kg": 200,
              "quantity": 5,
              "size_class": "FOO_CONTAINER_SIZE_CLASS",
              "tare_weight": 50,
            },
            Object {
              "cargo_group_id": 5,
              "customs_text": "BAR_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 457,
              "hs_codes": Array [],
              "id": 2,
              "payload_in_kg": 450,
              "quantity": 7,
              "size_class": "BAR_CONTAINER_SIZE_CLASS",
              "tare_weight": 7,
            },
          ],
          "customs": Object {
            "export": Object {
              "total": Object {
                "currency": "EUR",
                "value": 100,
              },
            },
            "import": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
            "total": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
          },
          "dangerousGoods": false,
          "documents": Array [
            Object {
              "approved": "approved",
              "created_at": "2018-12-01T18:14:33z",
              "doc_type": "FOO_DOC_TYPE",
              "signed_url": "FOO_SIGNED_URL",
              "text": "FOO_DOCUMENT_TEXT",
            },
            Object {
              "approved": "rejected",
              "created_at": "2018-12-02T11:14:33z",
              "doc_type": "BAR_DOC_TYPE",
              "signed_url": "BAR_SIGNED_URL",
              "text": "BAR_DOCUMENT_TEXT",
            },
          ],
          "hubs": Object {
            "endHub": "END_HUB",
            "startHub": "START_HUB",
          },
          "notifyees": Array [
            Object {
              "first_name": "John",
              "last_name": "Doe",
            },
            Object {
              "first_name": "Robert",
              "last_name": "Plant",
            },
            Object {
              "first_name": "James",
              "last_name": "Brows",
            },
          ],
          "results": Array [
            Object {
              "meta": Object {
                "carrier_name": "FOO_CARRIER_NAME",
                "destination_hub": Object {
                  "name": "Shanghai",
                },
                "mode_of_transport": "air",
                "origin_hub": Object {
                  "name": "Gothenburg",
                },
                "pricing_range_data": Object {
                  "fcl_20": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "750.0",
                      "range": Array [],
                      "rate": "750.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "750.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40_hq": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                },
                "service_level": "FOO_SERVICE_LEVEL",
                "service_level_count": 1,
                "transit_time": 1,
              },
              "quote": Object {
                "total": Object {
                  "value": 467,
                },
              },
              "schedules": Array [
                Object {
                  "closing_date": "16-09-2018",
                  "eta": "10-09-2018",
                  "etd": "15-09-2018",
                },
              ],
            },
            Object {
              "meta": Object {
                "mode_of_transport": "ocean",
                "transit_time": 2,
              },
              "quote": Object {
                "total": Object {
                  "value": 309,
                },
              },
            },
          ],
          "routes": Array [],
          "schedule": Object {
            "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
          },
          "schedules": Array [
            Object {
              "closing_date": "2018-11-01T11:14:33z",
              "eta": "2018-11-18T11:14:33z",
              "etd": "2018-11-13T11:14:33z",
              "hub_route_key": "AIR_HUB_ROUTE_KEY",
              "mode_of_transport": "air",
            },
            Object {
              "closing_date": "2018-11-05T11:14:33z",
              "destination_hub": Object {},
              "eta": "2018-11-22T11:14:33z",
              "etd": "2018-11-17T11:14:33z",
              "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
              "mode_of_transport": "ocean",
              "origin_hub": Object {},
              "total_price": Object {
                "currency": "EUR",
                "value": 112,
              },
            },
            Object {
              "closing_date": "2018-11-03T11:14:33z",
              "eta": "2018-11-20T11:14:33z",
              "etd": "2018-11-15T11:14:33z",
              "hub_route_key": "RAIL_HUB_ROUTE_KEY",
              "mode_of_transport": "rail",
            },
            Object {
              "closing_date": "2018-11-02T11:14:33z",
              "eta": "2018-11-19T11:14:33z",
              "etd": "2018-11-14T11:14:33z",
              "hub_route_key": "TRUCK_HUB_ROUTE_KEY",
              "mode_of_transport": "truck",
            },
          ],
          "shipment": Object {
            "booking_placed_at": "2018-11-01T11:14:33z",
            "cargo_count": 2,
            "cargo_items_attributes": Array [],
            "cargo_notes": "SHIPMENT_CARGO_NOTES",
            "cargo_units": Array [
              Object {
                "height": 67,
                "length": 63,
                "quantity": 2,
                "width": 107,
              },
            ],
            "clientName": "SHIPMENT_CLIENT_NAME",
            "containers_attributes": Array [],
            "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
            "destination": Object {
              "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
            },
            "destination_hub": Object {
              "name": "SHIPMENT_DESTINATION_HUB",
              "startHub": Object {
                "address": Object {},
              },
            },
            "direction": "import",
            "eori": 1234,
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "id": 654,
            "imc_reference": "SHIPMENT_IMC_REFERENCE",
            "incoterm": "SHIPMENT_INCOTERM",
            "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
            "load_type": "cargo_item",
            "notes": "SHIPMENT_NOTES",
            "origin": Object {
              "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
            },
            "origin_hub": Object {
              "name": "SHIPMENT_ORIGIN_HUB",
              "startHub": Object {
                "address": Object {
                  "city": "FOO_ADDRESS_CITY",
                  "country": "FOO_ADDRESS_COUNTRY",
                  "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                  "id": 246,
                  "primary": true,
                  "street": "FOO_ADDRESS_STREET",
                  "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                  "user": Object {
                    "primary": true,
                  },
                  "zipCode": "FOO_ADDRESS_ZIP_CODE",
                },
              },
            },
            "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
            "planned_eta": "2018-12-01T18:14:33z",
            "planned_etd": "2018-11-12T12:37:08z",
            "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
            "planned_pickup_date": "2018-12-08T04:30:08z",
            "schedule_set": Array [
              Object {
                "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
              },
            ],
            "schedules_charges": Object {
              "AIR_HUB_ROUTE_KEY": Object {
                "total": 200,
              },
              "OCEAN_HUB_ROUTE_KEY": Object {
                "total": 40,
              },
              "RAIL_HUB_ROUTE_KEY": Object {
                "total": 125,
              },
              "TRUCK_HUB_ROUTE_KEY": Object {
                "total": 75,
              },
            },
            "selected_offer": Object {
              "cargo": Object {},
              "customs": Object {
                "hasUnknown": false,
                "val": 12,
              },
              "insurance": Object {
                "val": 5,
              },
              "total": Object {
                "value": 87,
              },
            },
            "service_level": "standard",
            "status": "finished",
            "total_goods_value": Object {
              "currency": "USD",
              "value": 150000,
            },
            "total_price": Object {
              "currency": "USD",
              "value": 137550,
            },
            "trucking": Object {
              "has_on_carriage": false,
              "has_pre_carriage": false,
              "on_carriage": Object {
                "trucking_time_in_seconds": 28,
              },
              "pre_carriage": Object {
                "trucking_time_in_seconds": 55,
              },
            },
            "updated_at": "2018-11-01T18:14:33z",
          },
        }
      }
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": false,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
      totalGoodsValue={
        Object {
          "value": 11,
        }
      }
    />
  </div>
</div>
`;

exports[`totalGoodsValue.value > 20000 1`] = `
<div
  className="flex-100 layout-row layout-wrap padd_top"
  name="cargoDetailsBox"
>
  <div
    className="flex-100 layout-row layout-align-center"
  >
    <div
      className="flex-none content_width layout-row layout-wrap"
    >
      <div
        className="flex-100 layout-row layout-sm-wrap"
      >
        <div
          className="flex-50"
        >
          <div
            className="flex-100"
          >
            <div
              className="flex-100 layout-align-start-center layout-row"
            >
              <div
                className="flex-none"
              >
                <TextHeading
                  color="black"
                  fontWeight="normal"
                  size={2}
                  text="Cargo Details"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                />
              </div>
            </div>
             
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={3}
                text="Total value of goods"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap layout-align-start-start"
          >
            <div
              className="flex-100 layout-row layout-wrap"
            >
              <div
                className="flex-100 layout-row"
              >
                <div
                  className="flex-66 layout-row"
                >
                  <Formsy(FormsyInput)
                    className="flex-100 ccb_total_goods_value cargo_input "
                    errorMessageStyles={
                      Object {
                        "bottom": "-17px",
                        "fontSize": "13px",
                      }
                    }
                    innerRef={[Function]}
                    name="totalGoodsValue"
                    onBlur={[Function]}
                    required={3370}
                    submitAttempted={false}
                    type="number"
                    validationError=""
                    validationErrors={
                      Object {
                        "isDefaultRequiredValue": "Must be greater than 0",
                        "nonNegative": "Must be greater than 0",
                      }
                    }
                    validations={
                      Object {
                        "nonNegative": [Function],
                      }
                    }
                    value={20001}
                    wrapperClassName="flex-100 wrapper_cargo_input"
                  />
                </div>
                <div
                  className="flex-33 layout-row"
                >
                  <NamedSelect
                    className="flex-100 ccb_currency"
                    clearable={false}
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "EUR",
                          "value": "EUR",
                        },
                        Object {
                          "label": "AUD",
                          "value": "AUD",
                        },
                        Object {
                          "label": "BGN",
                          "value": "BGN",
                        },
                        Object {
                          "label": "BRL",
                          "value": "BRL",
                        },
                        Object {
                          "label": "CAD",
                          "value": "CAD",
                        },
                        Object {
                          "label": "CHF",
                          "value": "CHF",
                        },
                        Object {
                          "label": "CNY",
                          "value": "CNY",
                        },
                        Object {
                          "label": "CZK",
                          "value": "CZK",
                        },
                        Object {
                          "label": "DKK",
                          "value": "DKK",
                        },
                        Object {
                          "label": "GBP",
                          "value": "GBP",
                        },
                        Object {
                          "label": "HKD",
                          "value": "HKD",
                        },
                        Object {
                          "label": "HRK",
                          "value": "HRK",
                        },
                        Object {
                          "label": "HUF",
                          "value": "HUF",
                        },
                        Object {
                          "label": "IDR",
                          "value": "IDR",
                        },
                        Object {
                          "label": "ILS",
                          "value": "ILS",
                        },
                        Object {
                          "label": "INR",
                          "value": "INR",
                        },
                        Object {
                          "label": "JPY",
                          "value": "JPY",
                        },
                        Object {
                          "label": "KRW",
                          "value": "KRW",
                        },
                        Object {
                          "label": "MXN",
                          "value": "MXN",
                        },
                        Object {
                          "label": "MYR",
                          "value": "MYR",
                        },
                        Object {
                          "label": "NOK",
                          "value": "NOK",
                        },
                        Object {
                          "label": "NZD",
                          "value": "NZD",
                        },
                        Object {
                          "label": "PHP",
                          "value": "PHP",
                        },
                        Object {
                          "label": "PLN",
                          "value": "PLN",
                        },
                        Object {
                          "label": "RON",
                          "value": "RON",
                        },
                        Object {
                          "label": "RUB",
                          "value": "RUB",
                        },
                        Object {
                          "label": "SEK",
                          "value": "SEK",
                        },
                        Object {
                          "label": "SGD",
                          "value": "SGD",
                        },
                        Object {
                          "label": "THB",
                          "value": "THB",
                        },
                        Object {
                          "label": "TRY",
                          "value": "TRY",
                        },
                        Object {
                          "label": "USD",
                          "value": "USD",
                        },
                        Object {
                          "label": "ZAR",
                          "value": "ZAR",
                        },
                      ]
                    }
                    value={
                      Object {
                        "label": "EUR",
                        "value": "EUR",
                      }
                    }
                  />
                </div>
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-wrap"
              id="cargo_notes"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Description of Goods (HS Codes if available)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 ccb_description_goods cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="cargoNotes"
                  onBlur={[Function]}
                  required="MANDATORY_FIELDS_DESCRIPTION"
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={
                    Object {
                      "isDefaultRequiredValue": "Must not be empty",
                    }
                  }
                  validations={null}
                  value="CARGO_NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <h4
                    className="no_m flex-30"
                  >
                    Incoterms
                     
                    <span>
                      (Optional)
                    </span>
                  </h4>
                  <p
                    className="pointy flex-none incoterm_info"
                    onClick={[Function]}
                  >
                    More info
                  </p>
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="incotermText"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value=""
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
          </div>
        </div>
        <div
          className="flex-50 padding_left offset-gt-sm-5 layout-row layout-wrap layout-align-start-start"
        >
          <div
            className="flex-100 layout-align-start-center layout-row"
          >
            <div
              className="flex-none"
            >
              <TextHeading
                color="black"
                fontWeight="normal"
                size={2}
                text="Shipment Documents "
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
              />
              <br />
              if available
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="packing_sheet"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Packing List"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="packing_sheet"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-wrap"
            name="commercial_invoice"
          >
            <div
              className="flex-100 layout-row margin_5"
            >
              <DocumentsMultiForm
                deleteFn={[Function]}
                dispatchFn={[Function]}
                documents={Array []}
                isRequired={true}
                t={[Function]}
                text="Commercial Invoice"
                theme={
                  Object {
                    "colors": Object {
                      "primary": "#333",
                      "secondary": "#fafafa",
                    },
                  }
                }
                tooltip=""
                type="commercial_invoice"
                uploadFn={null}
              />
            </div>
          </div>
          <div
            className="flex-100 layout-row layout-align-start-start layout-wrap"
          >
            <div
              className="flex-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className="flex-100"
              >
                <div
                  className="flex-none f_header"
                >
                   
                  <TextHeading
                    color="black"
                    fontWeight="normal"
                    size={3}
                    text="Notes (Optional)"
                    theme={
                      Object {
                        "colors": Object {
                          "primary": "#333",
                          "secondary": "#fafafa",
                        },
                      }
                    }
                  />
                </div>
              </div>
              <div
                className="flex-100 layout-row layout-align-start-start input_box_full"
              >
                <Formsy(FormsyTextarea)
                  className="flex-100 cargo_text_area "
                  errorMessageStyles={
                    Object {
                      "bottom": "-17px",
                      "fontSize": "13px",
                    }
                  }
                  innerRef={[Function]}
                  name="notes"
                  onBlur={[Function]}
                  required={false}
                  submitAttempted={false}
                  type="textarea"
                  validationError=""
                  validationErrors={Object {}}
                  validations={null}
                  value="NOTES"
                  wrapperClassName="flex-100 wrapper_cargo_input"
                />
              </div>
            </div>
            <div
              className="flex-gt-sm-100 layout-row layout-align-start-start layout-wrap"
            >
              <div
                className=" flex-100 layout-row layout-align-start-start-space-around layout-wrap"
              >
                <DocumentsMultiForm
                  deleteFn={[Function]}
                  dispatchFn={[Function]}
                  documents={Array []}
                  t={[Function]}
                  text="Miscellaneous"
                  theme={
                    Object {
                      "colors": Object {
                        "primary": "#333",
                        "secondary": "#fafafa",
                      },
                    }
                  }
                  tooltip=""
                  type="miscellaneous"
                  uploadFn={null}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div
    className="insurance_customs_sec flex-100 layout-row layout-wrap layout-align-center"
  >
    <CustomsClearance
      customs={
        Object {
          "export": Object {
            "total": Object {
              "currency": "EUR",
              "value": 100,
            },
          },
          "import": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
          "total": Object {
            "total": Object {
              "currency": "EUR",
            },
          },
        }
      }
      customsData={
        Object {
          "export": Object {
            "bool": true,
          },
          "import": Object {
            "bool": true,
            "total": Object {
              "currency": "USD",
            },
          },
          "val": "FOO_CUSTOM_DATA",
        }
      }
      deleteDoc={[Function]}
      dispatchFn={[Function]}
      documents={
        Array [
          Object {
            "approved": "approved",
            "created_at": "2018-12-01T18:14:33z",
            "doc_type": "FOO_DOC_TYPE",
            "signed_url": "FOO_SIGNED_URL",
            "text": "FOO_DOCUMENT_TEXT",
          },
          Object {
            "approved": "rejected",
            "created_at": "2018-12-02T11:14:33z",
            "doc_type": "BAR_DOC_TYPE",
            "signed_url": "BAR_SIGNED_URL",
            "text": "BAR_DOCUMENT_TEXT",
          },
        ]
      }
      eori="EORI"
      handleChange={[Function]}
      setCustomsFee={[Function]}
      shipment={
        Object {
          "booking_placed_at": "2018-11-01T11:14:33z",
          "cargo_count": 2,
          "cargo_items_attributes": Array [],
          "cargo_notes": "SHIPMENT_CARGO_NOTES",
          "cargo_units": Array [
            Object {
              "height": 67,
              "length": 63,
              "quantity": 2,
              "width": 107,
            },
          ],
          "clientName": "SHIPMENT_CLIENT_NAME",
          "containers_attributes": Array [],
          "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
          "destination": Object {
            "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
          },
          "destination_hub": Object {
            "name": "SHIPMENT_DESTINATION_HUB",
            "startHub": Object {
              "address": Object {},
            },
          },
          "direction": "import",
          "eori": 1234,
          "has_on_carriage": false,
          "has_pre_carriage": false,
          "id": 654,
          "imc_reference": "SHIPMENT_IMC_REFERENCE",
          "incoterm": "SHIPMENT_INCOTERM",
          "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
          "load_type": "cargo_item",
          "notes": "SHIPMENT_NOTES",
          "origin": Object {
            "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
          },
          "origin_hub": Object {
            "name": "SHIPMENT_ORIGIN_HUB",
            "startHub": Object {
              "address": Object {
                "city": "FOO_ADDRESS_CITY",
                "country": "FOO_ADDRESS_COUNTRY",
                "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                "id": 246,
                "primary": true,
                "street": "FOO_ADDRESS_STREET",
                "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                "user": Object {
                  "primary": true,
                },
                "zipCode": "FOO_ADDRESS_ZIP_CODE",
              },
            },
          },
          "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
          "planned_eta": "2018-12-01T18:14:33z",
          "planned_etd": "2018-11-12T12:37:08z",
          "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
          "planned_pickup_date": "2018-12-08T04:30:08z",
          "schedule_set": Array [
            Object {
              "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
            },
          ],
          "schedules_charges": Object {
            "AIR_HUB_ROUTE_KEY": Object {
              "total": 200,
            },
            "OCEAN_HUB_ROUTE_KEY": Object {
              "total": 40,
            },
            "RAIL_HUB_ROUTE_KEY": Object {
              "total": 125,
            },
            "TRUCK_HUB_ROUTE_KEY": Object {
              "total": 75,
            },
          },
          "selected_offer": Object {
            "cargo": Object {},
            "customs": Object {
              "hasUnknown": false,
              "val": 12,
            },
            "insurance": Object {
              "val": 5,
            },
            "total": Object {
              "value": 87,
            },
          },
          "service_level": "standard",
          "status": "finished",
          "total_goods_value": Object {
            "currency": "USD",
            "value": 150000,
          },
          "total_price": Object {
            "currency": "USD",
            "value": 137550,
          },
          "trucking": Object {
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "on_carriage": Object {
              "trucking_time_in_seconds": 28,
            },
            "pre_carriage": Object {
              "trucking_time_in_seconds": 55,
            },
          },
          "updated_at": "2018-11-01T18:14:33z",
        }
      }
      shipmentData={
        Object {
          "addons": Object {
            "customs_export_paper": true,
          },
          "addresses": Object {
            "destination": Object {
              "city": "BAR_CITY",
              "country": "China",
              "street": "BAR_STREET",
              "street_number": 9,
              "zip_code": 845321,
            },
            "endHub": "FOO_END_HUB",
            "origin": Object {
              "city": "FOO_CITY",
              "country": "Germany",
              "street": "FOO_STREET",
              "street_number": 7,
              "zip_code": 21177,
            },
            "startHub": "FOO_START_HUB",
          },
          "aggregatedCargo": Object {
            "cargo_item_type_id": "foo",
            "chargeable_weight": 250,
            "dangerous_goods": false,
            "description": "FOO_CARGO_ITEM_DESCRIPTION",
            "gross_weight": 76,
            "height": 40,
            "hs_codes": Array [
              4,
            ],
            "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
            "id": 1,
            "key": "FOO_CARGO_ITEM_KEY",
            "length": 60,
            "payload_in_kg": 200,
            "quantity": 5,
            "stackable": true,
            "tare_weight": 20,
            "volume": 12,
            "weight": 220,
            "width": 10,
          },
          "cargoItemTypes": Object {
            "bar": Object {
              "description": "BAR_TYPE",
            },
            "foo": Object {
              "description": "FOO_TYPE",
            },
          },
          "cargoItems": Array [
            Object {
              "cargo_item_type_id": "foo",
              "chargeable_weight": 250,
              "dangerous_goods": false,
              "description": "FOO_CARGO_ITEM_DESCRIPTION",
              "gross_weight": 76,
              "height": 40,
              "hs_codes": Array [
                4,
              ],
              "hs_text": "FOO_CARGO_ITEM_HS_TEXT",
              "id": 1,
              "key": "FOO_CARGO_ITEM_KEY",
              "length": 60,
              "payload_in_kg": 200,
              "quantity": 5,
              "stackable": true,
              "tare_weight": 20,
              "weight": 220,
              "width": 10,
            },
            Object {
              "cargo_item_type_id": "bar",
              "chargeable_weight": 150,
              "description": "BAR_CARGO_ITEM_DESCRIPTION",
              "height": 70,
              "hs_codes": Array [],
              "hs_text": "BAR_CARGO_ITEM_HS_TEXT",
              "id": 2,
              "key": "BAR_CARGO_ITEM_KEY",
              "length": 50,
              "payload_in_kg": 100,
              "quantity": 7,
              "stackable": false,
              "width": 100,
            },
          ],
          "contacts": Array [],
          "containers": Array [
            Object {
              "cargo_group_id": 4,
              "customs_text": "FOO_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 130,
              "hs_codes": Array [],
              "id": 1,
              "payload_in_kg": 200,
              "quantity": 5,
              "size_class": "FOO_CONTAINER_SIZE_CLASS",
              "tare_weight": 50,
            },
            Object {
              "cargo_group_id": 5,
              "customs_text": "BAR_CONTAINER_CUSTOMS_TEXT",
              "gross_weight": 457,
              "hs_codes": Array [],
              "id": 2,
              "payload_in_kg": 450,
              "quantity": 7,
              "size_class": "BAR_CONTAINER_SIZE_CLASS",
              "tare_weight": 7,
            },
          ],
          "customs": Object {
            "export": Object {
              "total": Object {
                "currency": "EUR",
                "value": 100,
              },
            },
            "import": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
            "total": Object {
              "total": Object {
                "currency": "EUR",
              },
            },
          },
          "dangerousGoods": false,
          "documents": Array [
            Object {
              "approved": "approved",
              "created_at": "2018-12-01T18:14:33z",
              "doc_type": "FOO_DOC_TYPE",
              "signed_url": "FOO_SIGNED_URL",
              "text": "FOO_DOCUMENT_TEXT",
            },
            Object {
              "approved": "rejected",
              "created_at": "2018-12-02T11:14:33z",
              "doc_type": "BAR_DOC_TYPE",
              "signed_url": "BAR_SIGNED_URL",
              "text": "BAR_DOCUMENT_TEXT",
            },
          ],
          "hubs": Object {
            "endHub": "END_HUB",
            "startHub": "START_HUB",
          },
          "notifyees": Array [
            Object {
              "first_name": "John",
              "last_name": "Doe",
            },
            Object {
              "first_name": "Robert",
              "last_name": "Plant",
            },
            Object {
              "first_name": "James",
              "last_name": "Brows",
            },
          ],
          "results": Array [
            Object {
              "meta": Object {
                "carrier_name": "FOO_CARRIER_NAME",
                "destination_hub": Object {
                  "name": "Shanghai",
                },
                "mode_of_transport": "air",
                "origin_hub": Object {
                  "name": "Gothenburg",
                },
                "pricing_range_data": Object {
                  "fcl_20": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "750.0",
                      "range": Array [],
                      "rate": "750.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "750.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                  "fcl_40_hq": Object {
                    "BAS": Object {
                      "currency": "USD",
                      "min": "1400.0",
                      "range": Array [],
                      "rate": "1400.0",
                      "rate_basis": "PER_CONTAINER",
                    },
                    "total": Object {
                      "currency": "USD",
                      "value": "1400.0",
                    },
                    "valid_until": "2019-12-31T00:00:00.000Z",
                  },
                },
                "service_level": "FOO_SERVICE_LEVEL",
                "service_level_count": 1,
                "transit_time": 1,
              },
              "quote": Object {
                "total": Object {
                  "value": 467,
                },
              },
              "schedules": Array [
                Object {
                  "closing_date": "16-09-2018",
                  "eta": "10-09-2018",
                  "etd": "15-09-2018",
                },
              ],
            },
            Object {
              "meta": Object {
                "mode_of_transport": "ocean",
                "transit_time": 2,
              },
              "quote": Object {
                "total": Object {
                  "value": 309,
                },
              },
            },
          ],
          "routes": Array [],
          "schedule": Object {
            "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
          },
          "schedules": Array [
            Object {
              "closing_date": "2018-11-01T11:14:33z",
              "eta": "2018-11-18T11:14:33z",
              "etd": "2018-11-13T11:14:33z",
              "hub_route_key": "AIR_HUB_ROUTE_KEY",
              "mode_of_transport": "air",
            },
            Object {
              "closing_date": "2018-11-05T11:14:33z",
              "destination_hub": Object {},
              "eta": "2018-11-22T11:14:33z",
              "etd": "2018-11-17T11:14:33z",
              "hub_route_key": "OCEAN_HUB_ROUTE_KEY",
              "mode_of_transport": "ocean",
              "origin_hub": Object {},
              "total_price": Object {
                "currency": "EUR",
                "value": 112,
              },
            },
            Object {
              "closing_date": "2018-11-03T11:14:33z",
              "eta": "2018-11-20T11:14:33z",
              "etd": "2018-11-15T11:14:33z",
              "hub_route_key": "RAIL_HUB_ROUTE_KEY",
              "mode_of_transport": "rail",
            },
            Object {
              "closing_date": "2018-11-02T11:14:33z",
              "eta": "2018-11-19T11:14:33z",
              "etd": "2018-11-14T11:14:33z",
              "hub_route_key": "TRUCK_HUB_ROUTE_KEY",
              "mode_of_transport": "truck",
            },
          ],
          "shipment": Object {
            "booking_placed_at": "2018-11-01T11:14:33z",
            "cargo_count": 2,
            "cargo_items_attributes": Array [],
            "cargo_notes": "SHIPMENT_CARGO_NOTES",
            "cargo_units": Array [
              Object {
                "height": 67,
                "length": 63,
                "quantity": 2,
                "width": 107,
              },
            ],
            "clientName": "SHIPMENT_CLIENT_NAME",
            "containers_attributes": Array [],
            "delivery_address": "SHIPMENT_DELIVERY_ADDRESS",
            "destination": Object {
              "fullAddress": "SHIPMENT_DESTINATION_FULL_ADDRESS",
            },
            "destination_hub": Object {
              "name": "SHIPMENT_DESTINATION_HUB",
              "startHub": Object {
                "address": Object {},
              },
            },
            "direction": "import",
            "eori": 1234,
            "has_on_carriage": false,
            "has_pre_carriage": false,
            "id": 654,
            "imc_reference": "SHIPMENT_IMC_REFERENCE",
            "incoterm": "SHIPMENT_INCOTERM",
            "incoterm_text": "SHIPMENT_INCOTERM_TEXT",
            "load_type": "cargo_item",
            "notes": "SHIPMENT_NOTES",
            "origin": Object {
              "fullAddress": "SHIPMENT_ORIGIN_FULL_ADDRESS",
            },
            "origin_hub": Object {
              "name": "SHIPMENT_ORIGIN_HUB",
              "startHub": Object {
                "address": Object {
                  "city": "FOO_ADDRESS_CITY",
                  "country": "FOO_ADDRESS_COUNTRY",
                  "geocodedAddress": "FOO_GEOCODED_ADDRESS",
                  "id": 246,
                  "primary": true,
                  "street": "FOO_ADDRESS_STREET",
                  "streetNumber": "FOO_ADDRESS_STREET_NUMBER",
                  "user": Object {
                    "primary": true,
                  },
                  "zipCode": "FOO_ADDRESS_ZIP_CODE",
                },
              },
            },
            "pickup_address": "SHIPMENT_PICKUP_ADDRESS",
            "planned_eta": "2018-12-01T18:14:33z",
            "planned_etd": "2018-11-12T12:37:08z",
            "planned_origin_drop_off_date": "2018-12-01T22:14:33z",
            "planned_pickup_date": "2018-12-08T04:30:08z",
            "schedule_set": Array [
              Object {
                "hub_route_key": "SHIPMENT_SCHEDULE_SET_HUB_ROUTE_KEY",
              },
            ],
            "schedules_charges": Object {
              "AIR_HUB_ROUTE_KEY": Object {
                "total": 200,
              },
              "OCEAN_HUB_ROUTE_KEY": Object {
                "total": 40,
              },
              "RAIL_HUB_ROUTE_KEY": Object {
                "total": 125,
              },
              "TRUCK_HUB_ROUTE_KEY": Object {
                "total": 75,
              },
            },
            "selected_offer": Object {
              "cargo": Object {},
              "customs": Object {
                "hasUnknown": false,
                "val": 12,
              },
              "insurance": Object {
                "val": 5,
              },
              "total": Object {
                "value": 87,
              },
            },
            "service_level": "standard",
            "status": "finished",
            "total_goods_value": Object {
              "currency": "USD",
              "value": 150000,
            },
            "total_price": Object {
              "currency": "USD",
              "value": 137550,
            },
            "trucking": Object {
              "has_on_carriage": false,
              "has_pre_carriage": false,
              "on_carriage": Object {
                "trucking_time_in_seconds": 28,
              },
              "pre_carriage": Object {
                "trucking_time_in_seconds": 55,
              },
            },
            "updated_at": "2018-11-01T18:14:33z",
          },
        }
      }
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
      totalGoodsValue={
        Object {
          "value": 20001,
        }
      }
    />
    <InsuranceSelection
      handleInsurance={[Function]}
      insuranceView={null}
      t={[Function]}
      tenant={
        Object {
          "emails": Object {
            "sales": Object {
              "air": "sales@demo.com",
              "general": "sales@demo.com",
              "ocean": "sales@demo.com",
              "rail": "sales@demo.com",
            },
            "support": Object {
              "air": "imc.air@demo.com",
              "general": "support@demo.com",
              "ocean": "imc.sea@demo.com",
              "rail": "imc.rail@demo.com",
            },
          },
          "id": 123,
          "name": "ORGANIZATION_NAME",
          "phones": Object {
            "support": "ORGANIZATION_SUPPORT_PHONE",
          },
          "scope": Object {
            "cargo_info_level": "text",
            "carriage_options": Object {
              "on_carriage": Object {
                "export": "mandatory",
                "import": "mandatory",
              },
              "pre_carriage": Object {
                "export": "optional",
                "import": "optional",
              },
            },
            "closed_quotation_tool": true,
            "customs_export_paper": false,
            "detailed_billing": true,
            "has_customs": true,
            "has_insurance": true,
            "hide_grand_total": true,
            "mandatory_form_fields": Object {
              "description_of_goods": "MANDATORY_FIELDS_DESCRIPTION",
              "total_goods_value": 3370,
            },
            "modes_of_transport": Object {
              "air": Object {
                "AIR_LOAD_TYPE": 0,
              },
              "ocean": Object {
                "OCEAN_LOAD_TYPE": 2,
              },
              "rail": Object {
                "RAIL_LOAD_TYPE": 0,
              },
              "truck": Object {
                "TRUCK_LOAD_TYPE": 0,
              },
            },
            "terms": Array [
              "FOO_TERM",
              "BAR_TERM",
            ],
          },
          "subdomain": "ORGANIZATION_SUBDOMAIN",
          "theme": Object {
            "colors": Object {
              "primary": "#333",
              "secondary": "#fafafa",
            },
          },
        }
      }
      theme={
        Object {
          "colors": Object {
            "primary": "#333",
            "secondary": "#fafafa",
          },
        }
      }
    />
  </div>
</div>
`;
