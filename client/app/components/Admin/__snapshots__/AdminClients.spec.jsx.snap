// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`shallow render 1`] = `
<GenericError
  t={[Function]}
  theme={
    Object {
      "colors": Object {
        "primary": "#333",
        "secondary": "#fafafa",
      },
    }
  }
>
  <div
    className="flex-100 layout-row layout-wrap layout-align-start-start"
  >
    <Switch
      className="flex"
    >
      <Route
        exact={true}
        path="/admin/clients"
        render={[Function]}
      />
      <Route
        exact={true}
        path="/admin/clients/:id"
        render={[Function]}
      />
    </Switch>
  </div>
</GenericError>
`;

exports[`state.newClient is true 1`] = `
<GenericError
  t={[Function]}
  theme={
    Object {
      "colors": Object {
        "primary": "#333",
        "secondary": "#fafafa",
      },
    }
  }
>
  <div
    className="flex-100 layout-row layout-wrap layout-align-start-start"
  >
    <Formsy
      className="flex-none layout-row layout-wrap layout-align-center-center new_contact"
      disabled={false}
      getErrorMessage={[Function]}
      getErrorMessages={[Function]}
      getValue={[Function]}
      hasValue={[Function]}
      isFormDisabled={[Function]}
      isFormSubmitted={[Function]}
      isPristine={[Function]}
      isRequired={[Function]}
      isValid={[Function]}
      isValidValue={[Function]}
      mapping={null}
      onChange={[Function]}
      onError={[Function]}
      onInvalid={[Function]}
      onInvalidSubmit={[Function]}
      onReset={[Function]}
      onSubmit={[Function]}
      onValid={[Function]}
      onValidSubmit={[Function]}
      preventExternalInvalidation={false}
      resetValue={[Function]}
      setValidations={[Function]}
      setValue={[Function]}
      showError={[Function]}
      showRequired={[Function]}
      validationErrors={null}
    >
      <div
        className="flex-none layout-row layout-wrap layout-align-center-center new_contact_backdrop"
        onClick={[Function]}
      />
      <div
        className="flex-none layout-row layout-wrap layout-align-start-start new_contact_content"
      >
        <div
          className=" contact_header flex-100 layout-row layout-align-space-between-center"
        >
          <div
            className="flex-none layout-row layout-align-start-center"
          >
            <i
              className="fa fa-user flex-none clip"
              style={
                Object {
                  "background": "-webkit-linear-gradient(left, #333,#fafafa)",
                }
              }
            />
            <p
              className="flex-none"
            >
              New Client
            </p>
          </div>
          <div
            className="flex-none layout-row layout-align-start-center"
            onClick={[Function]}
          >
            <i
              className="fa fa-times flex-none clip pointy"
              style={
                Object {
                  "background": "-webkit-linear-gradient(left, #333,#fafafa)",
                }
              }
            />
          </div>
        </div>
        <_class
          className="input"
          errorMessageStyles={
            Object {
              "bottom": "10px",
              "fontSize": "12px",
              "left": "15px",
              "position": "absolute",
            }
          }
          name="firstName"
          onChange={[Function]}
          placeholder="First Name *"
          required={true}
          submitAttempted={false}
          type="text"
          validationErrors={
            Object {
              "isDefaultRequiredValue": "Must not be blank",
              "minLength": "Must be at least two characters long",
            }
          }
          validations="minLength:2"
          value="FIRST_NAME"
          wrapperClassName="input_50"
        />
        <_class
          className="input"
          errorMessageStyles={
            Object {
              "bottom": "10px",
              "fontSize": "12px",
              "left": "15px",
              "position": "absolute",
            }
          }
          name="lastName"
          onChange={[Function]}
          placeholder="Last Name *"
          required={true}
          submitAttempted={false}
          type="text"
          validationErrors={
            Object {
              "isDefaultRequiredValue": "Must not be blank",
              "minLength": "Must be at least two characters long",
            }
          }
          validations="minLength:2"
          value="LAST_NAME"
          wrapperClassName="input_50"
        />
        <MailCheck
          email=""
        >
          <Component />
        </MailCheck>
        <_class
          className="input"
          errorMessageStyles={
            Object {
              "bottom": "10px",
              "fontSize": "12px",
              "left": "15px",
              "position": "absolute",
            }
          }
          name="phone"
          onChange={[Function]}
          placeholder="Phone *"
          required={true}
          submitAttempted={false}
          type="text"
          validationErrors={
            Object {
              "isDefaultRequiredValue": "Must not be blank",
              "minLength": "Must be at least two characters long",
            }
          }
          validations="minLength:2"
          value="PHONE"
          wrapperClassName="input_33"
        />
        <_class
          className="input"
          errorMessageStyles={
            Object {
              "bottom": "10px",
              "fontSize": "12px",
              "left": "15px",
              "position": "absolute",
            }
          }
          name="companyName"
          onChange={[Function]}
          placeholder="Company Name *"
          required={true}
          submitAttempted={false}
          type="text"
          validationErrors={
            Object {
              "isDefaultRequiredValue": "Must not be blank",
              "minLength": "Must be at least two characters long",
            }
          }
          validations="minLength:2"
          value="COMPANY_NAME"
          wrapperClassName="input_60"
        />
        <_class
          className="input"
          errorMessageStyles={
            Object {
              "bottom": "10px",
              "fontSize": "12px",
              "left": "15px",
              "position": "absolute",
            }
          }
          name="number"
          onChange={[Function]}
          placeholder="Number"
          submitAttempted={false}
          type="text"
          validationErrors={
            Object {
              "isDefaultRequiredValue": "Must not be blank",
              "minLength": "Must be at least one character long",
            }
          }
          validations="minLength:1"
          value="NUMBER"
          wrapperClassName="input_no"
        />
        <_class
          className="input"
          errorMessageStyles={
            Object {
              "bottom": "10px",
              "fontSize": "12px",
              "left": "15px",
              "position": "absolute",
            }
          }
          name="street"
          onChange={[Function]}
          placeholder="Street"
          submitAttempted={false}
          type="text"
          validationErrors={
            Object {
              "isDefaultRequiredValue": "Must not be blank",
              "minLength": "Must be at least two characters long",
            }
          }
          validations="minLength:2"
          value="STREET"
          wrapperClassName="input_street"
        />
        <_class
          className="input"
          errorMessageStyles={
            Object {
              "bottom": "10px",
              "fontSize": "12px",
              "left": "15px",
              "position": "absolute",
            }
          }
          name="zipCode"
          onChange={[Function]}
          placeholder="Postal Code"
          submitAttempted={false}
          type="text"
          validationErrors={
            Object {
              "isDefaultRequiredValue": "Must not be blank",
              "minLength": "Must be at least two characters long",
            }
          }
          validations="minLength:2"
          value="ZIP_CODE"
          wrapperClassName="input_zip"
        />
        <_class
          className="input"
          errorMessageStyles={
            Object {
              "bottom": "10px",
              "fontSize": "12px",
              "left": "15px",
              "position": "absolute",
            }
          }
          name="city"
          onChange={[Function]}
          placeholder="City"
          submitAttempted={false}
          type="text"
          validationErrors={
            Object {
              "isDefaultRequiredValue": "Must not be blank",
              "minLength": "Must be at least two characters long",
            }
          }
          validations="minLength:2"
          value="CITY"
          wrapperClassName="input_cc"
        />
        <_class
          className="input"
          errorMessageStyles={
            Object {
              "bottom": "10px",
              "fontSize": "12px",
              "left": "15px",
              "position": "absolute",
            }
          }
          name="country"
          onChange={[Function]}
          placeholder="Country"
          submitAttempted={false}
          type="text"
          validationErrors={
            Object {
              "isDefaultRequiredValue": "Must not be blank",
              "minLength": "Must be at least two characters long",
            }
          }
          validations="minLength:2"
          value="COUNTRY"
          wrapperClassName="input_cc"
        />
        <div
          className="flex-100 layout-row"
        >
          <div
            className="flex-50 layout-row layout-wrap"
          >
            <_class
              className="input"
              errorMessageStyles={
                Object {
                  "bottom": "10px",
                  "fontSize": "12px",
                  "left": "15px",
                  "position": "absolute",
                }
              }
              name="password"
              onChange={[Function]}
              placeholder="Password *"
              required={true}
              submitAttempted={false}
              type="password"
              validationErrors={
                Object {
                  "isDefaultRequiredValue": "Must not be blank",
                  "minLength": "Min. 8 characters",
                }
              }
              validations="minLength:8"
              value="PASSWORD"
              wrapperClassName="input_100"
            />
          </div>
          <div
            className="flex-50 layout-row layout-wrap"
          >
            <_class
              className="input"
              errorMessageStyles={
                Object {
                  "bottom": "10px",
                  "fontSize": "12px",
                  "left": "15px",
                  "position": "absolute",
                }
              }
              inputRef={[Function]}
              name="password_confirmation"
              onChange={[Function]}
              placeholder="Password Confirmation *"
              required={true}
              submitAttempted={false}
              type="password"
              validationErrors={
                Object {
                  "isDefaultRequiredValue": "Must not be blank",
                  "matchesPassword": "Must match password",
                }
              }
              validations={
                Object {
                  "matchesPassword": [Function],
                }
              }
              value="PASSWORD"
              wrapperClassName="input_100"
            />
          </div>
        </div>
        <div
          className="flex-100 layout-row layout-align-end-center btn_row"
        >
          <RoundButton
            active={true}
            back={false}
            classNames=""
            disabled={false}
            flexContainer="100"
            handleDisabled={null}
            handleNext={null}
            icon=""
            iconClass="fa-floppy-o"
            inverse={false}
            size="small"
            text="Save"
            theme={
              Object {
                "colors": Object {
                  "primary": "#333",
                  "secondary": "#fafafa",
                },
              }
            }
          />
        </div>
      </div>
    </Formsy>
    <Switch
      className="flex"
    >
      <Route
        exact={true}
        path="/admin/clients"
        render={[Function]}
      />
      <Route
        exact={true}
        path="/admin/clients/:id"
        render={[Function]}
      />
    </Switch>
  </div>
</GenericError>
`;

exports[`state.newClientBool is true 1`] = `
<GenericError
  t={[Function]}
  theme={
    Object {
      "colors": Object {
        "primary": "#333",
        "secondary": "#fafafa",
      },
    }
  }
>
  <div
    className="flex-100 layout-row layout-wrap layout-align-start-start"
  >
    <Formsy
      className="flex-none layout-row layout-wrap layout-align-center-center new_contact"
      disabled={false}
      getErrorMessage={[Function]}
      getErrorMessages={[Function]}
      getValue={[Function]}
      hasValue={[Function]}
      isFormDisabled={[Function]}
      isFormSubmitted={[Function]}
      isPristine={[Function]}
      isRequired={[Function]}
      isValid={[Function]}
      isValidValue={[Function]}
      mapping={null}
      onChange={[Function]}
      onError={[Function]}
      onInvalid={[Function]}
      onInvalidSubmit={[Function]}
      onReset={[Function]}
      onSubmit={[Function]}
      onValid={[Function]}
      onValidSubmit={[Function]}
      preventExternalInvalidation={false}
      resetValue={[Function]}
      setValidations={[Function]}
      setValue={[Function]}
      showError={[Function]}
      showRequired={[Function]}
      validationErrors={null}
    >
      <div
        className="flex-none layout-row layout-wrap layout-align-center-center new_contact_backdrop"
        onClick={[Function]}
      />
      <div
        className="flex-none layout-row layout-wrap layout-align-start-start new_contact_content"
      >
        <div
          className=" contact_header flex-100 layout-row layout-align-space-between-center"
        >
          <div
            className="flex-none layout-row layout-align-start-center"
          >
            <i
              className="fa fa-user flex-none clip"
              style={
                Object {
                  "background": "-webkit-linear-gradient(left, #333,#fafafa)",
                }
              }
            />
            <p
              className="flex-none"
            >
              New Client
            </p>
          </div>
          <div
            className="flex-none layout-row layout-align-start-center"
            onClick={[Function]}
          >
            <i
              className="fa fa-times flex-none clip pointy"
              style={
                Object {
                  "background": "-webkit-linear-gradient(left, #333,#fafafa)",
                }
              }
            />
          </div>
        </div>
        <_class
          className="input"
          errorMessageStyles={
            Object {
              "bottom": "10px",
              "fontSize": "12px",
              "left": "15px",
              "position": "absolute",
            }
          }
          name="firstName"
          onChange={[Function]}
          placeholder="First Name *"
          required={true}
          submitAttempted={false}
          type="text"
          validationErrors={
            Object {
              "isDefaultRequiredValue": "Must not be blank",
              "minLength": "Must be at least two characters long",
            }
          }
          validations="minLength:2"
          wrapperClassName="input_50"
        />
        <_class
          className="input"
          errorMessageStyles={
            Object {
              "bottom": "10px",
              "fontSize": "12px",
              "left": "15px",
              "position": "absolute",
            }
          }
          name="lastName"
          onChange={[Function]}
          placeholder="Last Name *"
          required={true}
          submitAttempted={false}
          type="text"
          validationErrors={
            Object {
              "isDefaultRequiredValue": "Must not be blank",
              "minLength": "Must be at least two characters long",
            }
          }
          validations="minLength:2"
          wrapperClassName="input_50"
        />
        <MailCheck
          email=""
        >
          <Component />
        </MailCheck>
        <_class
          className="input"
          errorMessageStyles={
            Object {
              "bottom": "10px",
              "fontSize": "12px",
              "left": "15px",
              "position": "absolute",
            }
          }
          name="phone"
          onChange={[Function]}
          placeholder="Phone *"
          required={true}
          submitAttempted={false}
          type="text"
          validationErrors={
            Object {
              "isDefaultRequiredValue": "Must not be blank",
              "minLength": "Must be at least two characters long",
            }
          }
          validations="minLength:2"
          wrapperClassName="input_33"
        />
        <_class
          className="input"
          errorMessageStyles={
            Object {
              "bottom": "10px",
              "fontSize": "12px",
              "left": "15px",
              "position": "absolute",
            }
          }
          name="companyName"
          onChange={[Function]}
          placeholder="Company Name *"
          required={true}
          submitAttempted={false}
          type="text"
          validationErrors={
            Object {
              "isDefaultRequiredValue": "Must not be blank",
              "minLength": "Must be at least two characters long",
            }
          }
          validations="minLength:2"
          wrapperClassName="input_60"
        />
        <_class
          className="input"
          errorMessageStyles={
            Object {
              "bottom": "10px",
              "fontSize": "12px",
              "left": "15px",
              "position": "absolute",
            }
          }
          name="number"
          onChange={[Function]}
          placeholder="Number"
          submitAttempted={false}
          type="text"
          validationErrors={
            Object {
              "isDefaultRequiredValue": "Must not be blank",
              "minLength": "Must be at least one character long",
            }
          }
          validations="minLength:1"
          wrapperClassName="input_no"
        />
        <_class
          className="input"
          errorMessageStyles={
            Object {
              "bottom": "10px",
              "fontSize": "12px",
              "left": "15px",
              "position": "absolute",
            }
          }
          name="street"
          onChange={[Function]}
          placeholder="Street"
          submitAttempted={false}
          type="text"
          validationErrors={
            Object {
              "isDefaultRequiredValue": "Must not be blank",
              "minLength": "Must be at least two characters long",
            }
          }
          validations="minLength:2"
          wrapperClassName="input_street"
        />
        <_class
          className="input"
          errorMessageStyles={
            Object {
              "bottom": "10px",
              "fontSize": "12px",
              "left": "15px",
              "position": "absolute",
            }
          }
          name="zipCode"
          onChange={[Function]}
          placeholder="Postal Code"
          submitAttempted={false}
          type="text"
          validationErrors={
            Object {
              "isDefaultRequiredValue": "Must not be blank",
              "minLength": "Must be at least two characters long",
            }
          }
          validations="minLength:2"
          wrapperClassName="input_zip"
        />
        <_class
          className="input"
          errorMessageStyles={
            Object {
              "bottom": "10px",
              "fontSize": "12px",
              "left": "15px",
              "position": "absolute",
            }
          }
          name="city"
          onChange={[Function]}
          placeholder="City"
          submitAttempted={false}
          type="text"
          validationErrors={
            Object {
              "isDefaultRequiredValue": "Must not be blank",
              "minLength": "Must be at least two characters long",
            }
          }
          validations="minLength:2"
          wrapperClassName="input_cc"
        />
        <_class
          className="input"
          errorMessageStyles={
            Object {
              "bottom": "10px",
              "fontSize": "12px",
              "left": "15px",
              "position": "absolute",
            }
          }
          name="country"
          onChange={[Function]}
          placeholder="Country"
          submitAttempted={false}
          type="text"
          validationErrors={
            Object {
              "isDefaultRequiredValue": "Must not be blank",
              "minLength": "Must be at least two characters long",
            }
          }
          validations="minLength:2"
          wrapperClassName="input_cc"
        />
        <div
          className="flex-100 layout-row"
        >
          <div
            className="flex-50 layout-row layout-wrap"
          >
            <_class
              className="input"
              errorMessageStyles={
                Object {
                  "bottom": "10px",
                  "fontSize": "12px",
                  "left": "15px",
                  "position": "absolute",
                }
              }
              name="password"
              onChange={[Function]}
              placeholder="Password *"
              required={true}
              submitAttempted={false}
              type="password"
              validationErrors={
                Object {
                  "isDefaultRequiredValue": "Must not be blank",
                  "minLength": "Min. 8 characters",
                }
              }
              validations="minLength:8"
              wrapperClassName="input_100"
            />
          </div>
          <div
            className="flex-50 layout-row layout-wrap"
          >
            <_class
              className="input"
              errorMessageStyles={
                Object {
                  "bottom": "10px",
                  "fontSize": "12px",
                  "left": "15px",
                  "position": "absolute",
                }
              }
              inputRef={[Function]}
              name="password_confirmation"
              onChange={[Function]}
              placeholder="Password Confirmation *"
              required={true}
              submitAttempted={false}
              type="password"
              validationErrors={
                Object {
                  "isDefaultRequiredValue": "Must not be blank",
                  "matchesPassword": "Must match password",
                }
              }
              validations={
                Object {
                  "matchesPassword": [Function],
                }
              }
              wrapperClassName="input_100"
            />
          </div>
        </div>
        <div
          className="flex-100 layout-row layout-align-end-center btn_row"
        >
          <RoundButton
            active={true}
            back={false}
            classNames=""
            disabled={false}
            flexContainer="100"
            handleDisabled={null}
            handleNext={null}
            icon=""
            iconClass="fa-floppy-o"
            inverse={false}
            size="small"
            text="Save"
            theme={
              Object {
                "colors": Object {
                  "primary": "#333",
                  "secondary": "#fafafa",
                },
              }
            }
          />
        </div>
      </div>
    </Formsy>
    <Switch
      className="flex"
    >
      <Route
        exact={true}
        path="/admin/clients"
        render={[Function]}
      />
      <Route
        exact={true}
        path="/admin/clients/:id"
        render={[Function]}
      />
    </Switch>
  </div>
</GenericError>
`;

exports[`theme is falsy 1`] = `
<GenericError
  t={[Function]}
  theme={null}
>
  <div
    className="flex-100 layout-row layout-wrap layout-align-start-start"
  >
    <Switch
      className="flex"
    >
      <Route
        exact={true}
        path="/admin/clients"
        render={[Function]}
      />
      <Route
        exact={true}
        path="/admin/clients/:id"
        render={[Function]}
      />
    </Switch>
  </div>
</GenericError>
`;
