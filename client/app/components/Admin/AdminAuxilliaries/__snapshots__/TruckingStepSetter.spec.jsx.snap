// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`shallow render 1`] = `
<TruckingStepSetter
  saveSteps={[Function]}
  t={[Function]}
  theme={
    Object {
      "colors": Object {
        "primary": "#333",
        "secondary": "#fafafa",
      },
    }
  }
>
  <div
    className="flex-100 layout-row layout-align-start-center"
  >
    <div
      className="flex-100 layout-row layout-align-none-center layout-wrap price_cell"
    >
      <p
        className="flex-100"
      >
         
        NO_TRANSLATION | key "admin:howTruckingPricings"
         
      </p>
      <NamedSelect
        className="flex-100"
        classes="select"
        onChange={[Function]}
        options={
          Array [
            Object {
              "label": "Weight",
              "value": "weight",
            },
            Object {
              "label": "CBM",
              "value": "cbm",
            },
            Object {
              "label": "Unit",
              "value": "unit",
            },
          ]
        }
        value={
          Object {
            "label": "Weight",
            "value": "weight",
          }
        }
      >
        <Styled(Select)
          className="flex-100"
          classes="select"
          errorStyles={
            Object {
              "background": "rgba(232, 114, 88, 0.3)",
              "borderColor": "rgba(232, 114, 88, 0.01)",
              "color": "rgba(211, 104, 80, 1)",
            }
          }
          onChange={[Function]}
          options={
            Array [
              Object {
                "label": "Weight",
                "value": "weight",
              },
              Object {
                "label": "CBM",
                "value": "cbm",
              },
              Object {
                "label": "Unit",
                "value": "unit",
              },
            ]
          }
          value={
            Object {
              "label": "Weight",
              "value": "weight",
            }
          }
        >
          <Select
            arrowRenderer={[Function]}
            autosize={true}
            backspaceRemoves={true}
            backspaceToRemoveMessage="Press backspace to remove {label}"
            className="flex-100 sc-bdVaJa djGvLJ"
            classes="select"
            clearAllText="Clear all"
            clearRenderer={[Function]}
            clearValueText="Clear value"
            clearable={true}
            closeOnSelect={true}
            deleteRemoves={true}
            delimiter=","
            disabled={false}
            errorStyles={
              Object {
                "background": "rgba(232, 114, 88, 0.3)",
                "borderColor": "rgba(232, 114, 88, 0.01)",
                "color": "rgba(211, 104, 80, 1)",
              }
            }
            escapeClearsValue={true}
            filterOptions={[Function]}
            ignoreAccents={true}
            ignoreCase={true}
            inputProps={Object {}}
            isLoading={false}
            joinValues={false}
            labelKey="label"
            matchPos="any"
            matchProp="any"
            menuBuffer={0}
            menuRenderer={[Function]}
            multi={false}
            noResultsText="No results found"
            onBlurResetsInput={true}
            onChange={[Function]}
            onCloseResetsInput={true}
            onSelectResetsInput={true}
            openOnClick={true}
            optionComponent={[Function]}
            options={
              Array [
                Object {
                  "label": "Weight",
                  "value": "weight",
                },
                Object {
                  "label": "CBM",
                  "value": "cbm",
                },
                Object {
                  "label": "Unit",
                  "value": "unit",
                },
              ]
            }
            pageSize={5}
            placeholder="Select..."
            removeSelected={true}
            required={false}
            rtl={false}
            scrollMenuIntoView={true}
            searchable={true}
            simpleValue={false}
            tabSelectsValue={true}
            trimFilter={true}
            value={
              Object {
                "label": "Weight",
                "value": "weight",
              }
            }
            valueComponent={[Function]}
            valueKey="value"
          >
            <div
              className="Select flex-100 sc-bdVaJa djGvLJ has-value is-clearable is-searchable Select--single"
            >
              <div
                className="Select-control"
                onKeyDown={[Function]}
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
              >
                <span
                  className="Select-multi-value-wrapper"
                  id="react-select-2--value"
                >
                  <Value
                    disabled={false}
                    id="react-select-2--value-item"
                    instancePrefix="react-select-2-"
                    onClick={null}
                    placeholder="Select..."
                    value={
                      Object {
                        "label": "Weight",
                        "value": "weight",
                      }
                    }
                  >
                    <div
                      className="Select-value"
                    >
                      <span
                        aria-selected="true"
                        className="Select-value-label"
                        id="react-select-2--value-item"
                        role="option"
                      >
                        Weight
                      </span>
                    </div>
                  </Value>
                  <AutosizeInput
                    aria-activedescendant="react-select-2--value"
                    aria-expanded="false"
                    aria-haspopup="false"
                    aria-owns=""
                    className="Select-input"
                    injectStyles={true}
                    minWidth="5"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    required={false}
                    role="combobox"
                    value=""
                  >
                    <div
                      className="Select-input"
                      style={
                        Object {
                          "display": "inline-block",
                        }
                      }
                    >
                      <input
                        aria-activedescendant="react-select-2--value"
                        aria-expanded="false"
                        aria-haspopup="false"
                        aria-owns=""
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        required={false}
                        role="combobox"
                        style={
                          Object {
                            "boxSizing": "content-box",
                            "width": "5px",
                          }
                        }
                        value=""
                      />
                      <div
                        style={
                          Object {
                            "height": 0,
                            "left": 0,
                            "overflow": "scroll",
                            "position": "absolute",
                            "top": 0,
                            "visibility": "hidden",
                            "whiteSpace": "pre",
                          }
                        }
                      />
                    </div>
                  </AutosizeInput>
                </span>
                <span
                  aria-label="Clear value"
                  className="Select-clear-zone"
                  onMouseDown={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  title="Clear value"
                >
                  <span
                    className="Select-clear"
                    dangerouslySetInnerHTML={
                      Object {
                        "__html": "&times;",
                      }
                    }
                  />
                </span>
                <span
                  className="Select-arrow-zone"
                  onMouseDown={[Function]}
                >
                  <span
                    className="Select-arrow"
                    onMouseDown={[Function]}
                  />
                </span>
              </div>
            </div>
          </Select>
        </Styled(Select)>
      </NamedSelect>
    </div>
  </div>
</TruckingStepSetter>
`;

exports[`state.step2 is true 1`] = `
<TruckingStepSetter
  saveSteps={[Function]}
  t={[Function]}
  theme={
    Object {
      "colors": Object {
        "primary": "#333",
        "secondary": "#fafafa",
      },
    }
  }
>
  <div
    className="flex-100 layout-row layout-align-start-center"
  >
    <div
      className="flex-100 layout-row layout-align-start-center layout-wrap height_100"
    >
      <div
        className="flex-100 layout-row layout-align-start-center"
      >
        <p
          className="flex-none"
        >
          Set pricing weight steps. Values Weight and inclusive
        </p>
      </div>
      <Formsy
        className="flex-100 layout-row layout-align-start-center"
        disabled={false}
        getErrorMessage={[Function]}
        getErrorMessages={[Function]}
        getValue={[Function]}
        hasValue={[Function]}
        isFormDisabled={[Function]}
        isFormSubmitted={[Function]}
        isPristine={[Function]}
        isRequired={[Function]}
        isValid={[Function]}
        isValidValue={[Function]}
        mapping={null}
        onChange={[Function]}
        onError={[Function]}
        onInvalid={[Function]}
        onInvalidSubmit={[Function]}
        onReset={[Function]}
        onSubmit={[Function]}
        onValid={[Function]}
        onValidSubmit={[Function]}
        preventExternalInvalidation={false}
        resetValue={[Function]}
        setValidations={[Function]}
        setValue={[Function]}
        showError={[Function]}
        showRequired={[Function]}
        validationErrors={null}
      >
        <form
          className="flex-100 layout-row layout-align-start-center"
          disabled={false}
          onError={[Function]}
          onReset={[Function]}
          onSubmit={[Function]}
        >
          <div
            className=" flex-33 layout-row layout-row layout-wrap layout-align-start-start input_box"
          >
            <Formsy(FormsyInput)
              innerRef={[Function]}
              name="min_weight"
              placeholder="Lower Limit"
              required={false}
              type="number"
              validationError=""
              validationErrors={Object {}}
              validations="isNumeric"
            >
              <FormsyInput
                className=""
                disabled={false}
                errorMessageStyles={Object {}}
                getErrorMessage={[Function]}
                getErrorMessages={[Function]}
                getValue={[Function]}
                hasValue={[Function]}
                id={null}
                innerRef={[Function]}
                isFormDisabled={[Function]}
                isFormSubmitted={[Function]}
                isPristine={[Function]}
                isRequired={[Function]}
                isValid={[Function]}
                isValidValue={[Function]}
                name="min_weight"
                onBlur={null}
                onChange={null}
                onFocus={null}
                placeholder="Lower Limit"
                required={false}
                resetValue={[Function]}
                setValidations={[Function]}
                setValue={[Function]}
                showError={[Function]}
                showRequired={[Function]}
                submitAttempted={false}
                type="number"
                validationError=""
                validationErrors={Object {}}
                validations="isNumeric"
                wrapperClassName=""
              >
                <div
                  className=" wrapper_input"
                >
                  <input
                    className=""
                    disabled={false}
                    id={null}
                    name="min_weight"
                    onBlur={null}
                    onChange={[Function]}
                    onFocus={null}
                    placeholder="Lower Limit"
                    style={Object {}}
                    type="number"
                    value=""
                  />
                  <span
                    className="error_message"
                    style={Object {}}
                  />
                </div>
              </FormsyInput>
            </Formsy(FormsyInput)>
          </div>
          <div
            className=" flex-33 layout-row layout-row layout-wrap layout-align-start-start input_box"
          >
            <Formsy(FormsyInput)
              innerRef={[Function]}
              name="max_weight"
              placeholder="Upper Limit"
              required={false}
              type="number"
              validationError=""
              validationErrors={Object {}}
              validations="isNumeric"
            >
              <FormsyInput
                className=""
                disabled={false}
                errorMessageStyles={Object {}}
                getErrorMessage={[Function]}
                getErrorMessages={[Function]}
                getValue={[Function]}
                hasValue={[Function]}
                id={null}
                innerRef={[Function]}
                isFormDisabled={[Function]}
                isFormSubmitted={[Function]}
                isPristine={[Function]}
                isRequired={[Function]}
                isValid={[Function]}
                isValidValue={[Function]}
                name="max_weight"
                onBlur={null}
                onChange={null}
                onFocus={null}
                placeholder="Upper Limit"
                required={false}
                resetValue={[Function]}
                setValidations={[Function]}
                setValue={[Function]}
                showError={[Function]}
                showRequired={[Function]}
                submitAttempted={false}
                type="number"
                validationError=""
                validationErrors={Object {}}
                validations="isNumeric"
                wrapperClassName=""
              >
                <div
                  className=" wrapper_input"
                >
                  <input
                    className=""
                    disabled={false}
                    id={null}
                    name="max_weight"
                    onBlur={null}
                    onChange={[Function]}
                    onFocus={null}
                    placeholder="Upper Limit"
                    style={Object {}}
                    type="number"
                    value=""
                  />
                  <span
                    className="error_message"
                    style={Object {}}
                  />
                </div>
              </FormsyInput>
            </Formsy(FormsyInput)>
          </div>
          <div
            className="flex-33 layout-row layout-align-center-center"
          >
            <RoundButton
              active={false}
              back={false}
              classNames=""
              disabled={false}
              flexContainer="100"
              handleDisabled={null}
              handleNext={null}
              icon=""
              iconClass="fa-plus-square-o"
              inverse={false}
              placeholder="Add another"
              size="small"
              theme={
                Object {
                  "colors": Object {
                    "primary": "#333",
                    "secondary": "#fafafa",
                  },
                }
              }
            >
              <div
                className="flex-100 "
              >
                <button
                  className="round_btn neutral small clickable"
                  onClick={null}
                  style={Object {}}
                >
                  <div
                    className="layout-fill layout-row layout-align-space-around-center"
                  >
                    <p
                      className="content"
                    >
                      <span
                        className="icon"
                      >
                        <i
                          className="flex-none icon_f fa fa-plus-square-o"
                        />
                      </span>
                    </p>
                  </div>
                </button>
              </div>
            </RoundButton>
          </div>
        </form>
      </Formsy>
      <div
        className="flex-100 layout-row layout-align-start-center"
      >
        <div
          className="flex-100 layout-row layout-align-start-center layout-wrap"
        />
      </div>
      <div
        className="flex-100 layout-row layout-align-end-center button_padding"
      >
        <RoundButton
          active={true}
          back={false}
          classNames=""
          disabled={false}
          flexContainer="100"
          handleDisabled={null}
          handleNext={[Function]}
          icon=""
          iconClass="fa-chevron-right"
          inverse={false}
          size="small"
          text="Next"
          theme={
            Object {
              "colors": Object {
                "primary": "#333",
                "secondary": "#fafafa",
              },
            }
          }
        >
          <div
            className="flex-100 "
          >
            <button
              className="round_btn active small clickable"
              onClick={[Function]}
              style={
                Object {
                  "background": "-webkit-linear-gradient(-90deg, #333,#fafafa)",
                }
              }
            >
              <div
                className="layout-fill layout-row layout-align-space-around-center"
              >
                <p
                  className="content"
                >
                  <span
                    className="icon"
                  >
                    <i
                      className="flex-none icon_f fa fa-chevron-right"
                    />
                  </span>
                  Next
                </p>
              </div>
            </button>
          </div>
        </RoundButton>
      </div>
    </div>
  </div>
</TruckingStepSetter>
`;
