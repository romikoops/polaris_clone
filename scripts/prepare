#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler'
require 'fileutils'
require 'pathname'

# path to your application root.
APP_ROOT = Pathname.new(File.expand_path('..', __dir__))

# Set up environment
ENV['CI'] ||= nil

# Set up coloring
def red(msg)
  "\033[0;31m#{msg}\033[0m"
end

def green(msg)
  "\033[0;32m#{msg}\033[0m"
end

def yellow(msg)
  "\033[0;33m#{msg}\033[0m"
end

def bundle!
  opts = ENV['CI'] ? '-j$(nproc)' : ''
  system('bundle check') || system!("bundle install #{opts}")
end

def runner(dir:, name:)
  FileUtils.chdir dir do
    puts yellow("--- Preparing test for #{name} ---")
    bundle!
  end
end

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

def run(*args, message:)
  puts "== #{message} =="
  system!(*args)
end

ENGINES = Dir[APP_ROOT.join('engines', '*')].select { |d| File.directory?(d) }.collect { |d| File.basename(d) }
LIBRARIES = Dir[APP_ROOT.join('lib', '*', '*.gemspec')].collect { |d| File.basename(File.dirname(d)) }

puts yellow('*** Preparing test environment ***')
bundle!

# Run tests for each engine, in random order
ENGINES.each do |engine|
  FileUtils.chdir APP_ROOT.join('engines', engine) do
    puts yellow("--- Preparing test for #{engine} ---")
    bundle!
  end
end

LIBRARIES.each do |lib|
  FileUtils.chdir APP_ROOT.join('lib', lib) do
    puts yellow("--- Preparing test for #{lib} ---")
    bundle!
  end
end

exit(0)
