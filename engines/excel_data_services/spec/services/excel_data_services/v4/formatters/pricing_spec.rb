# frozen_string_literal: false

require "rails_helper"

RSpec.describe ExcelDataServices::V4::Formatters::Pricing do
  include_context "V4 setup"

  describe "#insertable_data" do
    let(:first_datum) { rows.first }
    let(:service) { described_class.state(state: state_arguments) }
    let(:start_date) { Time.zone.today.to_date.to_s }
    let(:end_date) { (Time.zone.today + 1.year).to_date.to_s }

    context "with no ranges" do
      let(:expected_data) do
        [{ "cargo_class" => "lcl",
           "effective_date" => start_date,
           "expiration_date" => end_date,
           "vm_rate" => 0.001,
           "wm_rate" => 1.0,
           "group_id" => "1b536235-4bd4-49a7-874e-489ce9e2d251",
           "itinerary_id" => 3,
           "tenant_vehicle_id" => 4,
           "organization_id" => "b7af2e0e-8e49-435a-9ce8-eadfa3db60b9",
           "transshipment" => nil,
           "fees" =>
            [{ "organization_id" => "b7af2e0e-8e49-435a-9ce8-eadfa3db60b9",
               "base" => nil,
               "charge_category_id" => 7640,
               "rate_basis_id" => nil,
               "min" => 210.0,
               "rate" => 210.0,
               "currency_name" => "USD",
               "range" => [],
               "metadata" =>
                { "row_number" => "1",
                  "file_name" => "test-sheet.xlsx",
                  "document_id" => file.id } },
              { "organization_id" => "b7af2e0e-8e49-435a-9ce8-eadfa3db60b9",
                "base" => nil,
                "charge_category_id" => 5,
                "rate_basis_id" => nil,
                "min" => 40.0,
                "rate" => 40.0,
                "currency_name" => "USD",
                "range" => [],
                "metadata" =>
                { "row_number" => "2",
                  "file_name" => "test-sheet.xlsx",
                  "document_id" => file.id } }],
           "internal" => false,
           "load_type" => "cargo_item",
           "validity" => "[#{start_date}, #{end_date})",
           "notes" => [],
           "upsert_id" => "ae71d529-8c65-5c9d-9629-67a03e7bc8e6" }]
      end

      let(:rows) do
        [{ "row" => 1,
           "organization_id" => "b7af2e0e-8e49-435a-9ce8-eadfa3db60b9",
           "service" => "standard",
           "group_id" => "1b536235-4bd4-49a7-874e-489ce9e2d251",
           "group_name" => "TEST_GROUP",
           "effective_date" => start_date,
           "expiration_date" => end_date,
           "origin_locode" => "SEGOT",
           "origin" => nil,
           "origin_country" => nil,
           "destination_locode" => "CNSHA",
           "destination" => nil,
           "destination_country" => nil,
           "mode_of_transport" => "ocean",
           "carrier" => "MSC",
           "service_level" => "standard",
           "cargo_class" => "lcl",
           "internal" => nil,
           "currency" => "USD",
           "transshipment" => nil,
           "fee_name" => "Ocean Freight",
           "fee_code" => "bas",
           "min" => 210.0,
           "rate" => 210.0,
           "rate_basis" => "PER_WM",
           "range_min" => nil,
           "range_max" => nil,
           "base" => nil,
           "origin_terminal" => nil,
           "destination_terminal" => nil,
           "rate_basis_id" => nil,
           "internal_code" => nil,
           "external_code" => nil,
           "origin_hub_id" => 1,
           "origin_name" => "Gothenburg",
           "destination_hub_id" => 2,
           "destination_name" => "Shanghai",
           "itinerary_id" => 3,
           "tenant_vehicle_id" => 4,
           "wm_rate" => 1.0,
           "vm_rate" => 1.0,
           "charge_category_id" => 7640,
           "remarks" => nil,
           "pricing_id" => nil },
          { "row" => 2,
            "organization_id" => "b7af2e0e-8e49-435a-9ce8-eadfa3db60b9",
            "service" => "standard",
            "group_id" => "1b536235-4bd4-49a7-874e-489ce9e2d251",
            "group_name" => "TEST_GROUP",
            "effective_date" => start_date,
            "expiration_date" => end_date,
            "origin_locode" => nil,
            "origin" => "Gothenburg",
            "origin_country" => "Sweden",
            "destination_locode" => nil,
            "destination" => "Shanghai",
            "destination_country" => "China",
            "mode_of_transport" => "ocean",
            "carrier" => "MSC",
            "service_level" => "standard",
            "cargo_class" => "lcl",
            "internal" => nil,
            "transshipment" => nil,
            "fee_name" => "Peak Season",
            "fee_code" => "pss",
            "min" => 40.0,
            "rate" => 40.0,
            "rate_basis" => "PER_WM",
            "range_min" => nil,
            "range_max" => nil,
            "base" => nil,
            "currency" => "USD",
            "origin_terminal" => nil,
            "destination_terminal" => nil,
            "rate_basis_id" => nil,
            "internal_code" => nil,
            "external_code" => nil,
            "origin_hub_id" => 1,
            "origin_name" => "Gothenburg",
            "destination_hub_id" => 2,
            "destination_name" => "Shanghai",
            "itinerary_id" => 3,
            "wm_rate" => nil,
            "vm_rate" => nil,
            "tenant_vehicle_id" => 4,
            "charge_category_id" => 5,
            "remarks" => nil,
            "pricing_id" => nil }]
      end

      it "returns the formatted data" do
        expect(service.insertable_data).to match_array(expected_data)
      end
    end

    context "with ranges" do
      let(:rows) do
        [
          { "row" => 3,
            "organization_id" => "b7af2e0e-8e49-435a-9ce8-eadfa3db60b9",
            "service" => "standard",
            "group_id" => "1b536235-4bd4-49a7-874e-489ce9e2d251",
            "group_name" => "TEST_GROUP",
            "effective_date" => start_date,
            "expiration_date" => end_date,
            "origin_locode" => "SEGOT",
            "origin" => "Gothenburg",
            "origin_country" => "Sweden",
            "destination_locode" => "CNSHA",
            "destination" => "Shanghai",
            "destination_country" => "China",
            "mode_of_transport" => "ocean",
            "carrier" => "MSC",
            "currency" => "USD",
            "service_level" => "standard",
            "cargo_class" => "lcl",
            "internal" => nil,
            "transshipment" => nil,
            "fee_name" => "Bunker Adjustment Fee",
            "fee_code" => "baf",
            "min" => 210.0,
            "rate" => 210.0,
            "rate_basis" => "PER_WM",
            "range_min" => 0.0,
            "range_max" => 1.0e2,
            "base" => nil,
            "origin_terminal" => nil,
            "destination_terminal" => nil,
            "rate_basis_id" => nil,
            "internal_code" => nil,
            "external_code" => nil,
            "origin_hub_id" => 1,
            "origin_name" => "Gothenburg",
            "destination_hub_id" => 2,
            "destination_name" => "Shanghai",
            "itinerary_id" => 3,
            "wm_rate" => 1.0,
            "vm_rate" => 1.0,
            "tenant_vehicle_id" => 4,
            "charge_category_id" => 6,
            "remarks" => nil,
            "pricing_id" => nil },
          { "row" => 4,
            "organization_id" => "b7af2e0e-8e49-435a-9ce8-eadfa3db60b9",
            "service" => "standard",
            "group_id" => "1b536235-4bd4-49a7-874e-489ce9e2d251",
            "group_name" => "TEST_GROUP",
            "effective_date" => start_date,
            "expiration_date" => end_date,
            "origin_locode" => "SEGOT",
            "origin" => "Gothenburg",
            "origin_country" => "Sweden",
            "destination_locode" => "CNSHA",
            "destination" => "Shanghai",
            "carrier" => "MSC",
            "currency" => "USD",
            "service_level" => "standard",
            "cargo_class" => "lcl",
            "internal" => nil,
            "transshipment" => nil,
            "fee_name" => "Bunker Adjustment Fee",
            "fee_code" => "baf",
            "min" => 210.0,
            "rate" => 210.0,
            "rate_basis" => "PER_WM",
            "range_min" => 1.0e2,
            "range_max" => 5.0e2,
            "base" => nil,
            "wm_rate" => 1.0,
            "vm_rate" => 1.0,
            "origin_terminal" => nil,
            "destination_terminal" => nil,
            "rate_basis_id" => nil,
            "internal_code" => nil,
            "external_code" => nil,
            "origin_hub_id" => 1,
            "origin_name" => "Gothenburg",
            "destination_hub_id" => 2,
            "destination_name" => "Shanghai",
            "itinerary_id" => 3,
            "tenant_vehicle_id" => 4,
            "charge_category_id" => 7,
            "remarks" => nil,
            "pricing_id" => nil }
        ]
      end

      let(:expected_data) do
        [{ "cargo_class" => "lcl",
           "effective_date" => start_date,
           "expiration_date" => end_date,
           "vm_rate" => 0.001,
           "wm_rate" => 1.0,
           "group_id" => "1b536235-4bd4-49a7-874e-489ce9e2d251",
           "itinerary_id" => 3,
           "tenant_vehicle_id" => 4,
           "organization_id" => "b7af2e0e-8e49-435a-9ce8-eadfa3db60b9",
           "transshipment" => nil,
           "fees" =>
           [{ "organization_id" => "b7af2e0e-8e49-435a-9ce8-eadfa3db60b9",
              "base" => nil,
              "charge_category_id" => 6,
              "rate_basis_id" => nil,
              "rate" => 210.0,
              "min" => 210.0,
              "currency_name" => "USD",
              "range" => [{ "min" => 0.0, "max" => 100.0, "rate" => 210.0 }, { "min" => 100.0, "max" => 500.0, "rate" => 210.0 }],
              "metadata" =>
              { "row_number" => "3,4",
                "file_name" => "test-sheet.xlsx",
                "document_id" => file.id } }],
           "internal" => false,
           "load_type" => "cargo_item",
           "validity" => "[#{start_date}, #{end_date})",
           "notes" => [],
           "upsert_id" => "ae71d529-8c65-5c9d-9629-67a03e7bc8e6" }]
      end

      it "returns the formatted data" do
        expect(service.insertable_data).to match_array(expected_data)
      end
    end
  end
end
