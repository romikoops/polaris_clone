{{- $postgresName := printf "%s-%s" .Release.Name "postgresql" -}}
{{- $databaseUrl := printf "postgis://%s:%s@%s/%s" .Values.postgresql.postgresUser .Values.postgresql.postgresPassword $postgresName .Values.postgresql.postgresDatabase -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ include "app.fullname" . }}
  labels:
    app: {{ include "app.name" . }}
    chart: {{ include "app.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "app.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ include "app.name" . }}
        release: {{ .Release.Name }}
    spec:
      {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      initContainers:
      - name: migrate
        image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
        imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
        args:
        - dockerize
        - -wait=tcp://{{ $postgresName }}:5432
        - -timeout=5m
        - bin/rails
        - db:migrate
        env:
        - name: RAILS_ENV
          value: review
        - name: DATABASE_URL
          value: {{ $databaseUrl | quote }}
        - name: K8S_NAMESPACE
          value: {{ .Release.Namespace | quote }}
        - name: API_HOST
          value: "api.{{ include "hostname" .Values.service.url }}"
        - name: REVIEW_URL
          value: {{ include "hostname" .Values.service.url }}
        - name: RAILS_MASTER_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "app.fullname" . }}
              key: master.key
      containers:
      - name: backend
        image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
        imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
        args:
        - dockerize
        - -wait=tcp://{{ $postgresName }}:5432
        - -timeout=5m
        - bin/puma
        - -C
        - config/puma.rb
        env:
        - name: RAILS_ENV
          value: review
        - name: RAILS_MAX_THREADS
          value: "5"
        - name: DATABASE_URL
          value: {{ $databaseUrl | quote }}
        - name: K8S_NAMESPACE
          value: {{ .Release.Namespace | quote }}
        - name: API_HOST
          value: "api.{{ include "hostname" .Values.service.url }}"
        - name: REVIEW_URL
          value: {{ include "hostname" .Values.service.url }}
        - name: CORS_ORIGINS
          value: "https:\\/\\/.*\\.{{ include "hostname" .Values.service.url | replace "." "\\\\." }}"
        - name: RAILS_MASTER_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "app.fullname" . }}
              key: master.key
        ports:
        - name: http-backend
          containerPort: 3000
        livenessProbe:
          httpGet:
            path: /up
            port: http-backend
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /up
            port: http-backend
          initialDelaySeconds: 60
          periodSeconds: 30
        resources:
{{ toYaml .Values.backend.resources | indent 10 }}
      - name: frontend
        image: "{{ .Values.frontend.image.repository }}:{{ .Values.frontend.image.tag }}"
        imagePullPolicy: {{ .Values.frontend.image.pullPolicy }}
        env:
        - name: API_HOST
          value: "api.{{ include "hostname" .Values.service.url }}"
        - name: API_URL
          value: "https://api.{{ include "hostname" .Values.service.url }}"
        ports:
        - name: http-frontend
          containerPort: 80
        livenessProbe:
          httpGet:
            path: /
            port: http-frontend
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: http-frontend
          initialDelaySeconds: 60
          periodSeconds: 30
        resources:
{{ toYaml .Values.frontend.resources | indent 10 }}
      volumes:
      - name: credentials
        secret:
          secretName: {{ include "app.fullname" . }}
          items:
          - key: credentials.json
            path: credentials.json
